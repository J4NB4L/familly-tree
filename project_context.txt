Project Context From: /c/Users/PC/School/RO/TP/TP1/frontend
Generated On: Mon May 26 07:56:54     2025
===============================================
Ignored Directory Patterns: .* node_modules vendor build dist target __pycache__ .next cache target venv storage
Ignored File Patterns: *.log *.jar *.pdf *.png *.jpg *.class *.sqlite *.csv project_context.txt package-lock.json yarn.lock composer.lock *.ico pnpm-lock.yaml
===============================================

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/.env

# URL de base de l'API backend
VITE_API_URL=http://localhost:5000/api// END OF FILE: .env

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/.gitignore

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Custom ignores
project_context.txt
prompter.sh
// END OF FILE: .gitignore

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/index.html

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + TS</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>
// END OF FILE: index.html

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/package.json

{
  "name": "family-tp",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.3",
    "tailwindcss": "^4.1.5",
    "typescript": "~5.7.2",
    "vite": "^6.3.1"
  },
  "dependencies": {
    "@balkangraph/familytree.js": "^1.9.45",
    "@balkangraph/orgchart.js": "^8.16.24",
    "axios": "^1.9.0",
    "cytoscape": "^3.32.0",
    "family-tp": "file:"
  }
}
// END OF FILE: package.json

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/prompter.sh

#!/bin/bash

# --- Configuration ---

# Default project path if none provided
DEFAULT_PROJECT_PATH="."
PROJECT_PATH=${1:-"$DEFAULT_PROJECT_PATH"}

# Output file name (relative to PROJECT_PATH)
OUTPUT_FILENAME="project_context.txt"

# Directories to completely ignore (won't be traversed)
EXCLUDE_DIRS_PATTERN=( \
    ".*"            # All hidden folders (.git, .vscode, .idea, .svn, etc.)
    "node_modules"
    "vendor"        # PHP Composer
    "build"
    "dist"
    "target"        # Java/Rust build outputs
    "__pycache__"   # Python cache
    ".next"         # Next.js build output
    "cache"         # General cache folders
    "target"
    "venv"
    "storage"       # Laravel storage (often contains logs, cache, etc.)
    # Add more directory names here if needed
)

# Specific file patterns to ignore within traversed directories
EXCLUDE_FILES_PATTERN=( \
    "*.log"
    "*.jar"
    "*.pdf"
    "*.png"
    "*.jpg"
    "*.class"
    "*.sqlite"
    "*.csv"
    "project_context.txt"
    # ".env*"       # Consider if you NEED .env files; uncomment if NOT needed.
    "package-lock.json"
    "yarn.lock"
    "composer.lock"
    "*.ico"
    "pnpm-lock.yaml"
    # Add more file patterns here (e.g., "*.swp", "*.bak", "*.tmp")
)

# --- Script Logic ---

# Attempt to get absolute path; exit if PROJECT_PATH is invalid early
PROJECT_PATH=$(realpath "$PROJECT_PATH" 2>/dev/null)
if [ $? -ne 0 ] || [ ! -d "$PROJECT_PATH" ]; then
    echo "Error: Invalid or non-existent project directory specified." >&2 # Error to stderr
    exit 1
fi

OUTPUT_FILE="$PROJECT_PATH/$OUTPUT_FILENAME"

# --- Safety Check: Prevent overwriting the project directory itself ---
# This is unlikely but guards against strange configurations
if [ "$PROJECT_PATH" == "$OUTPUT_FILE" ]; then
    echo "Error: Project directory path conflicts with output file name '$OUTPUT_FILENAME'." >&2
    exit 1
fi

# Delete output file silently if it exists
rm -f "$OUTPUT_FILE"

# --- Build the find command ---
# Uses arrays to construct the find command safely and avoid complex escaping issues with eval
find_args=("$PROJECT_PATH")

# Add directory prune conditions
if [ ${#EXCLUDE_DIRS_PATTERN[@]} -gt 0 ]; then
    find_args+=(\()
    first_prune=true
    for dir_pattern in "${EXCLUDE_DIRS_PATTERN[@]}"; do
        if ! $first_prune; then
            find_args+=(-o)
        fi
        find_args+=(-name "$dir_pattern" -type d)
        first_prune=false
    done
    find_args+=(\) -prune -o) # Add the prune action and the OR for the next part
fi

# Add primary find conditions (type file, exclude output file, exclude patterns)
find_args+=(\( -type f -not -path "$OUTPUT_FILE")
if [ ${#EXCLUDE_FILES_PATTERN[@]} -gt 0 ]; then
    for file_pattern in "${EXCLUDE_FILES_PATTERN[@]}"; do
        find_args+=(-not -name "$file_pattern")
    done
fi
find_args+=(-print \)) # Add the print action and close the group

# --- Execute the find command and process results ---

# Create the header in the output file
{
    echo "Project Context From: $PROJECT_PATH"
    echo "Generated On: $(date)"
    echo "==============================================="
    echo "Ignored Directory Patterns: ${EXCLUDE_DIRS_PATTERN[*]}"
    echo "Ignored File Patterns: ${EXCLUDE_FILES_PATTERN[*]}"
    echo "==============================================="
    echo ""
} > "$OUTPUT_FILE"

error_count=0
# Use find with process substitution and sorting. Avoids eval.
while IFS= read -r FILE_PATH; do
    # Calculate relative path for cleaner output
    RELATIVE_PATH="${FILE_PATH#"$PROJECT_PATH"/}"

    # Append file info and content to the output file
    {
        # echo ""
        # echo "// ==============================================="
        # echo "---> FILE: $RELATIVE_PATH"
        echo "//---> PATH: $FILE_PATH"
        # echo "// ==============================================="
        echo ""
    } >> "$OUTPUT_FILE"

    # Check if file is likely binary/non-text using 'file' command
    # -b: omit filename; check for common non-text types
    if file -b "$FILE_PATH" | grep -q -E 'binary|archive|compressed|image|font'; then
        echo "[Non-text file (e.g., binary, data, compressed) - Contents omitted]" >> "$OUTPUT_FILE"
    else
        # Append text file content, redirect cat errors to stderr
        if ! cat "$FILE_PATH" >> "$OUTPUT_FILE" 2> /dev/null; then # Hide cat errors from stdout
             # Optionally log error to the output file itself, or just count it
             echo "[Error reading file content for $RELATIVE_PATH]" >> "$OUTPUT_FILE"
             ((error_count++))
        fi
    fi

    {
        # echo ""
        echo "// END OF FILE: $RELATIVE_PATH"
        echo ""
    } >> "$OUTPUT_FILE"

done < <(find "${find_args[@]}" | sort) # Execute find command using safe array expansion

# Optionally report errors to stderr if any occurred
if [ $error_count -gt 0 ]; then
    echo "Warning: Encountered $error_count errors reading file contents during context generation." >&2
    # Exit with a non-zero status to indicate partial success/warning
    exit 1
fi

# Exit silently on success
exit 0
// END OF FILE: prompter.sh

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/public/data/dummydata.json

[
  {
    "id": "d4c3e1a5-0b1e-4f8a-9a9c-0d2b3e4f5a6b",
    "name": "Maurice Dupont",
    "mid": null,
    "fid": null,
    "pids": [
      "a1b2c3d4-e5f6-7890-1234-567890abcdef"
    ],
    "gender": "male",
    "birthYear": 1935,
    "deathYear": 2010,
    "img": "/assets/avatars/grandfather.svg",
    "gmail": "maurice.dupont@gmail.com"
  },
  {
    "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    "name": "Jeanne Martin",
    "mid": null,
    "fid": null,
    "pids": [
      "d4c3e1a5-0b1e-4f8a-9a9c-0d2b3e4f5a6b"
    ],
    "gender": "female",
    "birthYear": 1938,
    "deathYear": 2015,
    "img": "/assets/avatars/grandmother.svg",
    "gmail": "jeanne.martin@gmail.com"
  },
  {
    "id": "b8c9d0e1-f2a3-b4c5-d6e7-f8g9h0i1j2k3",
    "name": "Bernard Dupont",
    "mid": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    "fid": "d4c3e1a5-0b1e-4f8a-9a9c-0d2b3e4f5a6b",
    "pids": [
      "c1d2e3f4-g5h6-i7j8-k9l0-m1n2o3p4q5r6"
    ],
    "gender": "male",
    "birthYear": 1960,
    "deathYear": null,
    "img": "/assets/avatars/father.svg",
    "gmail": "bernard.dupont@gmail.com"
  },
  {
    "id": "c1d2e3f4-g5h6-i7j8-k9l0-m1n2o3p4q5r6",
    "name": "Sophie Lefèvre",
    "mid": null,
    "fid": null,
    "pids": [
      "b8c9d0e1-f2a3-b4c5-d6e7-f8g9h0i1j2k3"
    ],
    "gender": "female",
    "birthYear": 1962,
    "deathYear": null,
    "img": "/assets/avatars/mother.svg",
    "gmail": "sophie.lefevre@gmail.com"
  },
  {
    "id": "e5f6g7h8-i9j0-k1l2-m3n4-o5p6q7r8s9t0",
    "name": "Pierre Lambert",
    "mid": null,
    "fid": null,
    "pids": [
      "f1g2h3i4-j5k6-l7m8-n9o0-p1q2r3s4t5u6"
    ],
    "gender": "male",
    "birthYear": 1958,
    "deathYear": null,
    "img": "/assets/avatars/father.svg",
    "gmail": "pierre.lambert@gmail.com"
  },
  {
    "id": "f1g2h3i4-j5k6-l7m8-n9o0-p1q2r3s4t5u6",
    "name": "Catherine Dupont",
    "mid": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    "fid": "d4c3e1a5-0b1e-4f8a-9a9c-0d2b3e4f5a6b",
    "pids": [
      "e5f6g7h8-i9j0-k1l2-m3n4-o5p6q7r8s9t0"
    ],
    "gender": "female",
    "birthYear": 1963,
    "deathYear": null,
    "img": "/assets/avatars/mother.svg",
    "gmail": "catherine.dupont@gmail.com"
  },
  {
    "id": "g7h8i9j0-k1l2-m3n4-o5p6-q7r8s9t0u1v2",
    "name": "René Moreau",
    "mid": null,
    "fid": null,
    "pids": [
      "h1i2j3k4-l5m6-n7o8-p9q0-r1s2t3u4v5w6"
    ],
    "gender": "male",
    "birthYear": 1965,
    "deathYear": null,
    "img": "/assets/avatars/father.svg",
    "gmail": "rene.moreau@gmail.com"
  },
  {
    "id": "h1i2j3k4-l5m6-n7o8-p9q0-r1s2t3u4v5w6",
    "name": "Marie Dupont",
    "mid": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    "fid": "d4c3e1a5-0b1e-4f8a-9a9c-0d2b3e4f5a6b",
    "pids": [
      "g7h8i9j0-k1l2-m3n4-o5p6-q7r8s9t0u1v2"
    ],
    "gender": "female",
    "birthYear": 1965,
    "deathYear": null,
    "img": "/assets/avatars/mother.svg",
    "gmail": "marie.dupont@gmail.com"
  },
  {
    "id": "i7j8k9l0-m1n2-o3p4-q5r6-s7t8u9v0w1x2",
    "name": "Thomas Dupont",
    "mid": "c1d2e3f4-g5h6-i7j8-k9l0-m1n2o3p4q5r6",
    "fid": "b8c9d0e1-f2a3-b4c5-d6e7-f8g9h0i1j2k3",
    "pids": [
      "j1k2l3m4-n5o6-p7q8-r9s0-t1u2v3w4x5y6"
    ],
    "gender": "male",
    "birthYear": 1985,
    "deathYear": null,
    "img": "/assets/avatars/son.svg",
    "gmail": "thomas.dupont@gmail.com"
  },
  {
    "id": "j1k2l3m4-n5o6-p7q8-r9s0-t1u2v3w4x5y6",
    "name": "Laura Blanc",
    "mid": null,
    "fid": null,
    "pids": [
      "i7j8k9l0-m1n2-o3p4-q5r6-s7t8u9v0w1x2"
    ],
    "gender": "female",
    "birthYear": 1988,
    "deathYear": null,
    "img": "/assets/avatars/wife.svg",
    "gmail": "laura.blanc@gmail.com"
  },
  {
    "id": "k7l8m9n0-o1p2-q3r4-s5t6-u7v8w9x0y1z2",
    "name": "Emilie Dupont",
    "mid": "c1d2e3f4-g5h6-i7j8-k9l0-m1n2o3p4q5r6",
    "fid": "b8c9d0e1-f2a3-b4c5-d6e7-f8g9h0i1j2k3",
    "pids": [
      "l1m2n3o4-p5q6-r7s8-t9u0-v1w2x3y4z5a6"
    ],
    "gender": "female",
    "birthYear": 1990,
    "deathYear": null,
    "img": "/assets/avatars/daughter.svg",
    "gmail": "emilie.dupont@gmail.com"
  },
  {
    "id": "l1m2n3o4-p5q6-r7s8-t9u0-v1w2x3y4z5a6",
    "name": "Julien Petit",
    "mid": null,
    "fid": null,
    "pids": [
      "k7l8m9n0-o1p2-q3r4-s5t6-u7v8w9x0y1z2"
    ],
    "gender": "male",
    "birthYear": 1987,
    "deathYear": null,
    "img": "/assets/avatars/husband.svg",
    "gmail": "julien.petit@gmail.com"
  },
  {
    "id": "m7n8o9p0-q1r2-s3t4-u5v6-w7x8y9z0a1b2",
    "name": "Marc Lambert",
    "mid": "f1g2h3i4-j5k6-l7m8-n9o0-p1q2r3s4t5u6",
    "fid": "e5f6g7h8-i9j0-k1l2-m3n4-o5p6q7r8s9t0",
    "pids": [],
    "gender": "male",
    "birthYear": 1988,
    "deathYear": null,
    "img": "/assets/avatars/son.svg",
    "gmail": "marc.lambert@gmail.com"
  },
  {
    "id": "n1o2p3q4-r5s6-t7u8-v9w0-x1y2z3a4b5c6",
    "name": "Claire Lambert",
    "mid": "f1g2h3i4-j5k6-l7m8-n9o0-p1q2r3s4t5u6",
    "fid": "e5f6g7h8-i9j0-k1l2-m3n4-o5p6q7r8s9t0",
    "pids": [],
    "gender": "female",
    "birthYear": 1992,
    "deathYear": null,
    "img": "/assets/avatars/daughter.svg",
    "gmail": "claire.lambert@gmail.com"
  },
  {
    "id": "o7p8q9r0-s1t2-u3v4-w5x6-y7z8a9b0c1d2",
    "name": "Pascal Moreau",
    "mid": "h1i2j3k4-l5m6-n7o8-p9q0-r1s2t3u4v5w6",
    "fid": "g7h8i9j0-k1l2-m3n4-o5p6-q7r8s9t0u1v2",
    "pids": [
      "s1t2u3v4-w5x6-y7z8-a9b0-c1d2e3f4g5h6"
    ],
    "gender": "male",
    "birthYear": 1990,
    "deathYear": null,
    "img": "/assets/avatars/son.svg",
    "gmail": "pascal.moreau@gmail.com"
  },
  {
    "id": "p1q2r3s4-t5u6-v7w8-x9y0-z1a2b3c4d5e6",
    "name": "Alice Moreau",
    "mid": "h1i2j3k4-l5m6-n7o8-p9q0-r1s2t3u4v5w6",
    "fid": "g7h8i9j0-k1l2-m3n4-o5p6-q7r8s9t0u1v2",
    "pids": [],
    "gender": "female",
    "birthYear": 1993,
    "deathYear": null,
    "img": "/assets/avatars/daughter.svg",
    "gmail": "alice.moreau@gmail.com"
  },
  {
    "id": "q7r8s9t0-u1v2-w3x4-y5z6-a7b8c9d0e1f2",
    "name": "Léo Dupont",
    "mid": "j1k2l3m4-n5o6-p7q8-r9s0-t1u2v3w4x5y6",
    "fid": "i7j8k9l0-m1n2-o3p4-q5r6-s7t8u9v0w1x2",
    "pids": [],
    "gender": "male",
    "birthYear": 2015,
    "deathYear": null,
    "img": "/assets/avatars/grandson.svg",
    "gmail": "leo.dupont@gmail.com"
  },
  {
    "id": "r1s2t3u4-v5w6-x7y8-z9a0-b1c2d3e4f5g6",
    "name": "Emma Dupont",
    "mid": "j1k2l3m4-n5o6-p7q8-r9s0-t1u2v3w4x5y6",
    "fid": "i7j8k9l0-m1n2-o3p4-q5r6-s7t8u9v0w1x2",
    "pids": [],
    "gender": "female",
    "birthYear": 2018,
    "deathYear": null,
    "img": "/assets/avatars/granddaughter.svg",
    "gmail": "emma.dupont@gmail.com"
  },
  {
    "id": "s7t8u9v0-w1x2-y3z4-a5b6-c7d8e9f0g1h2",
    "name": "Lucas Petit",
    "mid": "k7l8m9n0-o1p2-q3r4-s5t6-u7v8w9x0y1z2",
    "fid": "l1m2n3o4-p5q6-r7s8-t9u0-v1w2x3y4z5a6",
    "pids": [],
    "gender": "male",
    "birthYear": 2019,
    "deathYear": null,
    "img": "/assets/avatars/grandson.svg",
    "gmail": "lucas.petit@gmail.com"
  },
  {
    "id": "t1u2v3w4-x5y6-z7a8-b9c0-d1e2f3g4h5i6",
    "name": "Louise Petit",
    "mid": "k7l8m9n0-o1p2-q3r4-s5t6-u7v8w9x0y1z2",
    "fid": "l1m2n3o4-p5q6-r7s8-t9u0-v1w2x3y4z5a6",
    "pids": [],
    "gender": "female",
    "birthYear": 2021,
    "deathYear": null,
    "img": "/assets/avatars/granddaughter.svg",
    "gmail": "louise.petit@gmail.com"
  },
  {
    "id": "u7v8w9x0-y1z2-a3b4-c5d6-e7f8g9h0i1j2",
    "name": "Richard Roy",
    "mid": null,
    "fid": null,
    "pids": [
      "v1w2x3y4-z5a6-b7c8-d9e0-f1g2h3i4j5k6"
    ],
    "gender": "male",
    "birthYear": 1940,
    "deathYear": 2020,
    "img": "/assets/avatars/grandfather.svg",
    "gmail": "richard.roy@gmail.com"
  },
  {
    "id": "v1w2x3y4-z5a6-b7c8-d9e0-f1g2h3i4j5k6",
    "name": "Hélène Durand",
    "mid": null,
    "fid": null,
    "pids": [
      "u7v8w9x0-y1z2-a3b4-c5d6-e7f8g9h0i1j2"
    ],
    "gender": "female",
    "birthYear": 1942,
    "deathYear": null,
    "img": "/assets/avatars/grandmother.svg",
    "gmail": "helene.durand@gmail.com"
  },
  {
    "id": "w7x8y9z0-a1b2-c3d4-e5f6-g7h8i9j0k1l2",
    "name": "Philippe Roy",
    "mid": "v1w2x3y4-z5a6-b7c8-d9e0-f1g2h3i4j5k6",
    "fid": "u7v8w9x0-y1z2-a3b4-c5d6-e7f8g9h0i1j2",
    "pids": [
      "x1y2z3a4-b5c6-d7e8-f9g0-h1i2j3k4l5m6"
    ],
    "gender": "male",
    "birthYear": 1964,
    "deathYear": null,
    "img": "/assets/avatars/father.svg",
    "gmail": "philippe.roy@gmail.com"
  },
  {
    "id": "x1y2z3a4-b5c6-d7e8-f9g0-h1i2j3k4l5m6",
    "name": "Nathalie Simon",
    "mid": null,
    "fid": null,
    "pids": [
      "w7x8y9z0-a1b2-c3d4-e5f6-g7h8i9j0k1l2"
    ],
    "gender": "female",
    "birthYear": 1967,
    "deathYear": null,
    "img": "/assets/avatars/mother.svg",
    "gmail": "nathalie.simon@gmail.com"
  },
  {
    "id": "s1t2u3v4-w5x6-y7z8-a9b0-c1d2e3f4g5h6",
    "name": "Isabelle Roy",
    "mid": "v1w2x3y4-z5a6-b7c8-d9e0-f1g2h3i4j5k6",
    "fid": "u7v8w9x0-y1z2-a3b4-c5d6-e7f8g9h0i1j2",
    "pids": [
      "o7p8q9r0-s1t2-u3v4-w5x6-y7z8a9b0c1d2"
    ],
    "gender": "female",
    "birthYear": 1968,
    "deathYear": null,
    "img": "/assets/avatars/mother.svg",
    "gmail": "isabelle.roy@gmail.com"
  },
  {
    "id": "y7z8a9b0-c1d2-e3f4-g5h6-i7j8k9l0m1n2",
    "name": "Antoine Roy",
    "mid": "x1y2z3a4-b5c6-d7e8-f9g0-h1i2j3k4l5m6",
    "fid": "w7x8y9z0-a1b2-c3d4-e5f6-g7h8i9j0k1l2",
    "pids": [],
    "gender": "male",
    "birthYear": 1995,
    "deathYear": null,
    "img": "/assets/avatars/son.svg",
    "gmail": "antoine.roy@gmail.com"
  },
  {
    "id": "z1a2b3c4-d5e6-f7g8-h9i0-j1k2l3m4n5o6",
    "name": "Camille Roy",
    "mid": "x1y2z3a4-b5c6-d7e8-f9g0-h1i2j3k4l5m6",
    "fid": "w7x8y9z0-a1b2-c3d4-e5f6-g7h8i9j0k1l2",
    "pids": [],
    "gender": "female",
    "birthYear": 1998,
    "deathYear": null,
    "img": "/assets/avatars/daughter.svg",
    "gmail": "camille.roy@gmail.com"
  },
  {
    "id": "a7b8c9d0-e1f2-g3h4-i5j6-k7l8m9n0o1p2",
    "name": "Théo Moreau",
    "mid": "s1t2u3v4-w5x6-y7z8-a9b0-c1d2e3f4g5h6",
    "fid": "o7p8q9r0-s1t2-u3v4-w5x6-y7z8a9b0c1d2",
    "pids": [],
    "gender": "male",
    "birthYear": 2020,
    "deathYear": null,
    "img": "/assets/avatars/grandson.svg",
    "gmail": "theo.moreau@gmail.com"
  }
]// END OF FILE: public/data/dummydata.json

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/public/vite.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/vite.svg

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/components/leftsidebar.js

export function renderLeftSidebar() {
  return `
    <div id="left-sidebar">
      <h3 class="sidebar-title">Recherche</h3>
      <ul class="sidebar-menu">
        <li>
          <button id="dijkstra-button" class="sidebar-button">Dijkstra</button>
          <div id="dijkstra-form" class="search-form" style="display: none;">
            <h3 class="sidebar-title">Dijkstra</h3>
            <label>Personne de départ :</label>
            <select id="start-person"></select>
            <label>Personne de fin :</label>
            <select id="end-person"></select>
            <button id="run-dijkstra">Lancer Dijkstra</button>
          </div>
        </li>
        <li>
          <button id="bellman-ford-button" class="sidebar-button">Bellman-Ford</button>
          <div id="bellman-ford-form" class="search-form" style="display: none;">
            <h3 class="sidebar-title">Bellman-Ford</h3>
            <label>Personne de départ :</label>
            <select id="bellman-ford-start-person"></select>
            <label>Personne de fin :</label>
            <select id="bellman-ford-end-person"></select>
            <button id="run-bellman-ford">Lancer Bellman-Ford</button>
          </div>
        </li>
      </ul>
      <h3 class="sidebar-title" style="margin-top: 30px;">Sous-famille</h3>
      <ul class="sidebar-menu">
        <li>
          <button id="prim-button" class="sidebar-button">Prim</button>
          <div id="prim-form" class="search-form" style="display: none;">
            <h3 class="sidebar-title">Prim</h3>
            <label>Personne de départ :</label>
            <select id="prim-start-person"></select>
            <button id="run-prim">Lancer Prim</button>
          </div>
        </li>
        <li>
          <button id="kruskal-button" class="sidebar-button">Kruskal</button>
          <div id="kruskal-form" class="search-form" style="display: none;">
            <h3 class="sidebar-title">Kruskal</h3>
            <label>Personne de départ :</label>
            <select id="kruskal-start-person"></select>
            <button id="run-kruskal">Lancer Kruskal</button>
          </div>
        </li>
      </ul>
    </div>
  `;
}
// END OF FILE: src/components/leftsidebar.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/components/login.js

// frontend/src/components/login.js (ou LoginPage.js)
import { authService } from '../services/authService';
// import { familyDataService } from '../services/familyDataService'; // Moins direct ici

export function renderLoginPage() {
  return `
    <div class="container-card" style="max-width: 500px; margin: 40px auto;">
      <h2>Connexion</h2>
      <form id="login-form">
        <label for="email">Email :</label>
        <input type="email" id="email" name="email" required />

        <label for="password">Mot de passe :</label>
        <input type="password" id="password" name="password" required />

        <button type="submit">Se connecter</button>
        <p style="text-align: center; margin-top: 15px;">
          Pas encore de compte ? <a href="/register" data-link>S'inscrire</a>
        </p>
      </form>
      <div id="login-error" style="color: red; margin-top: 10px;"></div>
    </div>
  `;
}

export function setupLoginFormHandler() {
  const form = document.getElementById('login-form');
  const errorDiv = document.getElementById('login-error');
  if (!form) return;

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    errorDiv.textContent = ''; // Clear previous errors
    const formData = new FormData(e.target);
    const email = formData.get('email');
    const password = formData.get('password');

    try {
      const userProfileFromTree = await authService.login(email, password); // authService.login gère maintenant la synchro avec l'arbre
      if (userProfileFromTree) {
        window.location.href = '/'; // Ou la page de profil /dashboard
      } else {
        // Ce cas ne devrait pas arriver si authService.login lève une erreur en cas d'échec
        errorDiv.textContent = "Échec de la connexion. Profil non chargé.";
      }
    } catch (error) {
      console.error("Login failed:", error);
      errorDiv.textContent = error.response?.data?.message || "Échec de la connexion. Vérifiez vos identifiants.";
    }
  });
}// END OF FILE: src/components/login.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/components/maincontent.js

//---> PATH: src/components/maincontent.js
export function renderMainContent() {
  return `
    <div id="main-content-area">
      <div class="view-controls">
        <div class="view-buttons">
          <button class="view-button active-view-btn" data-view="tree">Arbre Généalogique</button>
          <button class="view-button" data-view="graph">Graphe des Relations</button>
        </div>
        <div class="scope-buttons">
          <button class="scope-button active-scope-btn" data-scope="full">Voir Toute la Famille</button>
          <button class="scope-button" data-scope="personal">Voir Ma Famille Proche</button>
        </div>
      </div>
      <div class="container-card" id="tree-view">
        <h2>Arbre Généalogique</h2>
        <div id="family-tree-container"></div>
      </div>
      <div class="container-card" id="graph-view" style="display: none;">
        <h2>Graphe des Relations</h2>
        <div id="graph-container"></div>
      </div>
    </div>
  `;
}
// END OF FILE: src/components/maincontent.js// END OF FILE: src/components/maincontent.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/components/navbar.js

// frontend/src/components/navbar.js
import { authService } from '../services/authService';

export function renderNavbar() {
  // Utiliser le profil mis en cache. Le router se charge de le rafraîchir au besoin.
  const userProfile = authService.getCurrentUserProfile(); 

  let userSectionHtml = '<a href="/login" data-link>Connexion</a>'; // Par défaut
  
  if (userProfile && userProfile.id) { // Vérifier si l'utilisateur est "connecté" et a un profil
    userSectionHtml = `
      <a href="/profile" data-link class="user-info">
        <img src="${userProfile.img || '/assets/avatars/default.svg'}" alt="Photo de ${userProfile.name || 'Utilisateur'}" class="user-avatar" />
        <span>${userProfile.name || 'Mon Profil'}</span>
      </a>
    `;
  }

  return `
    <div id="navbar">
      <h1>Arbre Généalogique Familial</h1>
      <div id="navbar-menu">
        <a href="/" data-link>Accueil</a>
        ${userSectionHtml}
      </div>
    </div>
  `;
}// END OF FILE: src/components/navbar.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/components/profile.js

// frontend/src/components/profile.js
import { authService } from '../services/authService';
import { familyDataService } from '../services/familyDataService';

// Helper pour peupler les menus déroulants
async function populateSelect(selectElementId, data, currentValue, excludeIds = [], filterFn = null, defaultOptionText = "-- Aucun(e) --") {
  const selectElement = document.getElementById(selectElementId);
  if (!selectElement) return;

  selectElement.innerHTML = `<option value="">${defaultOptionText}</option>`; 

  let filteredData = data;
  if (filterFn) {
    filteredData = data.filter(filterFn);
  }

  filteredData.forEach(person => {
    if (excludeIds.includes(person.id)) return;

    const option = document.createElement('option');
    option.value = person.id; 
    option.textContent = `${person.name} (${person.birthYear || 'N/A'})`;
    if (currentValue === person.id) {
      option.selected = true;
    }
    selectElement.appendChild(option);
  });
}

export function renderProfilePage() {
  // currentUserProfile sera chargé dans setupProfileFormHandler
  // On met des placeholders pour le rendu initial
  const user = {
    id: '', name: 'Chargement...', fid: null, mid: null, pids: [], gender: 'unknown',
    birthYear: '', img: '/assets/avatars/default.svg', gmail: ''
  };

  return `
    <div class="profile-page-container">
      <div class="profile-content-wrapper">
        <h1 class="profile-main-title">Profil utilisateur</h1>
        
        <div class="profile-card">
            <div class="profile-header-section">
              <div class="profile-image-container">
                <img src="${user.img}" alt="Photo de profil" id="profile-image-preview" class="profile-image-preview" />
                <div class="profile-image-upload-trigger" onclick="document.getElementById('profile-imgFile').click()">
                  <span style="color: white; font-size: 22px;">+</span>
                </div>
              </div>
              <h2 id="profile-header-name" class="profile-name-header">${user.name}</h2>
              <input type="file" id="profile-imgFile" name="imgFile" accept="image/*" style="display:none" />
              <input type="url" id="profile-imgUrl" name="imgUrl" style="display:none" value=""/>
            </div>
            
            <form id="profile-form">
              <h3 class="profile-section-title">Informations personnelles</h3>
                
                <div class="profile-info-grid">
                  <div class="profile-form-field">
                    <label for="profile-name">Nom complet:</label>
                    <input type="text" id="profile-name" name="name" value="${user.name}" required />
                  </div>
                  <div class="profile-form-field">
                    <label for="profile-gmail">Email:</label>
                    <input type="email" id="profile-gmail" name="gmail" value="${user.gmail}" />
                  </div>
                  <div class="profile-form-field">
                    <label for="profile-gender">Genre:</label>
                    <select id="profile-gender" name="gender">
                      <option value="unknown" ${user.gender === 'unknown' ? 'selected' : ''}>Non spécifié</option>
                      <option value="male" ${user.gender === 'male' ? 'selected' : ''}>Homme</option>
                      <option value="female" ${user.gender === 'female' ? 'selected' : ''}>Femme</option>
                    </select>
                  </div>
                  <div class="profile-form-field">
                    <label for="profile-birthYear">Année de naissance:</label>
                    <input type="number" id="profile-birthYear" name="birthYear" value="${user.birthYear}" min="1800" max="${new Date().getFullYear()}" />
                  </div>
                   <div class="profile-form-field">
                    <label for="profile-deathYear">Année de décès (si applicable):</label>
                    <input type="number" id="profile-deathYear" name="deathYear" value="${user.deathYear || ''}" min="1800" max="${new Date().getFullYear()}" />
                  </div>
                </div>

                
                <div class="profile-relations-section">
                  <h3 class="profile-section-title">Parents</h3>
                  <div class="profile-parent-fields">
                    <div class="profile-form-field">
                      <label for="profile-fid">Père:</label>
                      <div class="relation-select-wrapper">
                        <select id="profile-fid" name="fid"></select>
                        <button type="button" class="remove-relation-btn small-btn" data-relation-type="fid" title="Retirer le père">✕</button>
                      </div>
                    </div>
                    <div class="profile-form-field">
                      <label for="profile-mid">Mère:</label>
                      <div class="relation-select-wrapper">
                        <select id="profile-mid" name="mid"></select>
                        <button type="button" class="remove-relation-btn small-btn" data-relation-type="mid" title="Retirer la mère">✕</button>
                      </div>
                    </div>
                  </div>
                </div>
                
                
                <div class="profile-family-management-section">
                  <div class="profile-section-header">
                    <h3 class="profile-section-title">Familles (Conjoints et Enfants)</h3>
                    <button type="button" id="add-family-section-btn" class="profile-action-btn positive-btn"><span style="margin-right: 8px;">+</span> Ajouter une famille</button>
                  </div>
                  <div id="family-sections-container">
                    <!-- Les sections de famille seront ajoutées ici dynamiquement -->
                  </div>
                </div>
                
                <div class="profile-actions-footer">
                  <div class="account-actions">
                    <button type="button" id="logout-button" class="profile-action-btn danger-btn">Déconnexion</button>
                    <button type="button" id="delete-account-button" class="profile-action-btn outline-danger-btn">Supprimer le compte</button>
                  </div>
                  <button type="submit" class="profile-action-btn primary-btn submit-btn">Mettre à jour le profil</button>
                </div>
              </form>
              <div id="profile-message" class="profile-message-area"></div>
            </div>
        </div>
      </div>
    </div>
  `;
}

function renderFamilySectionHTML(familyIndex) {
    return `
        <div class="family-section-item" data-family-index="${familyIndex}">
            <div class="family-section-item-header">
                <h4 class="family-section-item-title">Famille ${familyIndex + 1}</h4>
                <button type="button" class="remove-family-section-btn danger-btn small-btn" data-family-index="${familyIndex}" title="Supprimer cette famille">× Supprimer Famille</button>
            </div>
            <div class="profile-form-field">
                <label for="family_conjoint_${familyIndex}">Conjoint:</label>
                <div class="relation-select-wrapper">
                    <select id="family_conjoint_${familyIndex}" name="family_conjoint_${familyIndex}" class="family-conjoint-select" data-family-index="${familyIndex}"></select>
                    <button type="button" class="remove-relation-btn small-btn" data-relation-type="conjoint" data-family-index="${familyIndex}" title="Retirer ce conjoint">✕</button>
                </div>
            </div>
            <div class="family-children-subsection">
                <h5 class="children-subsection-title">Enfants de cette union</h5>
                <div class="family-children-list" data-family-index="${familyIndex}">
                    <!-- Enfants listés ici -->
                </div>
                <div class="profile-form-field">
                    <label for="family_potential_child_${familyIndex}">Ajouter un enfant à cette union:</label>
                    <div class="relation-select-wrapper">
                        <select id="family_potential_child_${familyIndex}" class="family-potential-child-select" data-family-index="${familyIndex}"></select>
                        <button type="button" class="family-add-child-btn positive-btn small-btn" data-family-index="${familyIndex}">+ Ajouter</button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

async function setupDynamicFamilySections(allPeople, currentUserProfile, messageDiv) {
    const container = document.getElementById('family-sections-container');
    if (!container) return;
    container.innerHTML = ''; 

    const pids = currentUserProfile.pids || [];
    if (pids.length === 0) {
        container.insertAdjacentHTML('beforeend', renderFamilySectionHTML(0));
        await setupSingleFamilySectionControls(0, null, allPeople, currentUserProfile, messageDiv);
    } else {
        pids.forEach(async (conjointId, index) => {
            container.insertAdjacentHTML('beforeend', renderFamilySectionHTML(index));
            await setupSingleFamilySectionControls(index, conjointId, allPeople, currentUserProfile, messageDiv);
        });
    }

    document.getElementById('add-family-section-btn').onclick = async () => {
        const nextIndex = container.children.length;
        container.insertAdjacentHTML('beforeend', renderFamilySectionHTML(nextIndex));
        await setupSingleFamilySectionControls(nextIndex, null, allPeople, currentUserProfile, messageDiv);
    };
}

async function setupSingleFamilySectionControls(familyIndex, currentConjointId, allPeople, currentUserProfile, messageDiv) {
    const section = document.querySelector(`.family-section-item[data-family-index="${familyIndex}"]`);
    if (!section) return;

    const conjointSelect = section.querySelector(`.family-conjoint-select`);
    const potentialChildSelect = section.querySelector(`.family-potential-child-select`);
    const childrenListDiv = section.querySelector(`.family-children-list`);
    const addChildBtn = section.querySelector(`.family-add-child-btn`);
    const removeFamilyBtn = section.querySelector(`.remove-family-section-btn`);
    const removeConjointBtn = section.querySelector(`button[data-relation-type="conjoint"][data-family-index="${familyIndex}"]`);

    // 1. Peupler le select du conjoint
    const existingConjointIdsInOtherSections = Array.from(document.querySelectorAll('.family-conjoint-select'))
        .map(s => s.value)
        .filter(v => v && v !== currentConjointId); // Exclure le conjoint actuel de cette section

    await populateSelect(conjointSelect.id, allPeople, currentConjointId, 
        [currentUserProfile.id, currentUserProfile.fid, currentUserProfile.mid, ...existingConjointIdsInOtherSections].filter(Boolean), 
        p => { // Filtre pour conjoints potentiels
            if (p.id === currentUserProfile.id) return false; // Ne peut pas être soi-même
            if (p.id === currentUserProfile.fid || p.id === currentUserProfile.mid) return false; // Ne peut pas être un parent de l'user
            // Ne peut pas être un enfant de l'user
            if (allPeople.some(child => (child.fid === currentUserProfile.id || child.mid === currentUserProfile.id) && child.id === p.id)) return false;
            return true;
        },
        "-- Sélectionner Conjoint --"
    );
    if(currentConjointId) conjointSelect.value = currentConjointId;


    async function refreshSpecificFamilyChildren(selectedConjointId) {
        childrenListDiv.innerHTML = ''; 
        
        let enfantsDeCetteUnion = [];
        if (selectedConjointId) {
            enfantsDeCetteUnion = allPeople.filter(p => 
                (p.fid === currentUserProfile.id && p.mid === selectedConjointId) ||
                (p.mid === currentUserProfile.id && p.fid === selectedConjointId)
            );
        }

        if (enfantsDeCetteUnion.length > 0) {
            const ul = document.createElement('ul');
            ul.className = 'children-items-list';
            enfantsDeCetteUnion.forEach(child => {
                const li = document.createElement('li');
                li.className = 'child-item-entry';
                
                const infoDiv = document.createElement('div');
                infoDiv.className = 'child-item-info';
                const nameSpan = document.createElement('span');
                nameSpan.textContent = child.name;
                nameSpan.className = 'child-item-name';
                const yearSpan = document.createElement('span');
                yearSpan.textContent = `Né(e) en ${child.birthYear || 'N/A'}`;
                yearSpan.className = 'child-item-year';
                
                infoDiv.appendChild(nameSpan);
                infoDiv.appendChild(yearSpan);
                li.appendChild(infoDiv);
                
                const removeChildBtn = document.createElement('button');
                removeChildBtn.innerHTML = '✕';
                removeChildBtn.type = 'button';
                removeChildBtn.className = 'remove-relation-btn small-btn danger-transparent-btn';
                removeChildBtn.title = `Dissocier ${child.name}`;
                
                removeChildBtn.onclick = async () => {
                    if (!confirm(`Dissocier ${child.name} de cette union? Son profil sera mis à jour.`)) return;
                    
                    let childToUpdate = allPeople.find(p => p.id === child.id);
                    if (childToUpdate.fid === currentUserProfile.id && childToUpdate.mid === selectedConjointId) {
                        childToUpdate.fid = null; childToUpdate.mid = null;
                    } else if (childToUpdate.mid === currentUserProfile.id && childToUpdate.fid === selectedConjointId) {
                        childToUpdate.mid = null; childToUpdate.fid = null;
                    } else { // Cas plus général pour dissocier de l'utilisateur si le conjoint n'est pas le bon
                         if (childToUpdate.fid === currentUserProfile.id) childToUpdate.fid = null;
                         if (childToUpdate.mid === currentUserProfile.id) childToUpdate.mid = null;
                    }

                    try {
                        await familyDataService.updatePersonInFamilyData(childToUpdate);
                        const refreshedData = await initializeProfilePage(messageDiv, false); // Rafraîchir sans re-peupler les champs principaux
                        allPeople = refreshedData.allPeople; // Mettre à jour la variable locale
                        await refreshSpecificFamilyChildren(selectedConjointId); 
                        messageDiv.textContent = `${child.name} dissocié(e).`; messageDiv.style.color = 'green';
                    } catch (err) { 
                        messageDiv.textContent = `Erreur dissociation: ${err.message || err}`; messageDiv.style.color = 'red';
                    }
                     setTimeout(() => { messageDiv.textContent = ""; }, 3000);
                };
                li.appendChild(removeChildBtn);
                ul.appendChild(li);
            });
            childrenListDiv.appendChild(ul);
        } else if (selectedConjointId) {
             childrenListDiv.innerHTML = '<p class="no-children-notice">Aucun enfant commun trouvé pour cette union.</p>';
        }


        const currentSelectedConjoint = allPeople.find(p => p.id === selectedConjointId);
        await populateSelect(potentialChildSelect.id, allPeople, null, 
            [currentUserProfile.id, selectedConjointId].filter(Boolean), 
            p => { 
                if (!selectedConjointId || !currentSelectedConjoint) return false; 
                if (p.id === currentUserProfile.id || p.id === selectedConjointId) return false;
                // Déjà enfant de cette union?
                if ((p.fid === currentUserProfile.id && p.mid === selectedConjointId) || (p.mid === currentUserProfile.id && p.fid === selectedConjointId)) return false;
                
                // L'enfant potentiel ne doit pas déjà avoir un parent du même sexe que l'user ou le conjoint de cette union
                let canBeChild = true;
                if (currentUserProfile.gender === 'male' && p.fid && p.fid !== currentUserProfile.id) canBeChild = false; // A déjà un père différent
                if (currentUserProfile.gender === 'female' && p.mid && p.mid !== currentUserProfile.id) canBeChild = false; // A déjà une mère différente
                if (currentSelectedConjoint.gender === 'male' && p.fid && p.fid !== currentSelectedConjoint.id) canBeChild = false;
                if (currentSelectedConjoint.gender === 'female' && p.mid && p.mid !== currentSelectedConjoint.id) canBeChild = false;

                // L'enfant ne peut pas être un parent de l'utilisateur ou du conjoint
                if (currentUserProfile.fid === p.id || currentUserProfile.mid === p.id) return false;
                if (currentSelectedConjoint.fid === p.id || currentSelectedConjoint.mid === p.id) return false;
                
                return canBeChild;
            }, 
            "-- Sélectionner enfant existant --"
        );
    }
    
    await refreshSpecificFamilyChildren(currentConjointId);
    conjointSelect.onchange = async (e) => {
        await refreshSpecificFamilyChildren(e.target.value);
    };

    addChildBtn.onclick = async () => {
        const selectedConjointId = conjointSelect.value;
        const childIdToAdd = potentialChildSelect.value;

        if (!selectedConjointId) {
            messageDiv.textContent = "Sélectionnez un conjoint pour cette famille."; messageDiv.style.color = 'orange';
            return;
        }
        if (!childIdToAdd) {
            messageDiv.textContent = "Sélectionnez un enfant à ajouter."; messageDiv.style.color = 'orange';
            return;
        }
        
        const conjoint = allPeople.find(p => p.id === selectedConjointId);
        if (currentUserProfile.gender === 'unknown' || (conjoint && conjoint.gender === 'unknown')) {
             messageDiv.textContent = "Le genre de l'utilisateur et du conjoint doivent être définis (Homme/Femme)."; messageDiv.style.color = 'orange';
             return;
        }
        
        let childToUpdate = allPeople.find(p => p.id === childIdToAdd);
        let newFid = childToUpdate.fid, newMid = childToUpdate.mid;

        if (currentUserProfile.gender === 'male') newFid = currentUserProfile.id;
        else if (currentUserProfile.gender === 'female') newMid = currentUserProfile.id;

        if (conjoint.gender === 'male') newFid = conjoint.id;
        else if (conjoint.gender === 'female') newMid = conjoint.id;

        if (newFid && newMid && newFid === newMid) {
            messageDiv.textContent = "Un enfant ne peut pas avoir la même personne comme père et mère."; messageDiv.style.color = 'red';
            return;
        }
        childToUpdate.fid = newFid;
        childToUpdate.mid = newMid;

        try {
            await familyDataService.updatePersonInFamilyData(childToUpdate);
            const refreshedData = await initializeProfilePage(messageDiv, false);
            allPeople = refreshedData.allPeople;
            await refreshSpecificFamilyChildren(selectedConjointId);
            messageDiv.textContent = `${childToUpdate.name} ajouté(e) à l'union.`; messageDiv.style.color = 'green';
        } catch (err) { 
            messageDiv.textContent = `Erreur ajout enfant: ${err.message || err}`; messageDiv.style.color = 'red';
        }
        setTimeout(() => { messageDiv.textContent = ""; }, 3000);
    };

    removeFamilyBtn.onclick = async () => {
        if (!confirm("Supprimer cette section famille ? Le conjoint sera dissocié. Les enfants de cette union devront être réassignés manuellement si nécessaire.")) return;
        section.remove(); // Supprimer l'élément du DOM
        // La sauvegarde globale du profil s'occupera de retirer le conjoint des pids de currentUserProfile
        messageDiv.textContent = "Section famille retirée. Sauvegardez le profil pour appliquer."; messageDiv.style.color = 'orange';
        setTimeout(() => { messageDiv.textContent = ""; }, 4000);
         // Mettre à jour les pids de currentUserProfile pour la soumission
        const conjointToRemoveId = conjointSelect.value;
        if(conjointToRemoveId && currentUserProfile.pids) {
            currentUserProfile.pids = currentUserProfile.pids.filter(pid => pid !== conjointToRemoveId);
        }
    };
    
    if (removeConjointBtn) {
        removeConjointBtn.onclick = async () => {
            if (!conjointSelect.value) return;
            const conjointName = allPeople.find(p=>p.id === conjointSelect.value)?.name || 'ce conjoint';
            if (!confirm(`Retirer ${conjointName} de cette famille ? Les enfants communs devront être gérés manuellement.`)) return;
            
            const conjointToRemoveId = conjointSelect.value;
            conjointSelect.value = ""; 
            await refreshSpecificFamilyChildren(null); 
            
            // Mettre à jour les pids de currentUserProfile pour la soumission
            if(conjointToRemoveId && currentUserProfile.pids) {
                 currentUserProfile.pids = currentUserProfile.pids.filter(pid => pid !== conjointToRemoveId);
            }
            messageDiv.textContent = "Conjoint retiré. Sauvegardez le profil pour appliquer."; messageDiv.style.color = 'orange';
            setTimeout(() => { messageDiv.textContent = ""; }, 4000);
        }
    }
}

async function initializeProfilePage(messageDiv, populateMainFields = true) {
    let currentUserProfile, allPeople;
    if(populateMainFields) {
      messageDiv.textContent = "Chargement du profil...";
      messageDiv.style.color = '#4a5568';
    }
    try {
        currentUserProfile = await authService.fetchUserProfileFromServer();
        if (!currentUserProfile) throw new Error("Profil utilisateur non récupéré.");
        allPeople = await familyDataService.getAllFamilyData();

        if(populateMainFields) {
            document.getElementById('profile-name').value = currentUserProfile.name || '';
            document.getElementById('profile-birthYear').value = currentUserProfile.birthYear || '';
            document.getElementById('profile-deathYear').value = currentUserProfile.deathYear || '';
            document.getElementById('profile-gmail').value = currentUserProfile.gmail || '';
            document.getElementById('profile-gender').value = currentUserProfile.gender || 'unknown';
            document.getElementById('profile-image-preview').src = currentUserProfile.img || '/assets/avatars/default.svg';
            const imgUrlInput = document.getElementById('profile-imgUrl');
            if (imgUrlInput && currentUserProfile.img && currentUserProfile.img.startsWith('http')) {
                imgUrlInput.value = currentUserProfile.img;
            }
            const profileNameHeader = document.getElementById('profile-header-name');
            if (profileNameHeader) profileNameHeader.textContent = currentUserProfile.name || 'Votre nom';
        }

        // Peupler parents (fixes)
        const selfId = [currentUserProfile.id];
        await populateSelect('profile-fid', allPeople, currentUserProfile.fid, selfId, 
            p => p.gender === 'male' && p.id !== currentUserProfile.mid && p.id !== currentUserProfile.id && !allPeople.some(child => (child.fid === currentUserProfile.id || child.mid === currentUserProfile.id) && child.id === p.id) // ne pas être un enfant de l'user
        );
        await populateSelect('profile-mid', allPeople, currentUserProfile.mid, selfId, 
            p => p.gender === 'female' && p.id !== currentUserProfile.fid && p.id !== currentUserProfile.id && !allPeople.some(child => (child.fid === currentUserProfile.id || child.mid === currentUserProfile.id) && child.id === p.id)
        );

        await setupDynamicFamilySections(allPeople, currentUserProfile, messageDiv);

        if(populateMainFields) messageDiv.textContent = ""; 
        return { currentUserProfile, allPeople };

    } catch (error) {
        console.error("Erreur critique au chargement du profil:", error);
        messageDiv.textContent = "Erreur critique au chargement du profil. Redirection...";
        messageDiv.style.color = 'red';
        if (!authService.isAuthenticated()) { // Peut-être que fetchUserProfileFromServer a déjà déconnecté
            setTimeout(() => window.location.href = '/login', 2000);
        }
        return { currentUserProfile: null, allPeople: [] }; 
    }
}


export async function setupProfileFormHandler() {
  const form = document.getElementById('profile-form');
  const messageDiv = document.getElementById('profile-message');
  if (!form || !messageDiv) {
    console.error("Éléments du formulaire de profil manquants.");
    return;
  }

  let { currentUserProfile, allPeople } = await initializeProfilePage(messageDiv, true); // true pour peupler tous les champs
  
  if (!currentUserProfile) return; 

  document.querySelectorAll('.remove-relation-btn[data-relation-type="fid"], .remove-relation-btn[data-relation-type="mid"]').forEach(btn => {
      btn.onclick = () => {
          const type = btn.dataset.relationType;
          if (type === 'fid') document.getElementById('profile-fid').value = "";
          else if (type === 'mid') document.getElementById('profile-mid').value = "";
          messageDiv.textContent = "Parent retiré. Sauvegardez le profil pour appliquer."; messageDiv.style.color = 'orange';
          setTimeout(() => { messageDiv.textContent = ""; }, 4000);
      };
  });

  const imgFileInput = document.getElementById('profile-imgFile');
  const imgPreview = document.getElementById('profile-image-preview');
  const imgUrlInput = document.getElementById('profile-imgUrl');

  if (imgFileInput && imgPreview) {
    imgFileInput.addEventListener('change', (event) => {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                imgPreview.src = e.target.result;
                if(imgUrlInput) imgUrlInput.value = ''; 
            }
            reader.readAsDataURL(file);
        }
    });
  }
  if (imgUrlInput && imgPreview) {
    imgUrlInput.addEventListener('input', (event) => {
        const url = event.target.value;
        if (url && url.startsWith('http')) { // Basic check for URL
            imgPreview.src = url; 
            if (imgFileInput) imgFileInput.value = ''; 
        } else if (!url && imgFileInput && !imgFileInput.files[0] && currentUserProfile) { 
            imgPreview.src = currentUserProfile.img || '/assets/avatars/default.svg'; 
        }
    });
  }

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    if (!currentUserProfile) {
        messageDiv.textContent = "Profil non chargé. Impossible de sauvegarder."; messageDiv.style.color = 'red';
        return;
    }
    messageDiv.textContent = "Mise à jour..."; messageDiv.style.color = '#4a5568';
    
    const name = document.getElementById('profile-name').value;
    const birthYearRaw = document.getElementById('profile-birthYear').value;
    const birthYear = birthYearRaw ? parseInt(birthYearRaw, 10) : null;
    const deathYearRaw = document.getElementById('profile-deathYear').value;
    const deathYear = deathYearRaw ? parseInt(deathYearRaw, 10) : null;
    const gmail = document.getElementById('profile-gmail').value;
    const gender = document.getElementById('profile-gender').value;
    const fid = document.getElementById('profile-fid').value || null;
    const mid = document.getElementById('profile-mid').value || null;

    const conjointSelects = document.querySelectorAll('.family-conjoint-select');
    const pids = Array.from(conjointSelects).map(s => s.value).filter(v => v);

    let imgData = currentUserProfile.img || '/assets/avatars/default.svg'; 
    const currentImgFile = imgFileInput ? imgFileInput.files[0] : null;
    const currentImgUrl = imgUrlInput ? imgUrlInput.value : '';

    if (currentImgFile && currentImgFile.size > 0) {
      imgData = await toBase64(currentImgFile);
    } else if (currentImgUrl && currentImgUrl.trim() !== '' && currentImgUrl.startsWith('http')) {
      imgData = currentImgUrl.trim();
    }


    if (fid && mid && fid === mid) {
        messageDiv.textContent = "Le père et la mère ne peuvent pas être la même personne.";
        messageDiv.style.color = 'red';
        setTimeout(() => { messageDiv.textContent = ""; }, 5000);
        return;
    }
    if (pids.includes(fid) || pids.includes(mid)) {
        messageDiv.textContent = "Un conjoint ne peut pas être également un parent direct.";
        messageDiv.style.color = 'red';
        setTimeout(() => { messageDiv.textContent = ""; }, 5000);
        return;
    }


    const updatedProfileData = {
      ...currentUserProfile, 
      name,
      birthYear: birthYear === null ? undefined : birthYear,
      deathYear: deathYear === null ? undefined : deathYear,
      gmail, gender, img: imgData,
      fid, mid,
      pids: Array.from(new Set(pids)), // Assurer l'unicité des PIDs
    };

    try {
      const savedProfile = await authService.updateCurrentUserProfileInFamilyTree(updatedProfileData);
      
      // Recharger toutes les données et repeupler le formulaire
      const refreshed = await initializeProfilePage(messageDiv, true); // true pour tout repeupler
      currentUserProfile = refreshed.currentUserProfile; // Mettre à jour la variable locale
      allPeople = refreshed.allPeople;

      messageDiv.textContent = 'Profil mis à jour avec succès !';
      messageDiv.style.color = 'green';
      
      const navbarUserImg = document.querySelector('#navbar .user-avatar');
      const navbarUserName = document.querySelector('#navbar .user-info span');
      if (navbarUserImg && savedProfile) navbarUserImg.src = savedProfile.img || '/assets/avatars/default.svg';
      if (navbarUserName && savedProfile) navbarUserName.textContent = savedProfile.name || 'Mon Profil';

      setTimeout(() => { messageDiv.textContent = ""; }, 3000);
    } catch (error) {
      console.error("Profile update failed:", error);
      messageDiv.textContent = error.response?.data?.message || error.message || 'Erreur lors de la mise à jour.';
      messageDiv.style.color = 'red';
      setTimeout(() => { messageDiv.textContent = ""; }, 5000);
    }
  });

  const logoutButton = document.getElementById('logout-button');
  if (logoutButton) {
    logoutButton.addEventListener('click', () => {
      authService.logout();
      window.location.href = '/login'; 
    });
  }

  const deleteAccountButton = document.getElementById('delete-account-button');
  if (deleteAccountButton) {
    deleteAccountButton.addEventListener('click', async () => {
        if (confirm("Êtes-vous sûr de vouloir supprimer votre compte ? Cette action est irréversible.")) {
            if (confirm("Confirmation finale : Supprimer définitivement le compte ?")) {
                messageDiv.textContent = "Suppression du compte..."; messageDiv.style.color = 'orange';
                try {
                    await authService.deleteAccount(); // Appelle le backend
                    authService.logout(); // Nettoie côté client
                    messageDiv.textContent = "Compte supprimé. Redirection..."; messageDiv.style.color = 'green';
                    setTimeout(() => { window.location.href = '/login'; }, 2000);
                } catch (error) { 
                    messageDiv.textContent = `Erreur suppression: ${error.response?.data?.message || error.message}`; 
                    messageDiv.style.color = 'red';
                }
            }
        }
    });
  }
}

function toBase64(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result); 
    reader.onerror = (error) => reject(error);
  });
}// END OF FILE: src/components/profile.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/components/register.js

// frontend/src/components/register.js
import { authService } from '../services/authService';

export function renderRegisterPage() {
  return `
    <div class="container-card" style="max-width: 500px; margin: 40px auto;">
      <h2>Inscription</h2>
      <form id="register-form">
        <label for="firstName">Prénom :</label>
        <input type="text" id="firstName" name="firstName" required />

        <label for="lastName">Nom :</label>
        <input type="text" id="lastName" name="lastName" required />
        
        <label for="email">Email :</label>
        <input type="email" id="email" name="email" required />

        <label for="password">Mot de passe :</label>
        <input type="password" id="password" name="password" required minlength="6" />

        <label for="confirmPassword">Confirmer le mot de passe :</label>
        <input type="password" id="confirmPassword" name="confirmPassword" required />

        <button type="submit">S'inscrire</button>
        <p style="text-align: center; margin-top: 15px;">
          Déjà un compte ? <a href="/login" data-link>Se connecter</a>
        </p>
      </form>
      <div id="register-error" style="color: red; margin-top: 10px;"></div>
    </div>
  `;
}

export function setupRegisterFormHandler() {
  const form = document.getElementById('register-form');
  const errorDiv = document.getElementById('register-error');
  if (!form) return;

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    errorDiv.textContent = '';
    const formData = new FormData(e.target);
    const firstName = formData.get('firstName');
    const lastName = formData.get('lastName');
    const email = formData.get('email');
    const password = formData.get('password');
    const confirmPassword = formData.get('confirmPassword');

    if (password !== confirmPassword) {
      errorDiv.textContent = "Les mots de passe ne correspondent pas.";
      return;
    }

    try {
      await authService.register({ email, password, firstName, lastName });
      // authService.register gère la création du profil dans l'arbre.
      window.location.href = '/'; // Ou /profile pour compléter les infos
    } catch (error) {
      console.error("Registration failed:", error);
      errorDiv.textContent = error.response?.data?.message || "Échec de l'inscription.";
    }
  });
}// END OF FILE: src/components/register.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/components/rightsidebar.js

// frontend/src/components/rightsidebar.js
import { uiStateService } from '../services/uiStateService';

export function renderRightSidebar() {
  const algorithmSteps = uiStateService.getAlgorithmSteps();

  let stepsHtml = '';
  if (algorithmSteps.length > 0) {
    stepsHtml = algorithmSteps.map((step, index) =>
      `<li>${index + 1}. ${step}</li>`
    ).join('');
  } else {
    stepsHtml = '<li>Aucune étape d\'algorithme à afficher. Sélectionnez un algorithme et des nœuds.</li>';
  }

  return `
    <div id="right-sidebar">
      <h3 class="sidebar-title">Processus d'Algorithme</h3>
      <ul class="process-steps" style="padding-left: 20px;">
        ${stepsHtml}
      </ul>
    </div>
  `;
}// END OF FILE: src/components/rightsidebar.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/counter.ts

export function setupCounter(element: HTMLButtonElement) {
    let counter = 0
    const setCounter = (count: number) => {
      counter = count
      element.innerHTML = `count is ${counter}`
    }
    element.addEventListener('click', () => setCounter(counter + 1))
    setCounter(0)
  }// END OF FILE: src/counter.ts

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/css/auth.css

// END OF FILE: src/css/auth.css

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/css/family-tree.css

// END OF FILE: src/css/family-tree.css

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/css/style.css

/* Réinitialisation et styles globaux */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
    color: #2d3748;
    height: 100vh;
    overflow: hidden;
    font-size: 16px;
    line-height: 1.6;
}

/* Structure principale */
#app {
    display: grid;
    grid-template-areas:
      "navbar navbar navbar"
      "left-sidebar main-content right-sidebar";
    grid-template-columns: 280px 1fr 280px;
    grid-template-rows: 70px 1fr;
    height: 100vh;
}

/* Navigation bar */
#navbar {
    grid-area: navbar;
    background: linear-gradient(90deg, #1a365d 0%, #2d5a88 100%);
    color: white;
    display: flex;
    align-items: center;
    padding: 0 25px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    z-index: 100;
}

#navbar h1 {
    font-size: 1.8rem;
    font-weight: 600;
    letter-spacing: 0.5px;
}

#navbar-menu {
    display: flex;
    margin-left: auto;
    gap: 8px;
}

#navbar-menu a {
    color: white;
    text-decoration: none;
    padding: 10px 18px;
    font-size: 1rem;
    border-radius: 8px;
    transition: all 0.3s ease;
}

#navbar-menu a:hover {
    background-color: rgba(255, 255, 255, 0.15);
    transform: translateY(-2px);
}

/* Sidebars */
#left-sidebar {
    grid-area: left-sidebar;
    background: linear-gradient(180deg, #1e293b 0%, #0f172a 100%);
    color: #ffffff;
    padding: 25px 20px;
    overflow-y: auto;
    box-shadow: 2px 0 12px rgba(0, 0, 0, 0.1);
}

#right-sidebar {
    grid-area: right-sidebar;
    background: linear-gradient(180deg, #ffffff 0%, #f8fafc 100%);
    padding: 25px 20px;
    overflow-y: auto;
    box-shadow: -4px 0 12px rgba(0, 0, 0, 0.05);
    border-left: 1px solid rgba(0, 0, 0, 0.05);
}

/* Contenu principal */
#main-content {
    grid-area: main-content;
    padding: 30px;
    display: flex;
    flex-direction: column;
    gap: 30px;
    overflow: hidden; /* Évitez les scrollbars */
    height: calc(100vh - 70px); /* Ajustez la hauteur pour éviter l'espace en bas */
}

#main-content h2 {
    font-size: 1.8rem;
    color: #1a365d;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 3px solid #e2e8f0;
    position: relative;
}

#main-content h2::after {
    content: '';
    position: absolute;
    bottom: -3px;
    left: 0;
    width: 80px;
    height: 3px;
    background: linear-gradient(90deg, #3182ce 0%, #63b3ed 100%);
}

/* Conteneurs pour l'arbre généalogique et le graphe */
.container-card {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    border-radius: 16px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.05);
    padding: 25px;
    margin-bottom: 25px;
    border: 1px solid rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    flex: 1; /* Ajoutez cette ligne pour permettre au conteneur de s'étendre */
    max-height: calc(100vh - 150px); /* Ajustez la hauteur maximale */
    overflow-y: auto; /* Permettre le défilement vertical */
}

.container-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
}

#family-tree-container,
#graph-container {
    height: calc(100% - 50px); /* Ajustez la hauteur pour éviter les scrollbars */
    overflow: hidden; /* Évitez les scrollbars */
    border-radius: 12px;
    background-color: #f9fafb;
    border: 1px solid #e2e8f0;
    padding: 15px;
    transition: all 0.3s ease;
}

#family-tree-container:hover,
#graph-container:hover {
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
}

/* Sidebar menu */
.sidebar-title {
    font-size: 1.3rem;
    font-weight: 600;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 2px solid rgba(0, 0, 0, 0.1);
    letter-spacing: 0.5px;
    color: #fbfbfb; /* Change text color to black */
}

.sidebar-menu {
    list-style: none;
}

.sidebar-menu li {
    margin-bottom: 15px;
}

.sidebar-menu a {
    color: #000; /* Change text color to black */
    text-decoration: none;
    display: block;
    padding: 12px 15px;
    border-radius: 10px;
    transition: all 0.3s ease;
    font-weight: 500;
}

.sidebar-menu a:hover {
    background: linear-gradient(90deg, #3182ce 0%, #4299e1 100%);
    color: white;
    transform: translateX(5px);
    box-shadow: 0 4px 12px rgba(66, 153, 225, 0.3);
}

/* Right sidebar specific */
#right-sidebar .sidebar-title {
    color: #1a365d;
    border-bottom: 2px solid #e2e8f0;
}

#right-sidebar .info-card {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    border-radius: 12px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease;
}

#right-sidebar .info-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
}

/* Process steps */
.process-steps {
    list-style: none;
    padding: 0;
}

.process-steps li {
    margin-bottom: 10px;
    font-size: 1rem;
    color: #2d3748;
}

/* Responsive design */
@media (max-width: 1200px) {
    #app {
        grid-template-columns: 240px 1fr 240px;
    }
}

@media (max-width: 900px) {
    #app {
        grid-template-areas:
          "navbar navbar navbar"
          "left-sidebar main-content main-content";
        grid-template-columns: 280px 1fr;
    }

    #right-sidebar {
        display: none;
    }
}

@media (max-width: 650px) {
    #app {
        grid-template-areas:
          "navbar navbar"
          "main-content main-content";
        grid-template-columns: 1fr;
    }

    #left-sidebar {
        display: none;
    }

    #navbar {
        padding: 0 20px;
    }
}

/* Formulaires */
form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    max-width: 600px;
    margin: 0 auto;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(0, 0, 0, 0.05);
}

/* Styles spécifiques pour le formulaire de profil */
#profile-form {
    max-width: 100%; /* Déjà défini */
    padding: 0; /* Le padding est maintenant sur .profile-card */
    box-shadow: none; /* L'ombre est sur .profile-card */
    border: none;
    display: flex; /* Remplacer grid par flex pour une meilleure organisation en colonnes */
    flex-direction: column;
    gap: 25px; /* Espacement entre les sections du formulaire */
}

.profile-section-title {
    margin: 0 0 20px;
    color: #2d3748;
    font-size: 22px; /* Taille ajustée */
    font-weight: 600;
    border-bottom: 1px solid #dee2e6;
    padding-bottom: 10px;
}

.profile-form-field {
    display: flex;
    flex-direction: column;
    gap: 6px; /* Espacement entre label et input */
}

.profile-form-field label {
    font-weight: 500; /* Poids ajusté */
    color: #495057; /* Couleur de label */
    font-size: 0.95rem;
}

.profile-info-grid, .profile-parent-fields {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); /* Responsive */
    gap: 20px;
    margin-bottom: 20px; /* Espacement après la grille */
}

#profile-form img {
    grid-column: 1;
    width: 150px;
    height: 150px;
    object-fit: cover;
    border-radius: 50%;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    border: 3px solid #4299e1;
    margin-bottom: 20px;
}

#profile-form label {
    font-weight: 600;
    color: #2d3748;
    margin-bottom: 5px;
}

#profile-form input, 
#profile-form select {
    width: 100%;
    padding: 12px;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
    background-color: #f8fafc;
    font-size: 0.95rem;
}

/* Style spécifique pour le sélecteur de conjoints */
#profile-pids {
    height: auto;
    min-height: 45px;
    max-height: 45px;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    appearance: menulist;
    -webkit-appearance: menulist;
    -moz-appearance: menulist;
    background-image: url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23718096' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 10px center;
}

#profile-form button[type="submit"] {
    grid-column: 1 / -1;
    margin-top: 15px;
    background: linear-gradient(90deg, #3182ce 0%, #4299e1 100%);
    font-weight: 600;
    padding: 12px 20px;
    border-radius: 8px;
    transition: all 0.3s ease;
    box-shadow: 0 4px 6px rgba(66, 153, 225, 0.25);
}

form label {
    font-weight: 600;
    color: #000; /* Change text color to black */
    font-size: 1.05rem;
    margin-bottom: 5px;
    display: block;
}

form input,
form select {
    padding: 12px;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
    background-color: #f8fafc;
    font-size: 1rem;
    transition: all 0.3s ease;
}

form input:focus,
form select:focus {
    outline: none;
    border-color: #4299e1;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.25);
}

form button {
    padding: 12px 20px;
    border-radius: 10px;
    background: linear-gradient(90deg, #2b6cb0 0%, #3182ce 100%);
    color: white;
    border: none;
    cursor: pointer;
    font-size: 1.05rem;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 4px 10px rgba(49, 130, 206, 0.3);
}

form button:hover {
    background: linear-gradient(90deg, #1a4a8c 0%, #2b6cb0 100%);
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(49, 130, 206, 0.4);
}

/* Informations utilisateur */
.user-info {
    display: flex;
    align-items: center;
    gap: 12px;
    text-decoration: none;
    color: inherit;
    padding: 10px;
    border-radius: 10px;
    transition: all 0.3s ease;
}

.user-info:hover {
    background-color: rgba(226, 232, 240, 0.5);
}

.user-avatar {
    width: 45px;
    height: 45px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #4299e1;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
}

.user-info:hover .user-avatar {
    transform: scale(1.1);
    border-color: #3182ce;
}

/* Ajoutez ces styles pour les boutons de vue */
.view-buttons {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-bottom: 20px;
}

.view-button {
    padding: 10px 20px;
    border: none;
    border-radius: 8px;
    background-color: #4299e1;
    color: white;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.view-button:hover {
    background-color: #3182ce;
}

/* Styles pour le bouton de déconnexion */
.profile-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 2px solid #e2e8f0;
}

.profile-header h2 {
    margin: 0;
    font-size: 1.8rem;
    color: #2d3748;
    font-weight: 600;
}

.logout-button {
    padding: 10px 20px;
    border-radius: 8px;
    background: linear-gradient(90deg, #e74c3c 0%, #c0392b 100%);
    color: white;
    border: none;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 4px 10px rgba(231, 76, 60, 0.3);
}

.logout-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(231, 76, 60, 0.4);
}

/* Styles pour les boutons dans la sidebar */
.sidebar-button {
    padding: 10px 20px;
    border: none;
    border-radius: 8px;
    background-color: #4299e1;
    color: white;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 10px;
}

.sidebar-button:hover {
    background-color: #3182ce;
}

/* Styles pour les formulaires dans la sidebar */
.sidebar-form {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-top: 20px;
}

.sidebar-form label {
    font-weight: 600;
    color: #000; /* Change text color to black */
    font-size: 1rem;
    margin-bottom: 5px;
}

.sidebar-form select {
    padding: 10px;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
    background-color: #ffffff;
    color: #000; /* Change text color to black */
    font-size: 1rem;
    transition: all 0.3s ease;
}

.sidebar-form select:focus {
    outline: none;
    border-color: #4299e1;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.25);
}

.sidebar-form button {
    padding: 10px 20px;
    border-radius: 8px;
    background-color: #4299e1;
    color: white;
    border: none;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 4px 10px rgba(49, 130, 206, 0.3);
    margin-top: 20px;
}

.sidebar-form button:hover {
    background-color: #3182ce;
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(49, 130, 206, 0.4);
}

/* Style for the "Ajouter un enfant" form container */
#add-child-form, #add-spouse-form, #add-father-form, #add-mother-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    padding: 20px;
    border-radius: 15px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */
    background-color: #ffffff; /* White background */
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    margin-top: 10px;
    animation: slideDown 0.3s ease-out forwards;
}

/* Style for the title within the form */
#add-child-form .sidebar-title {
    font-size: 1.3rem;
    font-weight: 600;
    color: #333333; /* Dark text color */
    margin-bottom: 15px;
    border-bottom: 2px solid #e2e8f0; /* Light border */
    padding-bottom: 10px;
}

/* Style for labels within the form */
#add-child-form label {
    font-weight: 500;
    color: #333333; /* Dark text color */
    font-size: 1rem;
    margin-bottom: 5px;
}

/* Style for input fields within the form */
#add-child-form input[type="number"],
#add-child-form button {
    padding: 12px;
    border-radius: 10px;
    border: 1px solid #e2e8f0;
    background-color: #f8fafc;
    font-size: 1rem;
    transition: all 0.3s ease;
}

/* Style for input fields on focus */
#add-child-form input[type="number"]:focus {
    outline: none;
    border-color: #4299e1;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.25);
}

/* Style for buttons within the form */
#add-child-form button {
    background-color: #4299e1;
    color: white;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    transition: background-color 0.3s ease, transform 0.3s ease;
}

/* Style for buttons on hover */
#add-child-form button:hover {
    background-color: #3182ce;
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(49, 130, 206, 0.4);
}

/* Style for the child menus container */
#child-menus {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-top: 10px;
}

/* Style for individual child menu items */
.child-menu {
    display: flex;
    flex-direction: column;
    gap: 5px;
    padding: 15px;
    border-radius: 10px;
    border: 1px solid #e2e8f0;
    background-color: #ffffff;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

/* Style for child menu labels */
.child-menu label {
    font-weight: 500;
    color: #333333; /* Dark text color */
    font-size: 1rem;
    margin-bottom: 5px;
}

/* Style for child menu select fields */
.child-menu select {
    padding: 10px;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
    background-color: #ffffff;
    color: #333333; /* Dark text color */
    font-size: 1rem;
    transition: all 0.3s ease;
}

/* Style for child menu select fields on focus */
.child-menu select:focus {
    outline: none;
    border-color: #4299e1;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.25);
}

/* Styles for the formulaires de recherche */
.search-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-top: 20px;
    padding: 20px;
    background-color: rgba(255, 255, 255, 0.1); /* Fond légèrement translucide */
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); /* Ombre pour un effet de profondeur */
    transition: all 0.3s ease;
}

/* Style pour les formulaires de recherche dans les relations familiales */
.family-selection-menu .search-form {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.08);
    margin-top: 10px;
    border: 1px solid #e2e8f0;
}

/* Style for .sidebar-title within .search-form in the left sidebar */
#left-sidebar .search-form .sidebar-title {
    font-size: 1.2rem;
    font-weight: 600;
    color: #ffffff; /* White text color for left sidebar */
    margin-bottom: 15px;
    border-bottom: 2px solid rgba(255, 255, 255, 0.2); /* White border for left sidebar */
}

/* Style for .sidebar-title within .search-form in the profile */
#main-content .search-form .sidebar-title {
    font-size: 1.2rem;
    font-weight: 600;
    color: #000000; /* Black text color for profile */
    margin-bottom: 15px;
    border-bottom: 2px solid rgba(0, 0, 0, 0.2); /* Black border for profile */
}

/* Style for .search-form label within the left sidebar */
#left-sidebar .search-form label {
    font-weight: 500;
    color: #ffffff; /* White text color for left sidebar */
    font-size: 1rem;
    margin-bottom: 5px;
}

/* Style for .search-form label within the profile section */
#main-content .search-form label {
    font-weight: 500;
    color: #000000; /* Black text color for profile */
    font-size: 1rem;
    margin-bottom: 5px;
}

.search-form select {
    padding: 10px;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
    background-color: #ffffff;
    color: #000; /* Change text color to black */
    font-size: 1rem;
    transition: all 0.3s ease;
}

.search-form select:focus {
    outline: none;
    border-color: #4299e1;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.25);
}

.search-form button {
    padding: 10px 20px;
    border-radius: 8px;
    background-color: #4299e1;
    color: white;
    border: none;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 4px 10px rgba(49, 130, 206, 0.3);
    margin-top: 20px;
}

.search-form button:hover {
    background-color: #3182ce;
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(49, 130, 206, 0.4);
}

/* Highlighted classes for different algorithms */
.highlighted-dijkstra {
    background-color: red !important;
    line-color: red !important;
    target-arrow-color: red !important;
    transition: background-color 1s ease, line-color 1s ease, target-arrow-color 1s ease;
}

.highlighted-bellman-ford {
    background-color: blue !important;
    line-color: blue !important;
    target-arrow-color: blue !important;
    transition: background-color 1s ease, line-color 1s ease, target-arrow-color 1s ease;
}

.highlighted-prim {
    background-color: green !important;
    line-color: green !important;
    target-arrow-color: green !important;
    transition: background-color 1s ease, line-color 1s ease, target-arrow-color 1s ease;
}

.highlighted-kruskal {
    background-color: purple !important;
    line-color: purple !important;
    target-arrow-color: purple !important;
    transition: background-color 1s ease, line-color 1s ease, target-arrow-color 1s ease;
}

/* Styles for view and scope controls */
.view-controls {
    display: flex;
    justify-content: space-between; /* Aligns view buttons to left, scope to right */
    align-items: center;
    margin-bottom: 20px;
    flex-wrap: wrap; /* Allows wrapping on smaller screens */
    gap: 15px; /* Space between button groups if they wrap */
}

.view-buttons, .scope-buttons {
    display: flex;
    gap: 10px;
}

.view-button, .scope-button {
    padding: 10px 20px;
    border: 1px solid #3182ce; /* Default border */
    border-radius: 8px;
    background-color: #f0f4f8; /* Default background */
    color: #3182ce; /* Default text color */
    cursor: pointer;
    transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
    font-weight: 500;
}

.view-button:hover, .scope-button:hover {
    background-color: #e0e8f0;
    border-color: #2b6cb0;
}

/* Style for the active button */
.view-button.active-view-btn, .scope-button.active-scope-btn {
    background-color: #4299e1;
    color: white;
    border-color: #4299e1;
}

/* Adjust main content area name if you changed it in maincontent.js */
#main-content-area { /* Or whatever ID you used for the main content wrapper */
    grid-area: main-content;
    padding: 30px;
    display: flex;
    flex-direction: column;
    gap: 20px; /* Reduced gap slightly */
    overflow: hidden;
    height: calc(100vh - 70px);
}

/* Ensure container-card within the new #main-content-area still behaves well */
#main-content-area .container-card {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    border-radius: 16px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.05);
    padding: 25px;
    /* margin-bottom: 25px; Remove if gap from flex parent is enough */
    border: 1px solid rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    flex: 1; 
    max-height: calc(100vh - 190px); /* Adjusted max-height based on new controls */
    overflow-y: auto; 
}

/* Style principal pour la page de connexion */
.login-container {
    grid-area: main-content;
    display: flex;
    justify-content: center;
    align-items: center;
    height: calc(100vh - 70px);
    width: 100%;
    overflow: auto;
    padding: 30px;
}

/* Style principal pour la page de profil */
.profile-container {
    grid-area: main-content;
    padding: 30px;
    display: flex;
    flex-direction: column;
    height: calc(100vh - 70px);
    overflow: auto;
}

/* Styles pour les relations familiales */
.family-relations {
    margin-top: 30px;
    padding-top: 20px;
    border-top: 2px solid #e2e8f0;
    animation: fadeIn 0.6s ease-out forwards;
}

.family-relations h3 {
    margin-bottom: 20px;
    font-size: 1.5rem;
    color: #2d3748;
    font-weight: 600;
}

.scrollable-container {
    max-height: 500px;
    overflow-y: auto;
    padding-right: 10px;
}

.family-selection-menus {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.family-selection-menu {
    background-color: #f8fafc;
    border-radius: 12px;
    padding: 15px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 1px solid #e2e8f0;
    position: relative;
}

.family-selection-menu:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
    border-color: #cbd5e0;
}

.family-selection-menu .sidebar-button {
    width: 100%;
    text-align: left;
    padding: 12px 15px;
    font-weight: 500;
    position: relative;
    overflow: hidden;
    z-index: 1;
    margin-top: 0;
}

.family-selection-menu .sidebar-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: 100%;
    background-color: rgba(66, 153, 225, 0.2);
    transition: width 0.3s ease;
    z-index: -1;
}

.family-selection-menu .sidebar-button:hover::before {
    width: 100%;
}

.profile-page-container {
    background-color: #f0f4f8; /* Un fond doux pour toute la page de profil */
    min-height: calc(100vh - 70px); /* Hauteur de la navbar */
    padding: 30px;
    display: flex; /* Pour centrer le contenu principal */
    justify-content: center;
    align-items: flex-start; /* Aligner en haut si le contenu est plus petit */
}

.profile-card {
    background-color: white;
    border-radius: 12px; /* Coins arrondis */
    box-shadow: 0 8px 25px rgba(0,0,0,0.08); /* Ombre plus douce */
    padding: 30px 40px; /* Espacement interne */
}


.profile-header-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 30px;
    text-align: center;
    padding-bottom: 20px;
    border-bottom: 1px solid #e9ecef;
}

.profile-image-container {
    position: relative;
    width: 150px; /* Taille ajustée */
    height: 150px;
    margin-bottom: 15px;
}

.profile-image-upload-trigger {
    position: absolute;
    bottom: 0px; /* Ajusté */
    right: 0px;  /* Ajusté */
    background-color: #4299e1;
    border-radius: 50%;
    width: 36px; /* Ajusté */
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    box-shadow: 0 3px 8px rgba(0,0,0,0.15);
    border: 2px solid white;
}

.profile-image-upload-trigger:hover {
    background-color: #3182ce;
}

.profile-name-header {
    margin: 0;
    font-size: 26px; /* Taille ajustée */
    color: #343a40; /* Couleur plus foncée */
    font-weight: 600;
}

.profile-image-preview {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    object-fit: cover;
    border: 3px solid #4299e1; /* Bordure colorée */
    box-shadow: 0 6px 15px rgba(0,0,0,0.1); /* Ombre pour l'image */
}

.profile-main-title {
    color: #2d3748;
    font-size: 32px; /* Taille ajustée */
    margin-bottom: 25px;
    padding-bottom: 15px;
    border-bottom: 2px solid #e2e8f0; /* Bordure plus subtile */
    font-weight: 600; /* Poids ajusté */
}


.profile-content-wrapper {
    max-width: 1000px; /* Largeur maximale pour le contenu du profil */
    width: 100%;
    margin: 0 auto;
}

/* Style pour l'affichage des sections familiales dans le panneau de droite */
.family-section {
    margin-top: 15px;
    padding: 15px;
    background-color: #f8fafc;
    border-radius: 8px;
    border-left: 4px solid #4299e1;
}

.family-section h5 {
    margin: 0 0 10px 0;
    font-size: 1.1rem;
    color: #2d3748;
    font-weight: 600;
}

.family-section p {
    margin: 5px 0;
    color: #4a5568;
}

/* Animations */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

@keyframes slideDown {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Améliorations des interactions utilisateur */
.child-menu {
    background-color: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    padding: 12px 15px;
    margin-bottom: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
}

.child-menu:hover {
    border-color: #4299e1;
    box-shadow: 0 4px 8px rgba(66, 153, 225, 0.15);
}

#profile-form button[type="submit"]:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(49, 130, 206, 0.3);
    background: linear-gradient(90deg, #2b6cb0 0%, #3182ce 100%);
}



#profile-form input[type="text"],
#profile-form input[type="email"],
#profile-form input[type="number"],
#profile-form select {
    width: 100%;
    padding: 10px 12px; /* Padding ajusté */
    border-radius: 6px; /* Coins plus doux */
    border: 1px solid #ced4da; /* Bordure standard */
    background-color: #f8f9fa; /* Fond légèrement grisé */
    font-size: 0.95rem;
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
}

#profile-form input:focus, 
#profile-form select:focus {
    border-color: #4299e1;
    box-shadow: 0 0 0 0.2rem rgba(66, 153, 225, 0.25);
    outline: none;
}

.relation-select-wrapper {
    display: flex;
    align-items: center;
    gap: 8px;
}
.relation-select-wrapper select {
    flex-grow: 1;
}

.profile-relations-section, .profile-family-management-section {
    border-top: 1px solid #e9ecef;
    padding-top: 25px;
    margin-top: 25px;
}

.profile-section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

#family-sections-container {
    display: flex;
    flex-direction: column;
    gap: 25px; /* Espacement entre les sections famille */
}

.family-section-item {
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 20px;
    background-color: #f9f9f9; /* Fond légèrement différent pour les sections */
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}
.family-section-item-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid #e0e0e0;
}
.family-section-item-title {
    color: #343a40;
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0;
}

.family-children-subsection {
    background-color: white;
    padding: 15px;
    border-radius: 6px;
    margin-top: 15px;
    box-shadow: inset 0 1px 3px rgba(0,0,0,0.04);
}
.children-subsection-title {
    color: #495057;
    font-size: 1rem;
    font-weight: 600;
    margin-top: 0;
    margin-bottom: 10px;
}
.children-items-list {
    list-style-type: none;
    padding-left: 0;
    margin: 0 0 15px 0;
}
.child-item-entry {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 10px;
    border-radius: 4px;
    margin-bottom: 6px;
    background-color: #f1f3f5;
    font-size: 0.9rem;
}
.child-item-info {
    display: flex;
    flex-direction: column;
}
.child-item-name {
    font-weight: 500;
    color: #212529;
}
.child-item-year {
    font-size: 0.8rem;
    color: #6c757d;
}
.no-children-notice {
    font-style: italic;
    color: #6c757d;
    padding: 10px;
    text-align: center;
    background-color: #f8f9fa;
    border-radius: 4px;
}

.add-child-controls {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 10px;
}
.add-child-controls select {
    flex-grow: 1;
}


.profile-actions-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 30px;
    padding-top: 25px;
    border-top: 1px solid #e9ecef;
}
.account-actions {
    display: flex;
    gap: 10px;
}

.profile-action-btn {
    padding: 10px 18px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
    font-size: 0.95rem;
    transition: background-color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}
.profile-action-btn:hover {
    transform: translateY(-1px);
}
.primary-btn {
    background-color: #007bff;
    color: white;
}
.primary-btn:hover {
    background-color: #0069d9;
    box-shadow: 0 4px 10px rgba(0, 123, 255, 0.25);
}
.primary-btn.submit-btn {
    padding: 12px 28px; /* Plus grand pour le bouton principal */
    font-size: 1rem;
}
.positive-btn {
    background-color: #28a745;
    color: white;
}
.positive-btn:hover {
    background-color: #218838;
    box-shadow: 0 4px 10px rgba(40, 167, 69, 0.25);
}
.danger-btn {
    background-color: #dc3545;
    color: white;
}
.danger-btn:hover {
    background-color: #c82333;
    box-shadow: 0 4px 10px rgba(220, 53, 69, 0.25);
}
.outline-danger-btn {
    background-color: transparent;
    color: #dc3545;
    border: 1px solid #dc3545;
}
.outline-danger-btn:hover {
    background-color: #dc3545;
    color: white;
    box-shadow: 0 4px 10px rgba(220, 53, 69, 0.15);
}

.small-btn {
    padding: 6px 10px;
    font-size: 0.85rem;
}
.remove-relation-btn.small-btn {
    background-color: transparent;
    color: #c53030;
    border: 1px solid #e5a0a0;
    opacity: 0.8;
}
.remove-relation-btn.small-btn:hover {
    background-color: #fef2f2;
    color: #c53030;
    border-color: #c53030;
    opacity: 1;
}
.danger-transparent-btn { /* Pour le bouton de suppression d'enfant dans la liste */
    background: none;
    border: 1px solid #e2e8f0;
    border-radius: 4px;
    color: #c53030;
    cursor: pointer;
    padding: 5px 8px;
    font-size: 14px;
    opacity: 0.7;
    transition: all 0.2s ease;
}
.danger-transparent-btn:hover {
    opacity: 1;
    background-color: #FEF2F2;
    border-color: #f5c6cb;
}


.profile-message-area {
    margin: 20px auto 0;
    padding: 12px 18px; /* Padding ajusté */
    border-radius: 6px;
    font-size: 0.95rem; /* Taille ajustée */
    font-weight: 500;
    text-align: center;
    max-width: 100%; /* S'adapte à la largeur du conteneur */
}
/* Pour les couleurs de fond dynamiques, elles sont définies en JS */


/* Styles pour le right-sidebar info-card (détails personne) */
#right-sidebar .info-card {
    background: linear-gradient(135deg, #ffffff 0%, #fdfdff 100%); /* Fond plus clair */
    border-radius: 12px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.06); /* Ombre ajustée */
    border: 1px solid #e9ecef; /* Bordure subtile */
    transition: transform 0.3s ease;
    font-size: 0.9rem; /* Taille de police de base pour la carte */
}
#right-sidebar .info-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 22px rgba(0, 0, 0, 0.08);
}
#right-sidebar .info-card h4 {
    font-size: 1.3rem;
    color: #343a40;
    margin-bottom: 15px;
    font-weight: 600;
    border-bottom: 1px solid #f1f1f1;
    padding-bottom: 8px;
}
#right-sidebar .info-card p {
    margin-bottom: 8px;
    color: #495057;
    line-height: 1.5;
}
#right-sidebar .info-card p strong {
    color: #212529;
    margin-right: 5px;
}

#right-sidebar .family-section { /* Style pour les sections Parents/Conjoints/Enfants dans la sidebar */
    margin-top: 15px;
    padding-top: 10px;
    border-top: 1px dashed #e0e0e0; /* Séparateur plus léger */
}
#right-sidebar .family-section h5 {
    margin: 0 0 8px 0;
    font-size: 1rem;
    color: #007bff; /* Couleur d'accent */
    font-weight: 600;
}

/* Styles pour FamilyTree.js (peut nécessiter !important si les templates internes sont trop spécifiques) */
/* Pour les nœuds colorés par genre, en supposant que les templates 'hugo_male', etc. sont utilisés */
/* Si les templates modifient directement le 'fill', ces CSS pourraient ne pas s'appliquer au <rect> principal */
/* On cible plus généralement au cas où. */

.bft-male .bft-node-rect, /* Si le tag ajoute une classe au groupe du nœud */
foreignObject[data- θερ*=male] rect { /* Si le tag est dans data- θερ du foreignObject */
    /* fill: #a0c8f0 !important; */ /* Bleu clair pour homme - géré par template JS */
}
.bft-female .bft-node-rect,
foreignObject[data- θερ*=female] rect {
    /* fill: #f0a0d8 !important; */ /* Rose clair pour femme - géré par template JS */
}
.bft-unknown .bft-node-rect,
foreignObject[data- θερ*=unknown] rect {
    /* fill: #d3d3d3 !important; */ /* Gris pour inconnu - géré par template JS */
}

/* Style pour le nœud de l'utilisateur courant (si tag 'currentUser' est appliqué) */
.bft-currentuser .bft-node-rect, /* Cible le rectangle du nœud */
foreignObject[data- θερ*=currentUser] rect {
    stroke: #ffbf00 !important; /* Bordure dorée pour l'utilisateur actuel */
    stroke-width: 3px !important;
}
.bft-currentuser text { /* Cible le texte du nœud */
    font-weight: bold !important;
    fill: #0056b3 !important; /* Couleur de texte différente */
}


/* Message d'erreur pour algorithmes dans leftsidebar */
#algorithm-error-message {
    color: #721c24; /* Texte rouge foncé */
    background-color: #f8d7da; /* Fond rose clair */
    border: 1px solid #f5c6cb; /* Bordure rose */
    padding: 10px 15px;
    border-radius: 5px;
    margin-bottom: 15px;
    font-size: 0.9rem;
    line-height: 1.4;
    /* display: none; par défaut, géré par JS */
}


/* Responsivité pour les menus de relations familiales */
@media (max-width: 768px) {
    .family-selection-menus {
        grid-template-columns: 1fr;
    }
    
    #profile-form {
        padding: 20px;
        grid-template-columns: 1fr;
    }
    
    #profile-form img {
        margin: 0 auto 20px auto;
    }
    
    .container-card {
        padding: 15px;
    }
}// END OF FILE: src/css/style.css

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/algorithms/bellman-ford.js

// src/js/algorithms/bellman-ford.js
import cytoscape from 'cytoscape';
import { uiStateService } from '../../services/uiStateService';

export function initBellmanFord(cy, startNode, endNode) {
  uiStateService.clearAlgorithmSteps();

  // Add initial steps one by one
  uiStateService.addAlgorithmStep("Initialisation de l'algorithme de Bellman-Ford");
  uiStateService.addAlgorithmStep(`Nœud de départ: ${startNode.data('label')}, Nœud d'arrivée: ${endNode.data('label')}`);

  // Réinitialiser les styles
  cy.edges().style({
    'line-color': '#9dbaea',
    'width': 6
  });

  // Tous les nœuds et arêtes du graphe
  const nodes = cy.nodes();
  const edges = cy.edges();

  // Maps pour suivre les distances et les parents
  const distances = new Map();
  const parent = new Map();

  // Initialisation des structures de données
  nodes.forEach(node => {
    const id = node.id();
    distances.set(id, id === startNode.id() ? 0 : Infinity);
    parent.set(id, null);
  });

  // Algorithme de Bellman-Ford
  const V = nodes.length;

  // Relaxation des arêtes V-1 fois
  for (let i = 0; i < V - 1; i++) {
    uiStateService.addAlgorithmStep(`Itération ${i + 1}/${V - 1} - Relaxation de toutes les arêtes`);

    edges.forEach(edge => {
      const source = edge.source().id();
      const target = edge.target().id();
      const weight = edge.data('weight') || 1;

      // Relaxation dans les deux sens car le graphe est non dirigé
      if (distances.get(source) !== Infinity && distances.get(source) + weight < distances.get(target)) {
        distances.set(target, distances.get(source) + weight);
        parent.set(target, source);
        uiStateService.addAlgorithmStep(`Mise à jour de la distance du nœud ${cy.getElementById(target).data('label')}: ${distances.get(source) + weight}`); // Corrected: Displaying the new distance

        edge.addClass('highlighted-bellman-ford');
        setTimeout(() => {
          edge.removeClass('highlighted-bellman-ford');
        }, 1000);
      }

      if (distances.get(target) !== Infinity && distances.get(target) + weight < distances.get(source)) {
        distances.set(source, distances.get(target) + weight);
        parent.set(source, target);
        uiStateService.addAlgorithmStep(`Mise à jour de la distance du nœud ${cy.getElementById(source).data('label')}: ${distances.get(target) + weight}`); // Corrected: Displaying the new distance
        
        edge.addClass('highlighted-bellman-ford');
        setTimeout(() => {
          edge.removeClass('highlighted-bellman-ford');
        }, 1000);
      }
    });
  }

  // Vérification des cycles négatifs
  let hasNegativeCycle = false;
  edges.forEach(edge => {
    const source = edge.source().id();
    const target = edge.target().id();
    const weight = edge.data('weight') || 1;

    if (distances.get(source) !== Infinity && distances.get(source) + weight < distances.get(target)) {
      hasNegativeCycle = true;
    }
    if (distances.get(target) !== Infinity && distances.get(target) + weight < distances.get(source)) {
      hasNegativeCycle = true;
    }
  });

  if (hasNegativeCycle) {
    console.warn("Le graphe contient un cycle de poids négatif!");
    uiStateService.addAlgorithmStep("Cycle négatif détecté dans le graphe");
  }

  // Reconstruire le chemin du nœud de départ au nœud d'arrivée
  const path = [];
  let current = endNode.id();
  while (current !== null && current !== startNode.id()) {
    const parentId = parent.get(current);
    if (parentId === null) break; 

    const edge = cy.elements().edges(`[source = "${parentId}"][target = "${current}"], [source = "${current}"][target = "${parentId}"]`);
    path.unshift(edge);
    current = parentId;
  }

  // Afficher le chemin trouvé
  if (path.length > 0) {
    path.forEach(edge => {
      edge.style({
        'line-color': 'blue', 
        'width': 5
      });
    });

    let delay = 0;
    const animationStep = 500;
    path.forEach(edge => {
      setTimeout(() => {
        edge.flashClass('highlighted-bellman-ford', 1000);
      }, delay);
      delay += animationStep;
    });

    console.log(`Algorithme de Bellman-Ford: chemin trouvé de ${startNode.data('label')} à ${endNode.data('label')} avec ${path.length} arêtes`);
    console.log(`Distance totale: ${distances.get(endNode.id())}`);
    uiStateService.addAlgorithmStep(`Chemin trouvé de ${startNode.data('label')} à ${endNode.data('label')} avec distance totale ${distances.get(endNode.id())}`);
  } else {
    console.log(`Aucun chemin trouvé de ${startNode.data('label')} à ${endNode.data('label')}`);
    uiStateService.addAlgorithmStep(`Aucun chemin trouvé de ${startNode.data('label')} à ${endNode.data('label')}`);
  }

  return path;
}// END OF FILE: src/js/algorithms/bellman-ford.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/algorithms/dijkstra.js

// src/js/algorithms/dijkstra.js
import cytoscape from 'cytoscape';
import { uiStateService } from '../../services/uiStateService';

export function initDijkstra(cy, startNode, endNode) {
  uiStateService.clearAlgorithmSteps(); // This is correct

  // Add initial steps one by one
  uiStateService.addAlgorithmStep("Initialisation de l'algorithme de Dijkstra");
  uiStateService.addAlgorithmStep(`Nœud de départ: ${startNode.data('label')}, Nœud d'arrivée: ${endNode.data('label')}`);

  // Réinitialiser les styles
  cy.edges().style({
    'line-color': '#9dbaea',
    'width': 6
  });

  // Tous les nœuds du graphe
  const nodes = cy.nodes();

  // Maps pour suivre les distances et les parents
  const visited = new Map();
  const distances = new Map();
  const parent = new Map();

  // Initialisation des structures de données
  nodes.forEach(node => {
    const id = node.id();
    distances.set(id, id === startNode.id() ? 0 : Infinity);
    parent.set(id, null);
  });

  // Algorithme de Dijkstra
  while (true) {
    // Trouver le nœud non visité avec la distance minimale
    let minDistance = Infinity;
    let minNode = null;

    nodes.forEach(node => {
      const id = node.id();
      if (!visited.has(id) && distances.get(id) < minDistance) {
        minDistance = distances.get(id);
        minNode = node;
      }
    });

    // Si aucun nœud n'est accessible ou si nous avons atteint le nœud cible
    if (minNode === null || minNode.id() === endNode.id()) break;

    // Marquer le nœud comme visité
    visited.set(minNode.id(), true);
    uiStateService.addAlgorithmStep(`Exploration du nœud ${minNode.data('label')} avec distance ${distances.get(minNode.id())}`);

    // Mettre à jour les distances des nœuds adjacents
    const neighbors = minNode.neighborhood().nodes().filter(n => !visited.has(n.id()));

    neighbors.forEach(neighbor => {
      const neighborId = neighbor.id();
      const edge = cy.elements().edges(`[source = "${minNode.id()}"][target = "${neighborId}"], [source = "${neighborId}"][target = "${minNode.id()}"]`);
      const weight = edge.data('weight') || 1;
      const distance = distances.get(minNode.id()) + weight;

      if (distance < distances.get(neighborId)) {
        distances.set(neighborId, distance);
        parent.set(neighborId, minNode.id());
        uiStateService.addAlgorithmStep(`Mise à jour de la distance du nœud ${neighbor.data('label')}: ${distances.get(neighborId)} → ${distance}`);

        edge.addClass('highlighted-dijkstra');
        setTimeout(() => {
          edge.removeClass('highlighted-dijkstra');
        }, 1000);
      }
    });
  }

  // Reconstruire le chemin du nœud de départ au nœud d'arrivée
  const path = [];
  let current = endNode.id();

  while (current !== null && current !== startNode.id()) {
    const parentId = parent.get(current);
    if (parentId === null) break;

    const edge = cy.elements().edges(`[source = "${parentId}"][target = "${current}"], [source = "${current}"][target = "${parentId}"]`);
    path.unshift(edge);
    current = parentId;
  }

  // Afficher le chemin trouvé
  if (path.length > 0) {
    path.forEach(edge => {
      edge.style({
        'line-color': 'red',
        'width': 5
      });
    });

    let delay = 0;
    const animationStep = 500;
    path.forEach(edge => {
      setTimeout(() => {
        edge.flashClass('highlighted-dijkstra', 1000);
      }, delay);
      delay += animationStep;
    });

    console.log(`Algorithme de Dijkstra: chemin trouvé de ${startNode.data('label')} à ${endNode.data('label')} avec ${path.length} arêtes`);
    console.log(`Distance totale: ${distances.get(endNode.id())}`);
    uiStateService.addAlgorithmStep(`Chemin trouvé de ${startNode.data('label')} à ${endNode.data('label')} avec distance totale ${distances.get(endNode.id())}`);
  } else {
    console.log(`Aucun chemin trouvé de ${startNode.data('label')} à ${endNode.data('label')}`);
    uiStateService.addAlgorithmStep(`Aucun chemin trouvé de ${startNode.data('label')} à ${endNode.data('label')}`);
  }
  // No longer need to set all steps at the end, as they are added incrementally.

  return path;
}// END OF FILE: src/js/algorithms/dijkstra.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/algorithms/kruskal.js

// src/js/algorithms/kruskal.js
import cytoscape from 'cytoscape';
import { uiStateService } from '../../services/uiStateService';

export function initKruskal(cy, startNode) { // startNode is passed but not used by Kruskal's core logic
  uiStateService.clearAlgorithmSteps();

  // Add initial steps
  uiStateService.addAlgorithmStep("Initialisation de l'algorithme de Kruskal");
  const edgesInGraph = cy.edges(); // Renamed to avoid conflict with edgesArray later
  uiStateService.addAlgorithmStep(`${edgesInGraph.length} arêtes à examiner`);

  // Réinitialiser les styles
  cy.edges().style({
    'line-color': '#9dbaea',
    'width': 6
  });

  // Structure pour Union-Find
  const parents = new Map();
  const ranks = new Map();

  function find(nodeId) { // Parameter is nodeId
    if (parents.get(nodeId) !== nodeId) {
      parents.set(nodeId, find(parents.get(nodeId)));
    }
    return parents.get(nodeId);
  }

  function union(xId, yId) { // Parameters are node IDs
    const rootX = find(xId);
    const rootY = find(yId);

    if (rootX === rootY) return false;

    if (ranks.get(rootX) < ranks.get(rootY)) {
      parents.set(rootX, rootY);
    } else if (ranks.get(rootX) > ranks.get(rootY)) {
      parents.set(rootY, rootX);
    } else {
      parents.set(rootY, rootX);
      ranks.set(rootX, ranks.get(rootX) + 1);
    }
    return true;
  }

  // Initialiser Union-Find
  cy.nodes().forEach(node => {
    const id = node.id();
    parents.set(id, id);
    ranks.set(id, 0);
  });

  // Collecter toutes les arêtes avec leurs poids
  const edgesArray = [];
  cy.edges().forEach(edge => {
    edgesArray.push({
      edgeElement: edge, // Store the Cytoscape edge element
      sourceId: edge.source().id(),
      targetId: edge.target().id(),
      weight: edge.data('weight') || 1 // Default weight if none specified
    });
  });

  // Trier les arêtes par poids croissant
  edgesArray.sort((a, b) => a.weight - b.weight);
  uiStateService.addAlgorithmStep("Arêtes triées par poids croissant");

  // Algorithme de Kruskal
  const mstEdges = []; // Array to store Cytoscape edge elements of the MST

  for (const edgeData of edgesArray) {
    const { edgeElement, sourceId, targetId, weight } = edgeData;

    // Si l'ajout de cette arête ne crée pas de cycle
    if (find(sourceId) !== find(targetId)) {
      union(sourceId, targetId);
      mstEdges.push(edgeElement);
      uiStateService.addAlgorithmStep(`Ajout de l'arête ${cy.getElementById(sourceId).data('label')}-${cy.getElementById(targetId).data('label')} (poids ${weight}) à l'arbre couvrant minimal`);

      // Colorer l'arête
      edgeElement.style({
        'line-color': 'purple',
        'width': 5
      });

      // Animer le changement de couleur
      edgeElement.addClass('highlighted-kruskal');
      setTimeout(() => {
        edgeElement.removeClass('highlighted-kruskal');
      }, 1000);
    }
  }

  // Animation facultative
  let delay = 0;
  const animationStep = 500;
  mstEdges.forEach(edge => {
    setTimeout(() => {
      edge.flashClass('highlighted-kruskal', 1000);
    }, delay);
    delay += animationStep;
  });

  // Ajouter des logs pour débogage
  console.log(`Algorithme de Kruskal: ${mstEdges.length} arêtes dans l'arbre couvrant minimal`);
  uiStateService.addAlgorithmStep(`Arbre couvrant minimal construit avec ${mstEdges.length} arêtes`);

  return mstEdges; // Return the array of Cytoscape edge elements forming the MST
}// END OF FILE: src/js/algorithms/kruskal.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/algorithms/prim.js

// src/js/algorithms/prim.js
import cytoscape from 'cytoscape';
import { uiStateService } from '../../services/uiStateService';

export function initPrim(cy, startNode) {
  uiStateService.clearAlgorithmSteps();

  // Add initial steps
  uiStateService.addAlgorithmStep("Initialisation de l'algorithme de Prim");
  uiStateService.addAlgorithmStep(`Nœud de départ: ${startNode.data('label')}`);

  // Réinitialiser les styles
  cy.edges().style({
    'line-color': '#9dbaea',
    'width': 6
  });

  // Tous les nœuds du graphe
  const allNodes = cy.nodes(); // Renamed to avoid confusion
  const totalNodes = allNodes.length;

  // Maps pour suivre les "keys" (min weight to connect to MST) et les parents in MST
  const inMST = new Map();    // Tracks if a node is already in the MST
  const key = new Map();      // Min weight to connect this node to the MST
  const parentEdge = new Map(); // Stores the edge used to connect the node to its parent in MST

  // Initialisation des structures de données
  allNodes.forEach(node => {
    const id = node.id();
    key.set(id, Infinity);
    inMST.set(id, false);
    parentEdge.set(id, null);
  });

  // Start with the given startNode
  key.set(startNode.id(), 0);

  // Algorithme de Prim
  for (let count = 0; count < totalNodes; count++) {
    // Trouver le nœud non dans MST avec la clé (key) minimale
    let minKey = Infinity;
    let uNode = null; // The node to be added to MST

    allNodes.forEach(node => {
      const id = node.id();
      if (!inMST.get(id) && key.get(id) < minKey) {
        minKey = key.get(id);
        uNode = node;
      }
    });

    // Si aucun nœud n'est accessible ou tous les nœuds sont dans MST
    if (uNode === null) break;

    // Marquer le nœud comme faisant partie du MST
    inMST.set(uNode.id(), true);
    uiStateService.addAlgorithmStep(`Ajout du nœud ${uNode.data('label')} à l'arbre couvrant minimal`);

    // Mettre à jour les valeurs de clé des nœuds adjacents au nœud choisi
    const neighbors = uNode.neighborhood().filter(el => el.isNode() && !inMST.get(el.id()));

    neighbors.forEach(vNode => { // vNode is an adjacent node
      const vNodeId = vNode.id();
      // Trouver l'arête entre uNode et vNode
      const edgeConnecting = uNode.edgesWith(vNode).filter(e => e.source().id() === uNode.id() && e.target().id() === vNodeId || e.source().id() === vNodeId && e.target().id() === uNode.id());
      
      if (edgeConnecting.length > 0) {
        const weight = edgeConnecting.first().data('weight') || 1;

        if (weight < key.get(vNodeId)) {
          key.set(vNodeId, weight);
          parentEdge.set(vNodeId, edgeConnecting.first()); // Store the edge itself
          uiStateService.addAlgorithmStep(`Mise à jour de la clé du nœud ${vNode.data('label')} à ${weight} via ${uNode.data('label')}`);
          
          // Animer le changement de couleur (de l'arête qui est maintenant le meilleur candidat)
          // This animation might be too noisy if edges are reconsidered often.
          // For Prim, typically edges are highlighted when *chosen* for the MST.
        }
      }
    });
  }

  // Colorer les arêtes de l'arbre couvrant minimal et animer
  let delay = 0;
  const animationStep = 500;
  const mstEdgesCollected = [];

  parentEdge.forEach((edge, nodeId) => {
    if (edge !== null) { // Edges that are part of the MST
      mstEdgesCollected.push(edge);
      edge.style({
        'line-color': 'green',
        'width': 5
      });
      setTimeout(() => {
        edge.flashClass('highlighted-prim', 1000);
      }, delay);
      delay += animationStep;
    }
  });
  
  uiStateService.addAlgorithmStep(`Arbre couvrant minimal construit avec ${mstEdgesCollected.length} arêtes (et ${Array.from(inMST.values()).filter(Boolean).length} nœuds).`);
  // Note: For a connected graph, mstEdgesCollected.length should be totalNodes - 1 if totalNodes > 0.
}// END OF FILE: src/js/algorithms/prim.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/app.ts

// END OF FILE: src/js/app.ts

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/auth/auth.js

// END OF FILE: src/js/auth/auth.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/auth/login.js

// END OF FILE: src/js/auth/login.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/auth/register.js

// END OF FILE: src/js/auth/register.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/family-tree/graph-view.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/family-tree/graph-view.js
import cytoscape from 'cytoscape';

export function initGraph(containerId, graphData) { // graphData vient de transformGraphData
  const cy = cytoscape({
    container: document.getElementById(containerId),
    elements: graphData, // elements est déjà { nodes: [...], edges: [...] }
    style: [
      // ... (styles inchangés, s'assurent juste que 'data(id)' est bien l'UUID string)
      {
        selector: 'node',
        style: {
          'background-color': '#11479e',
          'label': 'data(label)', // Assurez-vous que label est bien défini dans transformGraphData
          'color': '#fff',
          'text-valign': 'center',
          'text-halign': 'center',
          'width': '100px', // Ajusté pour potentiellement plus de texte/nœuds
          'height': '100px',
          'font-size': '12px', // Ajusté
          'border-color': '#000',
          'border-width': '1px',
          'border-opacity': '0.5',
          'shape': 'ellipse' // ou 'roundrectangle'
        }
      },
      {
        selector: 'edge',
        style: {
          'width': 3, // Ajusté
          'line-color': '#9dbaea',
          'target-arrow-color': '#9dbaea',
          'target-arrow-shape': 'triangle',
          'curve-style': 'bezier'
        }
      },
      {
        selector: 'edge[relationship = "partner"]', // Style pour les arêtes de conjoints
        style: {
          'line-color': '#ff69b4', // Rose pour conjoints
          'line-style': 'dashed',
          'target-arrow-shape': 'none' // Pas de flèche pour relation symétrique
        }
      }
    ],
    layout: {
      name: 'cose', // COSE est souvent meilleur pour les graphes sociaux/réseaux
      idealEdgeLength: 100,
      nodeOverlap: 20,
      refresh: 20,
      fit: true,
      padding: 30,
      randomize: false,
      componentSpacing: 100,
      nodeRepulsion: 400000,
      edgeElasticity: 100,
      nestingFactor: 5,
      gravity: 80,
      numIter: 1000,
      initialTemp: 200,
      coolingFactor: 0.95,
      minTemp: 1.0
    }
  });
  return cy;
}

// Transforme les données brutes de l'API (FamilyPerson[]) en un format pour Cytoscape
export function transformGraphData(familyDataArray) { // Renommé pour clarté
  if (!Array.isArray(familyDataArray)) {
    console.error("transformGraphData expects an array, received:", familyDataArray);
    return { nodes: [], edges: [] };
  }

  const nodes = familyDataArray.map(person => {
    if (!person || typeof person.id !== 'string' || person.id === '') { // ID est UUID string
      console.warn('Skipping person with invalid or missing ID (must be UUID string):', person);
      return null;
    }
    return {
      data: {
        id: person.id, // UUID string
        label: person.name || 'Unnamed',
        gender: person.gender,
        birthYear: person.birthYear,
        img: person.img
        // Ajoute d'autres données si tu veux les utiliser dans les styles ou les popups
      }
    };
  }).filter(node => node !== null);

  const edges = [];
  const existingEdges = new Set(); // Pour éviter les doublons d'arêtes de partenariat

  familyDataArray.forEach(person => {
    if (!person || typeof person.id !== 'string' || person.id === '') return;

    const personId = person.id;

    // Arêtes parent-enfant (dirigées du parent vers l'enfant)
    if (person.fid) { // fid est un UUID string du père
      edges.push({ data: { id: `edge-${person.fid}-to-${personId}`, source: person.fid, target: personId, relationship: 'parent-child' } });
    }
    if (person.mid) { // mid est un UUID string de la mère
      edges.push({ data: { id: `edge-${person.mid}-to-${personId}`, source: person.mid, target: personId, relationship: 'parent-child' } });
    }

    // Arêtes de partenariat (non dirigées)
    if (person.pids && Array.isArray(person.pids)) {
      person.pids.forEach(partnerId => { // partnerId est un UUID string
        if (typeof partnerId !== 'string' || partnerId === '') return;

        // Créer un ID d'arête unique pour éviter les doublons (A-B et B-A)
        const edgeId = [personId, partnerId].sort().join('-');
        if (!existingEdges.has(edgeId)) {
          edges.push({ data: { id: `edge-${edgeId}`, source: personId, target: partnerId, relationship: 'partner' } });
          existingEdges.add(edgeId);
        }
      });
    }
  });

  return { nodes, edges };
}// END OF FILE: src/js/family-tree/graph-view.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/family-tree/person-form.js

// END OF FILE: src/js/family-tree/person-form.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/family-tree/tree-view.js

// src/js/family-tree/tree-view.js
import FamilyTree from '@balkangraph/familytree.js';
import { familyDataService } from '../../services/familyDataService'; // Pour les détails dans updatePersonDetails

// initFamilyTree reçoit directement les données formatées par le router
export function initFamilyTree(containerId, familyDataForTree) {
  // familyDataForTree a déjà les IDs en string
  const chart = new FamilyTree(document.getElementById(containerId), {
    mode: 'tree', // ou 'light', 'dark' etc.
    orientation: FamilyTree.orientation.top,
    nodeBinding: {
      field_0: 'name',
      field_1: 'years', // Sera calculé dans transformFamilyData (ou ici)
      img_0: 'img'
    },
    // Utilise un template standard ou personnalisé. 'hugo' est un bon point de départ.
    template: 'hugo', 
    // Pour des templates plus personnalisés, réfère-toi à la documentation de BalkanGraph
    // Par exemple, pour afficher le genre différemment :
    // FamilyTree.templates.tommy_male = Object.assign({}, FamilyTree.templates.tommy);
    // FamilyTree.templates.tommy_male.defs = '<style>...</style>'; // Ajouter des styles spécifiques au genre

    levelSeparation: 70,
    siblingSeparation: 60,
    subtreeSeparation: 80,
    nodes: familyDataForTree.map(person => { // Calculer 'years' ici
        let years = '';
        if (person.birthYear) {
            years = person.birthYear.toString();
            if (person.deathYear) {
                years += ` - ${person.deathYear}`;
            }
        }
        return {...person, years };
    }),
    // Gestion des clics pour afficher les détails (optionnel, peut être géré autrement)
     onClick: function (sender, args) { // Note: 'this' ici est l'instance de FamilyTree
        if (args.node) {
            const personId = args.node.id; // C'est l'UUID string
            updatePersonDetailsById(personId); // Fonction pour charger et afficher les détails
            return false; // Pour éviter le comportement par défaut si tu le gères entièrement
        }
    },
    editForm: { // Désactiver le formulaire d'édition intégré si tu gères tout via ta page de profil
        generateElements: false,
        buttons: {}
    },
    menu: { // Personnaliser le menu contextuel du noeud
        pdf: { text: "Exporter en PDF" },
        png: { text: "Exporter en PNG" },
        // edit: null, // Désactiver le bouton d'édition du menu si besoin
    },
    tags: { // Pour styler les noeuds par genre (si ton template le supporte)
        male: {
            template: "hugo" // ou un template spécifique "hugo_male"
            // css: "path/to/male.css"
        },
        female: {
            template: "hugo" // ou "hugo_female"
            // css: "path/to/female.css"
        },
        unknown: {
            template: "hugo"
        }
    }
  });
  return chart;
}

// La transformation principale des données (UUIDs, etc.) est faite dans le router avant d'appeler initFamilyTree.
// Cette fonction n'est plus exportée ou utilisée de la même manière.
// export function transformFamilyData(rawData) { ... } // DEPRECATED ou usage interne

// Fonction pour afficher les détails d'une personne dans la sidebar droite
async function updatePersonDetailsById(personId) {
  const detailsContainer = document.querySelector('#right-sidebar .info-card'); // Assure-toi que .info-card existe
  if (!detailsContainer) {
      // Créer le conteneur s'il n'existe pas (ou log une erreur)
      const rightSidebar = document.getElementById('right-sidebar');
      if(rightSidebar) {
          const card = document.createElement('div');
          card.className = 'info-card'; // Ajoute une classe pour le style
          rightSidebar.appendChild(card);
          // detailsContainer = card; // Attention, cette assignation ne fonctionnera pas comme prévu ici.
          // Il vaut mieux s'assurer que le HTML initial de rightsidebar contient déjà .info-card
      } else {
          console.error("Right sidebar container not found for person details.");
          return;
      }
  }


  try {
    const person = await familyDataService.getPersonById(personId);
    if (!person) {
      detailsContainer.innerHTML = '<p>Personne non trouvée.</p>';
      return;
    }
    
    // Pour obtenir les noms des parents/conjoints/enfants, on a besoin de toutes les données
    // ou de faire des appels supplémentaires. Pour l'instant, on va chercher dans toutes les données si possible.
    // C'est moins performant mais plus simple pour l'affichage.
    // Idéalement, le backend pourrait renvoyer ces infos déjà "populées".
    const allFamilyData = await familyDataService.getAllFamilyData();

    let status = person.deathYear ? 'Décédé(e)' : 'Vivant(e)';
    let age = '';
    if (person.birthYear) {
      const endYear = person.deathYear || new Date().getFullYear();
      age = (endYear - person.birthYear).toString();
    }

    const father = person.fid ? allFamilyData.find(p => p.id === person.fid) : null;
    const mother = person.mid ? allFamilyData.find(p => p.id === person.mid) : null;
    const partners = person.pids ? person.pids.map(pid => allFamilyData.find(p => p.id === pid)).filter(p => p) : [];
    const children = allFamilyData.filter(p => p.fid === person.id || p.mid === person.id);

    detailsContainer.innerHTML = `
      <h4>${person.name}</h4>
      <p><strong>Année de naissance:</strong> ${person.birthYear || 'Inconnue'}</p>
      ${person.deathYear ? `<p><strong>Année de décès:</strong> ${person.deathYear}</p>` : ''}
      <p><strong>Âge:</strong> ${age ? age + ' ans' : 'Inconnu'}</p>
      <p><strong>Genre:</strong> ${person.gender === 'male' ? 'Homme' : person.gender === 'female' ? 'Femme' : 'Non spécifié'}</p>
      <p><strong>Statut:</strong> ${status}</p>
      ${person.gmail ? `<p><strong>Email:</strong> ${person.gmail}</p>` : ''}
      
      ${father || mother ? `
        <div class="family-section">
          <h5>Parents</h5>
          ${father ? `<p>Père: ${father.name}</p>` : ''}
          ${mother ? `<p>Mère: ${mother.name}</p>` : ''}
        </div>
      ` : ''}
      
      ${partners.length > 0 ? `
        <div class="family-section">
          <h5>Conjoint(s)</h5>
          ${partners.map(partner => `<p>${partner.name}</p>`).join('')}
        </div>
      ` : ''}
      
      ${children.length > 0 ? `
        <div class="family-section">
          <h5>Enfants</h5>
          ${children.map(child => `<p>${child.name}</p>`).join('')}
        </div>
      ` : ''}
    `;
  } catch (error) {
    console.error("Erreur lors de la mise à jour des détails de la personne:", error);
    detailsContainer.innerHTML = '<p>Erreur lors du chargement des détails.</p>';
  }
}// END OF FILE: src/js/family-tree/tree-view.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/utils/api.js

import axios from 'axios';

const API_URL = 'http://localhost:5000/api'; // Remplacez par l'URL de votre backend

export const registerUser = async (userData) => {
  try {
    const response = await axios.post(`${API_URL}/auth/register`, userData);
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const loginUser = async (userData) => {
  try {
    const response = await axios.post(`${API_URL}/auth/login`, userData);
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const getCurrentUser = async () => {
  try {
    const token = localStorage.getItem('token');
    const response = await axios.get(`${API_URL}/auth/me`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const resetPassword = async (userData) => {
  try {
    const response = await axios.post(`${API_URL}/auth/reset-password`, userData);
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};
// END OF FILE: src/js/utils/api.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/utils/dom-utils.js

// END OF FILE: src/js/utils/dom-utils.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/utils/family-data-filter.js

// src/js/utils/family-data-filter.js
export function filterDataForPersonalView(fullFamilyData, userProfile) { 
    console.log("--- Inside filterDataForPersonalView (util) ---");
    console.log("Argument 'fullFamilyData':", fullFamilyData); // Should be an array
    console.log("Argument 'userProfile':", userProfile);       // Should be a single 
    // Initial guard clauses
    if (!userProfile || typeof userProfile.id === 'undefined' || userProfile.id === null) {
      console.error("filterDataForPersonalView (util): Called with invalid userProfile (or its ID is missing).", userProfile);
      return [];
    }
    if (!fullFamilyData || !Array.isArray(fullFamilyData)) { // Check if fullFamilyData is actually an array
      console.error("filterDataForPersonalView (util): fullFamilyData is not a valid array.", fullFamilyData);
      // If we have a valid user profile but no family data, we should still return the user.
      return [{
        id: userProfile.id,
        name: userProfile.name,
        mid: userProfile.mid,
        fid: userProfile.fid,
        pids: [],
        gender: userProfile.gender,
        birthYear: userProfile.birthYear,
        deathYear: userProfile.deathYear,
        img: userProfile.img,
        gmail: userProfile.gmail
      }];
    }
    if (fullFamilyData.length === 0) {
        console.warn("filterDataForPersonalView (util): fullFamilyData is empty. Returning only the user profile.");
        return [{
          id: userProfile.id,
          name: userProfile.name,
          mid: userProfile.mid,
          fid: userProfile.fid,
          pids: userProfile.pids || [],
          gender: userProfile.gender,
          birthYear: userProfile.birthYear,
          deathYear: userProfile.deathYear,
          img: userProfile.img,
          gmail: userProfile.gmail
        }];
      }
    console.log("filterDataForPersonalView (util) - Received fullFamilyData (length):", fullFamilyData.length, "Received userProfile:", userProfile.name, userProfile.id);
  
    const personalDataMap = new Map();
    const userId = userProfile.id; // userId is from the (hopefully) single userProfile object
  
    function addPersonToMapById(personId) {
      if (personId === null || typeof personId === 'undefined') return;
      if (personalDataMap.has(personId)) return;
  
      const person = fullFamilyData.find(p => p.id === personId);
      if (person) {
        personalDataMap.set(person.id, { ...person });
      } else {
        console.warn(`filterDataForPersonalView (util): Person with ID ${personId} not found in fullFamilyData.`);
      }
    }
  
    // 1. Add the user themselves
    let userInSourceArray = fullFamilyData.find(p => p.id === userId);
    if (userInSourceArray) {
      console.log(`filterDataForPersonalView (util): Found user ${userId} in fullFamilyData. Adding to map.`);
      personalDataMap.set(userInSourceArray.id, { ...userInSourceArray });
    } else {
        console.warn(`User ID ${userId} not found in fullFamilyData. Using userProfile object directly.`);
        personalDataMap.set(userProfile.id, { 
          id: userProfile.id,
          name: userProfile.name,
          mid: userProfile.mid,
          fid: userProfile.fid,
          pids: userProfile.pids || [],
          gender: userProfile.gender,
          birthYear: userProfile.birthYear,
          deathYear: userProfile.deathYear,
          img: userProfile.img,
          gmail: userProfile.gmail
        });
      }
  
    if (!personalDataMap.has(userId)) {
      console.error("filterDataForPersonalView (util): User could not be added to the map. This should not happen if userProfile was valid.");
      return [];
    }
    const currentUser = personalDataMap.get(userId);
    console.log("Current user from map:", currentUser);

    // 2. Ajouter le père de l'utilisateur
    if (currentUser.fid) {
      console.log(`Looking for father with ID: ${currentUser.fid}`);
      addPersonToMapById(currentUser.fid);
    } else {
      console.log("User has no father ID (fid)");
    }

    // 3. Ajouter la mère de l'utilisateur
    if (currentUser.mid) {
      console.log(`Looking for mother with ID: ${currentUser.mid}`);
      addPersonToMapById(currentUser.mid);
    } else {
      console.log("User has no mother ID (mid)");
    }
  
    // 4. Ajouter les enfants de l'utilisateur
    console.log("Looking for children of user...");
    let childrenFound = 0;
    fullFamilyData.forEach(personInFullData => {
      // Vérifier si cette personne est un enfant de l'utilisateur
      if (personInFullData.fid === userId || personInFullData.mid === userId) {
        console.log(`Found child: ${personInFullData.name} (ID: ${personInFullData.id})`);
        if (!personalDataMap.has(personInFullData.id)) {
          personalDataMap.set(personInFullData.id, { ...personInFullData });
          childrenFound++;
        }
      }
    });
    console.log(`Total children found: ${childrenFound}`);
  
    // 5. Nettoyer les pids pour ne garder que ceux qui sont dans notre map
    const finalPersonalData = Array.from(personalDataMap.values()).map(personInMap => {
        const updatedPids = (personInMap.pids || []).filter(pid => personalDataMap.has(pid));
        return { ...personInMap, pids: updatedPids };
      });
  
      if (finalPersonalData.length === 0) {
        console.error("finalPersonalData is unexpectedly empty.");
        return [];
      }
  
      console.log("filterDataForPersonalView (util): Filtered data for personal view:");
      finalPersonalData.forEach(person => {
        console.log(`- ${person.name} (ID: ${person.id})`);
      });
      
      return finalPersonalData;
  }// END OF FILE: src/js/utils/family-data-filter.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/utils/graph-utils.js

// END OF FILE: src/js/utils/graph-utils.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/utils/helper.js

//js/utils/helpers.js
export function clearAlgorithmSteps() {
    localStorage.setItem('algorithmSteps', JSON.stringify([]));
  }
  // END OF FILE: src/js/utils/helper.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/main.ts

// frontend/src/main.ts
import './css/style.css';
import { initRouter } from './router';
// familyDataService.getAllFamilyData(); // Plus besoin ici, le router et les services s'en chargent

async function main() {
  // La logique d'initialisation des données est maintenant gérée par les services
  // et les composants eux-mêmes lorsqu'ils en ont besoin.
  // Le router s'assurera que l'utilisateur est authentifié avant d'afficher les pages protégées.
  initRouter();
}

main();// END OF FILE: src/main.ts

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/pages/dashboard.html

// END OF FILE: src/pages/dashboard.html

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/pages/index.html

// END OF FILE: src/pages/index.html

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/pages/login.html

// END OF FILE: src/pages/login.html

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/pages/register.html

// END OF FILE: src/pages/register.html

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/router.js

// router.js
import { renderNavbar } from './components/navbar';
import { renderLeftSidebar } from './components/leftSidebar';
import { renderRightSidebar } from './components/rightSidebar';
import { renderMainContent } from './components/mainContent';
import { renderProfilePage, setupProfileFormHandler } from './components/profile';
import { renderLoginPage, setupLoginFormHandler } from './components/login';
import { renderRegisterPage, setupRegisterFormHandler } from './components/register';
import { authService } from './services/authService';
import { familyDataService } from './services/familyDataService';
import { uiStateService } from './services/uiStateService';

import { initDijkstra } from './js/algorithms/dijkstra';
import { initBellmanFord } from './js/algorithms/bellman-ford';
import { initPrim } from './js/algorithms/prim';
import { initKruskal } from './js/algorithms/kruskal'; 


let currentActiveView = 'tree';
let currentDataScope = 'personal'; // MODIFIÉ: Vue personnelle par défaut
let cyInstance = null;
let familyTreeInstance = null;

export function initRouter() {
  const app = document.querySelector('#app');

  function navigateTo(path) {
    history.pushState(null, null, path);
    renderRoute();
  }

  async function getPreparedData() {
    uiStateService.clearAlgorithmSteps(); // Effacer les étapes d'algo lors du changement de données
    updateRightSidebar(); // Mettre à jour la sidebar pour refléter l'effacement

    if (currentDataScope === 'personal') {
      return await familyDataService.getPersonalFamilyData();
    }
    return await familyDataService.getAllFamilyData();
  }

  async function renderFamilyTree() {
    const container = document.getElementById('family-tree-container');
    if (familyTreeInstance && typeof familyTreeInstance.destroy === 'function') {
        familyTreeInstance.destroy();
        familyTreeInstance = null;
    }
    if (container) container.innerHTML = ''; 

    document.getElementById('tree-view').style.display = 'block';
    document.getElementById('graph-view').style.display = 'none';

    const dataToDisplay = await getPreparedData();
    if (!dataToDisplay || dataToDisplay.length === 0) {
      container.innerHTML = 
        '<p style="text-align:center; padding-top:20px;">Aucune donnée familiale à afficher pour cette vue.</p>';
      return;
    }
    
    const transformedDataForTree = dataToDisplay.map(p => ({
        ...p,
        id: String(p.id), // FamilyTree.js attend des strings pour les IDs
        fid: p.fid ? String(p.fid) : undefined,
        mid: p.mid ? String(p.mid) : undefined,
        pids: p.pids ? p.pids.map(pid => String(pid)) : [],
        // Ajout du tag pour le genre pour le style
        tags: p.gender ? [p.gender] : ['unknown'] 
    }));

    import('./js/family-tree/tree-view').then(({ initFamilyTree }) => {
      familyTreeInstance = initFamilyTree('family-tree-container', transformedDataForTree);
    });
  }

  async function renderGraphView() {
    if (cyInstance) {
      cyInstance.destroy();
      cyInstance = null;
    }
    const container = document.getElementById('graph-container');
    if(container) container.innerHTML = '';


    document.getElementById('tree-view').style.display = 'none';
    document.getElementById('graph-view').style.display = 'block';
    
    const dataToDisplay = await getPreparedData();
     if (!dataToDisplay || dataToDisplay.length === 0) {
      container.innerHTML = 
        '<p style="text-align:center; padding-top:20px;">Aucune donnée familiale à afficher pour le graphe.</p>';
      return;
    }

    import('./js/family-tree/graph-view').then(async ({ initGraph, transformGraphData }) => {
      const graphData = transformGraphData(dataToDisplay);
      cyInstance = initGraph('graph-container', graphData);
      setupAlgorithmButtons(cyInstance); // S'assurer que les boutons sont (ré)initialisés
    });
  }

  function updateActiveButtons() {
    document.querySelectorAll('.view-button').forEach(btn => {
        btn.classList.toggle('active-view-btn', btn.getAttribute('data-view') === currentActiveView);
    });
    document.querySelectorAll('.scope-button').forEach(btn => {
        btn.classList.toggle('active-scope-btn', btn.getAttribute('data-scope') === currentDataScope);
    });
  }

  function setupMainViewControls() {
    document.querySelectorAll('.view-button').forEach(button => {
      button.addEventListener('click', (e) => {
        currentActiveView = e.target.getAttribute('data-view');
        if (currentActiveView === 'tree') renderFamilyTree();
        else if (currentActiveView === 'graph') renderGraphView();
        updateActiveButtons();
      });
    });

    document.querySelectorAll('.scope-button').forEach(button => {
      button.addEventListener('click', async (e) => { // rendu async
        currentDataScope = e.target.getAttribute('data-scope');
        // Re-fetch and re-render
        if (currentActiveView === 'tree') await renderFamilyTree();
        else if (currentActiveView === 'graph') await renderGraphView();
        updateActiveButtons();
        // Mettre à jour les selects des algos avec les nouvelles données si la vue graphe est active
        if (currentActiveView === 'graph') {
            const familyDataForSelect = await getPreparedData(); // Utilise déjà le bon scope
            populateAlgorithmSelects(['start-person', 'end-person', 'bellman-ford-start-person', 'bellman-ford-end-person', 'prim-start-person', 'kruskal-start-person'], familyDataForSelect);
        }
      });
    });
  }
  
  function setupAlgorithmButtons(cy) {
    const algoErrorContainer = document.getElementById('algorithm-error-message'); // Défini dans leftsidebar.js
    
    const handleAlgoRun = (algoName, startNodeId, endNodeId, initFn) => {
        if (currentActiveView === 'tree') {
            if (algoErrorContainer) {
                algoErrorContainer.textContent = `Pour utiliser ${algoName}, veuillez basculer vers la vue "Graphe des Relations".`;
                algoErrorContainer.style.display = 'block';
            } else {
                uiStateService.addAlgorithmStep(`ERREUR: ${algoName} ne peut être lancé qu'en vue "Graphe".`);
                updateRightSidebar();
            }
            return;
        }
        if (algoErrorContainer) algoErrorContainer.style.display = 'none';

        if (!cy) {
            uiStateService.addAlgorithmStep("ERREUR: Graphe non initialisé.");
            updateRightSidebar();
            return;
        }

        const startNode = cy.getElementById(startNodeId);
        let endNode;
        if (endNodeId) endNode = cy.getElementById(endNodeId);

        let nodesValid = startNode && startNode.length > 0;
        if (endNodeId) nodesValid = nodesValid && endNode && endNode.length > 0;
        
        // Pour Kruskal, startNodeId et endNodeId ne sont pas utilisés directement par l'algo lui-même
        if (algoName === "Kruskal") {
            initFn(cy); // Kruskal n'a pas besoin de start/end node spécifiques pour son initialisation
            updateRightSidebar();
            return;
        }


        if (nodesValid) {
            if (endNodeId) initFn(cy, startNode, endNode);
            else initFn(cy, startNode); // Pour Prim
            updateRightSidebar();
        } else {
            uiStateService.addAlgorithmStep(`ERREUR ${algoName}: Nœud de départ ou d'arrivée non trouvé.`);
            updateRightSidebar();
            console.warn(`${algoName}: Start or end node not found. Start: ${startNodeId}, End: ${endNodeId}`);
        }
    };

    const runDijkstraButton = document.getElementById('run-dijkstra');
    if (runDijkstraButton) {
      runDijkstraButton.onclick = () => { 
        const startPersonId = document.getElementById('start-person').value;
        const endPersonId = document.getElementById('end-person').value;
        handleAlgoRun("Dijkstra", startPersonId, endPersonId, initDijkstra);
      };
    }

    const runBellmanFordButton = document.getElementById('run-bellman-ford');
    if (runBellmanFordButton) {
      runBellmanFordButton.onclick = () => {
        const startPersonId = document.getElementById('bellman-ford-start-person').value;
        const endPersonId = document.getElementById('bellman-ford-end-person').value;
        handleAlgoRun("Bellman-Ford", startPersonId, endPersonId, initBellmanFord);
      };
    }

    const runPrimButton = document.getElementById('run-prim');
    if (runPrimButton) {
      runPrimButton.onclick = () => {
        const startPersonId = document.getElementById('prim-start-person').value;
        handleAlgoRun("Prim", startPersonId, null, initPrim);
      };
    }

    const runKruskalButton = document.getElementById('run-kruskal');
    if (runKruskalButton) {
      runKruskalButton.onclick = () => {
        // Kruskal n'a pas besoin de start/end node ici, le select est juste pour UI
        handleAlgoRun("Kruskal", null, null, initKruskal);
      };
    }
  }

  async function renderRoute() {
    const path = window.location.pathname;
    const isAuthenticated = authService.isAuthenticated();

    if (!isAuthenticated && path !== '/login' && path !== '/register') {
      navigateTo('/login');
      return;
    }
    if (isAuthenticated && (path === '/login' || path === '/register')) {
      navigateTo('/');
      return;
    }

    // Essayer de charger le profil utilisateur pour s'assurer que le token est valide avant de rendre quoi que ce soit
    // Sauf pour les pages de login/register elles-mêmes
    if (path !== '/login' && path !== '/register') {
        try {
            const user = await authService.fetchUserProfileFromServer();
            if (!user) { // Si fetchUserProfileFromServer retourne null (ex: token invalide déconnecté)
                if (authService.isAuthenticated()) authService.logout(); // Double check pour nettoyer
                navigateTo('/login');
                return;
            }
        } catch (error) { // Erreur critique pendant fetchUserProfileFromServer
            if (authService.isAuthenticated()) authService.logout();
            navigateTo('/login');
            return;
        }
    }

    // Toujours rendre la navbar après la vérification d'auth (sauf si redirection)
    const appContainer = document.getElementById('app');
    if (appContainer) appContainer.innerHTML = renderNavbar(); 

    let mainLayoutHtml = '';
    if (path === '/') {
        mainLayoutHtml = `
            ${renderLeftSidebar()}
            ${renderMainContent()}
            ${renderRightSidebar()}
        `;
    } else if (path === '/profile') {
        mainLayoutHtml = `<div id="main-content-profile" class="profile-container">${renderProfilePage()}</div>`;
    } else if (path === '/login') {
        mainLayoutHtml = `<div id="main-content-login" class="login-container">${renderLoginPage()}</div>`;
    } else if (path === '/register') {
        mainLayoutHtml = `<div id="main-content-register" class="login-container">${renderRegisterPage()}</div>`;
    } else {
        mainLayoutHtml = `<div id="main-content-404"><h2>404 - Page non trouvée</h2></div>`;
    }
    
    if (appContainer) appContainer.innerHTML += mainLayoutHtml;


    // Initialisations spécifiques à la page
    if (path === '/') {
      // La navbar a déjà été mise à jour implicitement par le fetchUserProfileFromServer global
      // et le renderNavbar() au début de renderRoute().

      if (currentActiveView === 'tree') await renderFamilyTree();
      else await renderGraphView(); // Ceci va appeler getPreparedData qui utilise currentDataScope
      
      setupMainViewControls();
      updateActiveButtons();

      // Peupler les selects des algorithmes avec les données actuellement affichées
      const familyDataForSelect = await getPreparedData(); // Utilise currentDataScope
      if (familyDataForSelect && familyDataForSelect.length > 0) {
            const dijkstraButton = document.getElementById('dijkstra-button');
            if (dijkstraButton) {
              dijkstraButton.addEventListener('click', () => {
                document.getElementById('dijkstra-form').style.display = document.getElementById('dijkstra-form').style.display === 'none' ? 'block' : 'none';
                populateAlgorithmSelects(['start-person', 'end-person'], familyDataForSelect);
              });
            }
             const bellmanFordButton = document.getElementById('bellman-ford-button');
            if (bellmanFordButton) {
                bellmanFordButton.addEventListener('click', () => {
                    document.getElementById('bellman-ford-form').style.display = document.getElementById('bellman-ford-form').style.display === 'none' ? 'block' : 'none';
                    populateAlgorithmSelects(['bellman-ford-start-person', 'bellman-ford-end-person'], familyDataForSelect);
                });
            }
            const primButton = document.getElementById('prim-button');
            if (primButton) {
                primButton.addEventListener('click', () => {
                    document.getElementById('prim-form').style.display = document.getElementById('prim-form').style.display === 'none' ? 'block' : 'none';
                    populateAlgorithmSelects(['prim-start-person'], familyDataForSelect);
                });
            }
            const kruskalButton = document.getElementById('kruskal-button');
            if (kruskalButton) {
                kruskalButton.addEventListener('click', () => {
                    document.getElementById('kruskal-form').style.display = document.getElementById('kruskal-form').style.display === 'none' ? 'block' : 'none';
                    populateAlgorithmSelects(['kruskal-start-person'], familyDataForSelect); 
                });
            }
        }
      if (cyInstance) setupAlgorithmButtons(cyInstance); // S'assurer que les boutons sont liés si cyInstance est créé

    } else if (path === '/profile') {
      await setupProfileFormHandler(); 
    } else if (path === '/login') {
      setupLoginFormHandler();
    } else if (path === '/register') {
      setupRegisterFormHandler();
    }

    // S'assurer que les liens de navigation SPA fonctionnent
    document.querySelectorAll('a[data-link]').forEach(link => {
        if (!link.dataset.spaHandlerAttached) { // Eviter d'attacher plusieurs fois
            link.addEventListener('click', e => {
                e.preventDefault();
                navigateTo(link.getAttribute('href'));
            });
            link.dataset.spaHandlerAttached = 'true';
        }
    });
  }

  function populateAlgorithmSelects(selectIds, data) {
    if (!data || data.length === 0) {
        selectIds.forEach(selectId => {
            const selectElement = document.getElementById(selectId);
            if (selectElement) {
                selectElement.innerHTML = '<option value="">Aucune personne à sélectionner</option>';
            }
        });
        return;
    }
    selectIds.forEach(selectId => {
        const selectElement = document.getElementById(selectId);
        if (selectElement) {
            const currentValue = selectElement.value; 
            selectElement.innerHTML = ''; 
            data.forEach(person => {
                const option = document.createElement('option');
                option.value = person.id; 
                option.textContent = person.name;
                selectElement.appendChild(option);
            });
            if(currentValue && data.some(p => p.id === currentValue)) {
                 selectElement.value = currentValue;
            } else if (data.length > 0) {
                selectElement.value = data[0].id; // Select first by default if no/invalid previous value
            }
        }
    });
  }
  
  // Attacher l'event listener pour la navigation SPA une seule fois au body
  document.body.addEventListener('click', e => {
    const target = e.target.closest('a[data-link]'); // Chercher un parent <a> si clic sur un enfant
    if (target) {
      e.preventDefault();
      navigateTo(target.getAttribute('href'));
    }
  });

  window.addEventListener('popstate', renderRoute);
  renderRoute(); 
}

export function updateRightSidebar() { // Rendre exportable si utilisé ailleurs, sinon garder local
  const rightSidebarContainer = document.getElementById('right-sidebar');
  if (rightSidebarContainer) {
    rightSidebarContainer.innerHTML = renderRightSidebar();
  }
}// END OF FILE: src/router.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/services/api.js

// frontend/src/services/api.js
import axios from 'axios';

// Tu peux mettre ça dans un .env.local ou .env.development etc.
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';

const apiClient = axios.create({
  baseURL: API_BASE_URL,
});

apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('jwtToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Optionnel: Intercepteur de réponse pour gérer les erreurs globales (ex: 401 Unauthorized)
apiClient.interceptors.response.use(
  response => response,
  error => {
    if (error.response && error.response.status === 401) {
      // Gérer la déconnexion automatique si token invalide/expiré
      // Par exemple, en appelant authService.logout() et en redirigeant vers la page de connexion.
      // Attention aux dépendances circulaires si authService importe apiClient.
      console.error('Unauthorized, logging out.');
      localStorage.removeItem('jwtToken');
      localStorage.removeItem('userProfile'); // Cache du profil
      window.location.href = '/login'; // Redirection brutale
    }
    return Promise.reject(error);
  }
);

export default apiClient;// END OF FILE: src/services/api.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/services/authService.js

// frontend/src/services/authService.js
import apiClient from './api';

const JWT_TOKEN_KEY = 'jwtToken';
const USER_PROFILE_CACHE_KEY = 'userProfileCache'; 

export const authService = {
  login: async (email, password) => {
    const response = await apiClient.post('/auth/login', { email, password });
    localStorage.setItem(JWT_TOKEN_KEY, response.data.token);
    const baseUser = response.data.user; 
    
    try {
      const familyProfile = await authService.ensureUserProfileInFamilyTree({
        id: baseUser.id, 
        name: `${baseUser.firstName} ${baseUser.lastName}`,
        gmail: baseUser.email,
      });
      localStorage.setItem(USER_PROFILE_CACHE_KEY, JSON.stringify(familyProfile));
      return familyProfile;
    } catch (ensureError) {
      console.error("Erreur lors de l'intégration du profil dans l'arbre après connexion:", ensureError);
      const minimalProfileForCache = {
          id: baseUser.id,
          name: `${baseUser.firstName} ${baseUser.lastName}`,
          email: baseUser.email, // Correction: utiliser baseUser.email
      }
      localStorage.setItem(USER_PROFILE_CACHE_KEY, JSON.stringify(minimalProfileForCache));
      return minimalProfileForCache;
    }
  },

  register: async (userData) => { 
    const response = await apiClient.post('/auth/register', userData);
    localStorage.setItem(JWT_TOKEN_KEY, response.data.token);
    const baseUser = response.data.user;

    try {
      const familyProfileData = {
        id: baseUser.id, 
        name: `${baseUser.firstName} ${baseUser.lastName}`,
        gmail: baseUser.email,
        gender: 'unknown', 
        img: '/assets/avatars/default.svg',
      };
      const familyProfile = await authService.ensureUserProfileInFamilyTree(familyProfileData);
      localStorage.setItem(USER_PROFILE_CACHE_KEY, JSON.stringify(familyProfile));
      return familyProfile; 
    } catch (ensureError) {
      console.error("Erreur lors de l'intégration du profil dans l'arbre après inscription:", ensureError);
      const minimalProfileForCache = {
          id: baseUser.id,
          name: `${baseUser.firstName} ${baseUser.lastName}`,
          email: baseUser.email, // Correction: utiliser baseUser.email
      }
      localStorage.setItem(USER_PROFILE_CACHE_KEY, JSON.stringify(minimalProfileForCache));
      return minimalProfileForCache;
    }
  },

  logout: () => {
    localStorage.removeItem(JWT_TOKEN_KEY);
    localStorage.removeItem(USER_PROFILE_CACHE_KEY);
    // La redirection est gérée par le router ou l'intercepteur de réponse
  },

  getCurrentUserProfile: () => {
    const stored = localStorage.getItem(USER_PROFILE_CACHE_KEY);
    try {
      return stored ? JSON.parse(stored) : null;
    } catch (e) {
      console.error("Error parsing user profile from cache", e);
      localStorage.removeItem(USER_PROFILE_CACHE_KEY);
      return null;
    }
  },

  fetchUserProfileFromServer: async () => {
    try {
      const authUserResponse = await apiClient.get('/auth/me'); // Infos d'authentification
      const authUser = authUserResponse.data;

      // Tenter de récupérer le profil familial.
      // Si 404, cela signifie qu'il n'est pas encore dans familydata.json.
      try {
        const familyProfileResponse = await apiClient.get(`/family/me`); // Utilise /family/me qui est lié au token
        const familyProfile = familyProfileResponse.data;
        localStorage.setItem(USER_PROFILE_CACHE_KEY, JSON.stringify(familyProfile));
        return familyProfile;
      } catch (familyError) {
        if (familyError.response && familyError.response.status === 404) {
          console.log("Profil familial non trouvé pour l'utilisateur authentifié, tentative de création/synchronisation...");
          const ensuredProfile = await authService.ensureUserProfileInFamilyTree({
            id: authUser.id,
            name: `${authUser.firstName} ${authUser.lastName}`,
            gmail: authUser.email,
          });
          localStorage.setItem(USER_PROFILE_CACHE_KEY, JSON.stringify(ensuredProfile));
          return ensuredProfile;
        }
        throw familyError; // Relancer d'autres erreurs liées à /family/me
      }
    } catch (error) {
      console.error("Erreur lors de la récupération du profil utilisateur depuis le serveur:", error);
      // Si l'erreur est 401 ou 403, l'intercepteur de apiClient devrait déjà gérer la déconnexion.
      // Sinon, on déconnecte manuellement ici en cas d'échec critique.
      if (!error.response || (error.response.status !== 401 && error.response.status !== 403)) {
        authService.logout(); // Déconnexion en cas d'erreur critique non gérée par l'intercepteur
      }
      return null; // Ou throw error pour que l'appelant gère.
    }
  },

  updateCurrentUserProfileInFamilyTree: async (profileDataToUpdate) => {
    if (!profileDataToUpdate.id) {
      console.error("ID de profil manquant pour la mise à jour dans l'arbre");
      throw new Error("ID de profil manquant");
    }
    try {
      // L'ID de la personne dans l'arbre est l'ID de l'utilisateur authentifié
      const response = await apiClient.put(`/family/${profileDataToUpdate.id}`, profileDataToUpdate);
      localStorage.setItem(USER_PROFILE_CACHE_KEY, JSON.stringify(response.data));
      return response.data;
    } catch (error) {
      console.error("Erreur lors de la mise à jour du profil dans l'arbre:", error);
      throw error;
    }
  },
  
  ensureUserProfileInFamilyTree: async (profileDetails) => {
    try {
      // `profileDetails` doit contenir au moins `id` (auth_uuid), `name`, `gmail`.
      // Le backend complètera avec des valeurs par défaut si nécessaire.
      const response = await apiClient.post('/family/ensure-profile', profileDetails);
      // Le cache sera mis à jour par la fonction appelante (login, register, fetchUserProfileFromServer)
      return response.data;
    } catch (error) {
      console.error("Erreur lors de ensureUserProfileInFamilyTree:", error);
      throw error;
    }
  },

  deleteAccount: async () => {
    try {
      // L'endpoint /auth/delete-account utilisera le token pour identifier l'utilisateur
      await apiClient.delete('/auth/delete-account');
      // Le logout est géré après succès dans profile.js
    } catch (error) {
      console.error("Erreur lors de la suppression du compte:", error);
      throw error;
    }
  },

  isAuthenticated: () => {
    const token = localStorage.getItem(JWT_TOKEN_KEY);
    return !!token;
  }
};// END OF FILE: src/services/authService.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/services/familyDataService.js

// frontend/src/services/familyDataService.js
import apiClient from './api';
import { authService } from './authService'; // Utilisé pour mettre à jour le cache si l'utilisateur modifie son propre profil via cette voie (moins direct)

export const familyDataService = {
  getAllFamilyData: async () => {
    try {
      const response = await apiClient.get('/family');
      return Array.isArray(response.data) ? response.data : [];
    } catch (error) {
      console.error("Failed to fetch all family data:", error);
      return [];
    }
  },

  getPersonById: async (personId) => {
    if (!personId) {
        console.warn("getPersonById: personId is undefined or null");
        return null;
    }
    try {
      const response = await apiClient.get(`/family/${personId}`);
      return response.data;
    } catch (error) {
      console.error(`Failed to fetch person with id ${personId}:`, error);
      // Si l'erreur est 404, retourner null est approprié.
      // Pour d'autres erreurs, on pourrait vouloir les relancer ou les gérer différemment.
      if (error.response && error.response.status === 404) {
        return null;
      }
      throw error; // Relancer les autres erreurs pour une gestion plus haut niveau si nécessaire
    }
  },

  updatePersonInFamilyData: async (personToUpdate) => {
    if (!personToUpdate || !personToUpdate.id) {
      console.error("Données de personne invalides ou ID manquant pour la mise à jour.");
      throw new Error("Données de personne invalides ou ID manquant.");
    }
    try {
      const response = await apiClient.put(`/family/${personToUpdate.id}`, personToUpdate);
      
      const currentUser = authService.getCurrentUserProfile();
      if (currentUser && currentUser.id === response.data.id) {
        // Si la personne mise à jour est l'utilisateur actuellement connecté,
        // son profil est mis à jour par `authService.updateCurrentUserProfileInFamilyTree`.
        // Mais si `updatePersonInFamilyData` est appelé directement pour le user (ex: modif d'un enfant qui met à jour le user comme parent),
        // il faut s'assurer que le cache du user est potentiellement mis à jour.
        // Le plus sûr est de re-fetch le profil user après des opérations qui pourraient l'affecter indirectement.
        // Pour l'instant, on suppose que si c'est le user, c'est géré par authService.
        // Si c'est un enfant mis à jour, le profil user ne change pas directement (sauf si `pids` etc.).
        // La bonne pratique serait que le composant ProfilePage re-fetch son propre profil si des opérations externes le modifient.
        // Pour le moment, on met à jour le cache ici si l'ID correspond, mais c'est une simplification.
        localStorage.setItem('userProfileCache', JSON.stringify(response.data));
      }
      return response.data;
    } catch (error) {
      console.error(`Failed to update person with id ${personToUpdate.id}:`, error);
      throw error;
    }
  },

  getPersonalFamilyData: async () => {
    try {
      // L'endpoint /family/personal retourne les données basées sur le token de l'utilisateur
      const response = await apiClient.get('/family/personal');
      return Array.isArray(response.data) ? response.data : [];
    } catch (error) {
      console.error("Failed to fetch personal family data:", error);
      return []; // Retourner un tableau vide en cas d'erreur pour éviter de casser le rendu
    }
  },

  // Helper pour retirer un enfant de la parentalité de l'utilisateur actuel
  // N'est plus explicitement nécessaire car la logique est dans le composant profile.js
  // qui appelle updatePersonInFamilyData sur l'enfant.
  // dissociateChild: async (childId, parentUserId, parentGender) => { ... }
};// END OF FILE: src/services/familyDataService.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/services/uiStateService.js

// src/services/uiStateService.js
const ALGORITHM_STEPS_KEY = 'algorithmSteps';

export const uiStateService = {
  clearAlgorithmSteps: () => {
    localStorage.setItem(ALGORITHM_STEPS_KEY, JSON.stringify([]));
  },

  addAlgorithmStep: (stepMessage) => {
    const steps = uiStateService.getAlgorithmSteps();
    steps.push(stepMessage);
    localStorage.setItem(ALGORITHM_STEPS_KEY, JSON.stringify(steps));
  },

  getAlgorithmSteps: () => {
    const stored = localStorage.getItem(ALGORITHM_STEPS_KEY);
    return stored ? JSON.parse(stored) : [];
  }
};// END OF FILE: src/services/uiStateService.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/typescript.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: src/typescript.svg

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/vite-env.d.ts

/// <reference types="vite/client" />
// END OF FILE: src/vite-env.d.ts

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/tsconfig.json

{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
// END OF FILE: tsconfig.json

