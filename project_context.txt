Project Context From: /c/Users/PC/School/RO/TP/TP1/frontend
Generated On: Mon May 26 01:34:47     2025
===============================================
Ignored Directory Patterns: .* node_modules vendor build dist target __pycache__ .next cache target venv storage
Ignored File Patterns: *.log *.jar *.pdf *.png *.jpg *.class *.sqlite *.csv project_context.txt package-lock.json yarn.lock composer.lock *.ico pnpm-lock.yaml
===============================================

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/.env

# URL de base de l'API backend
VITE_API_URL=http://localhost:5000/api// END OF FILE: .env

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/.gitignore

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Custom ignores
project_context.txt
prompter.sh
// END OF FILE: .gitignore

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/index.html

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + TS</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>
// END OF FILE: index.html

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/package.json

{
  "name": "family-tp",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.3",
    "tailwindcss": "^4.1.5",
    "typescript": "~5.7.2",
    "vite": "^6.3.1"
  },
  "dependencies": {
    "@balkangraph/familytree.js": "^1.9.45",
    "@balkangraph/orgchart.js": "^8.16.24",
    "axios": "^1.9.0",
    "cytoscape": "^3.32.0",
    "family-tp": "file:"
  }
}
// END OF FILE: package.json

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/prompter.sh

#!/bin/bash

# --- Configuration ---

# Default project path if none provided
DEFAULT_PROJECT_PATH="."
PROJECT_PATH=${1:-"$DEFAULT_PROJECT_PATH"}

# Output file name (relative to PROJECT_PATH)
OUTPUT_FILENAME="project_context.txt"

# Directories to completely ignore (won't be traversed)
EXCLUDE_DIRS_PATTERN=( \
    ".*"            # All hidden folders (.git, .vscode, .idea, .svn, etc.)
    "node_modules"
    "vendor"        # PHP Composer
    "build"
    "dist"
    "target"        # Java/Rust build outputs
    "__pycache__"   # Python cache
    ".next"         # Next.js build output
    "cache"         # General cache folders
    "target"
    "venv"
    "storage"       # Laravel storage (often contains logs, cache, etc.)
    # Add more directory names here if needed
)

# Specific file patterns to ignore within traversed directories
EXCLUDE_FILES_PATTERN=( \
    "*.log"
    "*.jar"
    "*.pdf"
    "*.png"
    "*.jpg"
    "*.class"
    "*.sqlite"
    "*.csv"
    "project_context.txt"
    # ".env*"       # Consider if you NEED .env files; uncomment if NOT needed.
    "package-lock.json"
    "yarn.lock"
    "composer.lock"
    "*.ico"
    "pnpm-lock.yaml"
    # Add more file patterns here (e.g., "*.swp", "*.bak", "*.tmp")
)

# --- Script Logic ---

# Attempt to get absolute path; exit if PROJECT_PATH is invalid early
PROJECT_PATH=$(realpath "$PROJECT_PATH" 2>/dev/null)
if [ $? -ne 0 ] || [ ! -d "$PROJECT_PATH" ]; then
    echo "Error: Invalid or non-existent project directory specified." >&2 # Error to stderr
    exit 1
fi

OUTPUT_FILE="$PROJECT_PATH/$OUTPUT_FILENAME"

# --- Safety Check: Prevent overwriting the project directory itself ---
# This is unlikely but guards against strange configurations
if [ "$PROJECT_PATH" == "$OUTPUT_FILE" ]; then
    echo "Error: Project directory path conflicts with output file name '$OUTPUT_FILENAME'." >&2
    exit 1
fi

# Delete output file silently if it exists
rm -f "$OUTPUT_FILE"

# --- Build the find command ---
# Uses arrays to construct the find command safely and avoid complex escaping issues with eval
find_args=("$PROJECT_PATH")

# Add directory prune conditions
if [ ${#EXCLUDE_DIRS_PATTERN[@]} -gt 0 ]; then
    find_args+=(\()
    first_prune=true
    for dir_pattern in "${EXCLUDE_DIRS_PATTERN[@]}"; do
        if ! $first_prune; then
            find_args+=(-o)
        fi
        find_args+=(-name "$dir_pattern" -type d)
        first_prune=false
    done
    find_args+=(\) -prune -o) # Add the prune action and the OR for the next part
fi

# Add primary find conditions (type file, exclude output file, exclude patterns)
find_args+=(\( -type f -not -path "$OUTPUT_FILE")
if [ ${#EXCLUDE_FILES_PATTERN[@]} -gt 0 ]; then
    for file_pattern in "${EXCLUDE_FILES_PATTERN[@]}"; do
        find_args+=(-not -name "$file_pattern")
    done
fi
find_args+=(-print \)) # Add the print action and close the group

# --- Execute the find command and process results ---

# Create the header in the output file
{
    echo "Project Context From: $PROJECT_PATH"
    echo "Generated On: $(date)"
    echo "==============================================="
    echo "Ignored Directory Patterns: ${EXCLUDE_DIRS_PATTERN[*]}"
    echo "Ignored File Patterns: ${EXCLUDE_FILES_PATTERN[*]}"
    echo "==============================================="
    echo ""
} > "$OUTPUT_FILE"

error_count=0
# Use find with process substitution and sorting. Avoids eval.
while IFS= read -r FILE_PATH; do
    # Calculate relative path for cleaner output
    RELATIVE_PATH="${FILE_PATH#"$PROJECT_PATH"/}"

    # Append file info and content to the output file
    {
        # echo ""
        # echo "// ==============================================="
        # echo "---> FILE: $RELATIVE_PATH"
        echo "//---> PATH: $FILE_PATH"
        # echo "// ==============================================="
        echo ""
    } >> "$OUTPUT_FILE"

    # Check if file is likely binary/non-text using 'file' command
    # -b: omit filename; check for common non-text types
    if file -b "$FILE_PATH" | grep -q -E 'binary|archive|compressed|image|font'; then
        echo "[Non-text file (e.g., binary, data, compressed) - Contents omitted]" >> "$OUTPUT_FILE"
    else
        # Append text file content, redirect cat errors to stderr
        if ! cat "$FILE_PATH" >> "$OUTPUT_FILE" 2> /dev/null; then # Hide cat errors from stdout
             # Optionally log error to the output file itself, or just count it
             echo "[Error reading file content for $RELATIVE_PATH]" >> "$OUTPUT_FILE"
             ((error_count++))
        fi
    fi

    {
        # echo ""
        echo "// END OF FILE: $RELATIVE_PATH"
        echo ""
    } >> "$OUTPUT_FILE"

done < <(find "${find_args[@]}" | sort) # Execute find command using safe array expansion

# Optionally report errors to stderr if any occurred
if [ $error_count -gt 0 ]; then
    echo "Warning: Encountered $error_count errors reading file contents during context generation." >&2
    # Exit with a non-zero status to indicate partial success/warning
    exit 1
fi

# Exit silently on success
exit 0
// END OF FILE: prompter.sh

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/public/data/dummydata.json

[
  {
    "id": "d4c3e1a5-0b1e-4f8a-9a9c-0d2b3e4f5a6b",
    "name": "Maurice Dupont",
    "mid": null,
    "fid": null,
    "pids": [
      "a1b2c3d4-e5f6-7890-1234-567890abcdef"
    ],
    "gender": "male",
    "birthYear": 1935,
    "deathYear": 2010,
    "img": "/assets/avatars/grandfather.svg",
    "gmail": "maurice.dupont@gmail.com"
  },
  {
    "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    "name": "Jeanne Martin",
    "mid": null,
    "fid": null,
    "pids": [
      "d4c3e1a5-0b1e-4f8a-9a9c-0d2b3e4f5a6b"
    ],
    "gender": "female",
    "birthYear": 1938,
    "deathYear": 2015,
    "img": "/assets/avatars/grandmother.svg",
    "gmail": "jeanne.martin@gmail.com"
  },
  {
    "id": "b8c9d0e1-f2a3-b4c5-d6e7-f8g9h0i1j2k3",
    "name": "Bernard Dupont",
    "mid": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    "fid": "d4c3e1a5-0b1e-4f8a-9a9c-0d2b3e4f5a6b",
    "pids": [
      "c1d2e3f4-g5h6-i7j8-k9l0-m1n2o3p4q5r6"
    ],
    "gender": "male",
    "birthYear": 1960,
    "deathYear": null,
    "img": "/assets/avatars/father.svg",
    "gmail": "bernard.dupont@gmail.com"
  },
  {
    "id": "c1d2e3f4-g5h6-i7j8-k9l0-m1n2o3p4q5r6",
    "name": "Sophie Lefèvre",
    "mid": null,
    "fid": null,
    "pids": [
      "b8c9d0e1-f2a3-b4c5-d6e7-f8g9h0i1j2k3"
    ],
    "gender": "female",
    "birthYear": 1962,
    "deathYear": null,
    "img": "/assets/avatars/mother.svg",
    "gmail": "sophie.lefevre@gmail.com"
  },
  {
    "id": "e5f6g7h8-i9j0-k1l2-m3n4-o5p6q7r8s9t0",
    "name": "Pierre Lambert",
    "mid": null,
    "fid": null,
    "pids": [
      "f1g2h3i4-j5k6-l7m8-n9o0-p1q2r3s4t5u6"
    ],
    "gender": "male",
    "birthYear": 1958,
    "deathYear": null,
    "img": "/assets/avatars/father.svg",
    "gmail": "pierre.lambert@gmail.com"
  },
  {
    "id": "f1g2h3i4-j5k6-l7m8-n9o0-p1q2r3s4t5u6",
    "name": "Catherine Dupont",
    "mid": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    "fid": "d4c3e1a5-0b1e-4f8a-9a9c-0d2b3e4f5a6b",
    "pids": [
      "e5f6g7h8-i9j0-k1l2-m3n4-o5p6q7r8s9t0"
    ],
    "gender": "female",
    "birthYear": 1963,
    "deathYear": null,
    "img": "/assets/avatars/mother.svg",
    "gmail": "catherine.dupont@gmail.com"
  },
  {
    "id": "g7h8i9j0-k1l2-m3n4-o5p6-q7r8s9t0u1v2",
    "name": "René Moreau",
    "mid": null,
    "fid": null,
    "pids": [
      "h1i2j3k4-l5m6-n7o8-p9q0-r1s2t3u4v5w6"
    ],
    "gender": "male",
    "birthYear": 1965,
    "deathYear": null,
    "img": "/assets/avatars/father.svg",
    "gmail": "rene.moreau@gmail.com"
  },
  {
    "id": "h1i2j3k4-l5m6-n7o8-p9q0-r1s2t3u4v5w6",
    "name": "Marie Dupont",
    "mid": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    "fid": "d4c3e1a5-0b1e-4f8a-9a9c-0d2b3e4f5a6b",
    "pids": [
      "g7h8i9j0-k1l2-m3n4-o5p6-q7r8s9t0u1v2"
    ],
    "gender": "female",
    "birthYear": 1965,
    "deathYear": null,
    "img": "/assets/avatars/mother.svg",
    "gmail": "marie.dupont@gmail.com"
  },
  {
    "id": "i7j8k9l0-m1n2-o3p4-q5r6-s7t8u9v0w1x2",
    "name": "Thomas Dupont",
    "mid": "c1d2e3f4-g5h6-i7j8-k9l0-m1n2o3p4q5r6",
    "fid": "b8c9d0e1-f2a3-b4c5-d6e7-f8g9h0i1j2k3",
    "pids": [
      "j1k2l3m4-n5o6-p7q8-r9s0-t1u2v3w4x5y6"
    ],
    "gender": "male",
    "birthYear": 1985,
    "deathYear": null,
    "img": "/assets/avatars/son.svg",
    "gmail": "thomas.dupont@gmail.com"
  },
  {
    "id": "j1k2l3m4-n5o6-p7q8-r9s0-t1u2v3w4x5y6",
    "name": "Laura Blanc",
    "mid": null,
    "fid": null,
    "pids": [
      "i7j8k9l0-m1n2-o3p4-q5r6-s7t8u9v0w1x2"
    ],
    "gender": "female",
    "birthYear": 1988,
    "deathYear": null,
    "img": "/assets/avatars/wife.svg",
    "gmail": "laura.blanc@gmail.com"
  },
  {
    "id": "k7l8m9n0-o1p2-q3r4-s5t6-u7v8w9x0y1z2",
    "name": "Emilie Dupont",
    "mid": "c1d2e3f4-g5h6-i7j8-k9l0-m1n2o3p4q5r6",
    "fid": "b8c9d0e1-f2a3-b4c5-d6e7-f8g9h0i1j2k3",
    "pids": [
      "l1m2n3o4-p5q6-r7s8-t9u0-v1w2x3y4z5a6"
    ],
    "gender": "female",
    "birthYear": 1990,
    "deathYear": null,
    "img": "/assets/avatars/daughter.svg",
    "gmail": "emilie.dupont@gmail.com"
  },
  {
    "id": "l1m2n3o4-p5q6-r7s8-t9u0-v1w2x3y4z5a6",
    "name": "Julien Petit",
    "mid": null,
    "fid": null,
    "pids": [
      "k7l8m9n0-o1p2-q3r4-s5t6-u7v8w9x0y1z2"
    ],
    "gender": "male",
    "birthYear": 1987,
    "deathYear": null,
    "img": "/assets/avatars/husband.svg",
    "gmail": "julien.petit@gmail.com"
  },
  {
    "id": "m7n8o9p0-q1r2-s3t4-u5v6-w7x8y9z0a1b2",
    "name": "Marc Lambert",
    "mid": "f1g2h3i4-j5k6-l7m8-n9o0-p1q2r3s4t5u6",
    "fid": "e5f6g7h8-i9j0-k1l2-m3n4-o5p6q7r8s9t0",
    "pids": [],
    "gender": "male",
    "birthYear": 1988,
    "deathYear": null,
    "img": "/assets/avatars/son.svg",
    "gmail": "marc.lambert@gmail.com"
  },
  {
    "id": "n1o2p3q4-r5s6-t7u8-v9w0-x1y2z3a4b5c6",
    "name": "Claire Lambert",
    "mid": "f1g2h3i4-j5k6-l7m8-n9o0-p1q2r3s4t5u6",
    "fid": "e5f6g7h8-i9j0-k1l2-m3n4-o5p6q7r8s9t0",
    "pids": [],
    "gender": "female",
    "birthYear": 1992,
    "deathYear": null,
    "img": "/assets/avatars/daughter.svg",
    "gmail": "claire.lambert@gmail.com"
  },
  {
    "id": "o7p8q9r0-s1t2-u3v4-w5x6-y7z8a9b0c1d2",
    "name": "Pascal Moreau",
    "mid": "h1i2j3k4-l5m6-n7o8-p9q0-r1s2t3u4v5w6",
    "fid": "g7h8i9j0-k1l2-m3n4-o5p6-q7r8s9t0u1v2",
    "pids": [
      "s1t2u3v4-w5x6-y7z8-a9b0-c1d2e3f4g5h6"
    ],
    "gender": "male",
    "birthYear": 1990,
    "deathYear": null,
    "img": "/assets/avatars/son.svg",
    "gmail": "pascal.moreau@gmail.com"
  },
  {
    "id": "p1q2r3s4-t5u6-v7w8-x9y0-z1a2b3c4d5e6",
    "name": "Alice Moreau",
    "mid": "h1i2j3k4-l5m6-n7o8-p9q0-r1s2t3u4v5w6",
    "fid": "g7h8i9j0-k1l2-m3n4-o5p6-q7r8s9t0u1v2",
    "pids": [],
    "gender": "female",
    "birthYear": 1993,
    "deathYear": null,
    "img": "/assets/avatars/daughter.svg",
    "gmail": "alice.moreau@gmail.com"
  },
  {
    "id": "q7r8s9t0-u1v2-w3x4-y5z6-a7b8c9d0e1f2",
    "name": "Léo Dupont",
    "mid": "j1k2l3m4-n5o6-p7q8-r9s0-t1u2v3w4x5y6",
    "fid": "i7j8k9l0-m1n2-o3p4-q5r6-s7t8u9v0w1x2",
    "pids": [],
    "gender": "male",
    "birthYear": 2015,
    "deathYear": null,
    "img": "/assets/avatars/grandson.svg",
    "gmail": "leo.dupont@gmail.com"
  },
  {
    "id": "r1s2t3u4-v5w6-x7y8-z9a0-b1c2d3e4f5g6",
    "name": "Emma Dupont",
    "mid": "j1k2l3m4-n5o6-p7q8-r9s0-t1u2v3w4x5y6",
    "fid": "i7j8k9l0-m1n2-o3p4-q5r6-s7t8u9v0w1x2",
    "pids": [],
    "gender": "female",
    "birthYear": 2018,
    "deathYear": null,
    "img": "/assets/avatars/granddaughter.svg",
    "gmail": "emma.dupont@gmail.com"
  },
  {
    "id": "s7t8u9v0-w1x2-y3z4-a5b6-c7d8e9f0g1h2",
    "name": "Lucas Petit",
    "mid": "k7l8m9n0-o1p2-q3r4-s5t6-u7v8w9x0y1z2",
    "fid": "l1m2n3o4-p5q6-r7s8-t9u0-v1w2x3y4z5a6",
    "pids": [],
    "gender": "male",
    "birthYear": 2019,
    "deathYear": null,
    "img": "/assets/avatars/grandson.svg",
    "gmail": "lucas.petit@gmail.com"
  },
  {
    "id": "t1u2v3w4-x5y6-z7a8-b9c0-d1e2f3g4h5i6",
    "name": "Louise Petit",
    "mid": "k7l8m9n0-o1p2-q3r4-s5t6-u7v8w9x0y1z2",
    "fid": "l1m2n3o4-p5q6-r7s8-t9u0-v1w2x3y4z5a6",
    "pids": [],
    "gender": "female",
    "birthYear": 2021,
    "deathYear": null,
    "img": "/assets/avatars/granddaughter.svg",
    "gmail": "louise.petit@gmail.com"
  },
  {
    "id": "u7v8w9x0-y1z2-a3b4-c5d6-e7f8g9h0i1j2",
    "name": "Richard Roy",
    "mid": null,
    "fid": null,
    "pids": [
      "v1w2x3y4-z5a6-b7c8-d9e0-f1g2h3i4j5k6"
    ],
    "gender": "male",
    "birthYear": 1940,
    "deathYear": 2020,
    "img": "/assets/avatars/grandfather.svg",
    "gmail": "richard.roy@gmail.com"
  },
  {
    "id": "v1w2x3y4-z5a6-b7c8-d9e0-f1g2h3i4j5k6",
    "name": "Hélène Durand",
    "mid": null,
    "fid": null,
    "pids": [
      "u7v8w9x0-y1z2-a3b4-c5d6-e7f8g9h0i1j2"
    ],
    "gender": "female",
    "birthYear": 1942,
    "deathYear": null,
    "img": "/assets/avatars/grandmother.svg",
    "gmail": "helene.durand@gmail.com"
  },
  {
    "id": "w7x8y9z0-a1b2-c3d4-e5f6-g7h8i9j0k1l2",
    "name": "Philippe Roy",
    "mid": "v1w2x3y4-z5a6-b7c8-d9e0-f1g2h3i4j5k6",
    "fid": "u7v8w9x0-y1z2-a3b4-c5d6-e7f8g9h0i1j2",
    "pids": [
      "x1y2z3a4-b5c6-d7e8-f9g0-h1i2j3k4l5m6"
    ],
    "gender": "male",
    "birthYear": 1964,
    "deathYear": null,
    "img": "/assets/avatars/father.svg",
    "gmail": "philippe.roy@gmail.com"
  },
  {
    "id": "x1y2z3a4-b5c6-d7e8-f9g0-h1i2j3k4l5m6",
    "name": "Nathalie Simon",
    "mid": null,
    "fid": null,
    "pids": [
      "w7x8y9z0-a1b2-c3d4-e5f6-g7h8i9j0k1l2"
    ],
    "gender": "female",
    "birthYear": 1967,
    "deathYear": null,
    "img": "/assets/avatars/mother.svg",
    "gmail": "nathalie.simon@gmail.com"
  },
  {
    "id": "s1t2u3v4-w5x6-y7z8-a9b0-c1d2e3f4g5h6",
    "name": "Isabelle Roy",
    "mid": "v1w2x3y4-z5a6-b7c8-d9e0-f1g2h3i4j5k6",
    "fid": "u7v8w9x0-y1z2-a3b4-c5d6-e7f8g9h0i1j2",
    "pids": [
      "o7p8q9r0-s1t2-u3v4-w5x6-y7z8a9b0c1d2"
    ],
    "gender": "female",
    "birthYear": 1968,
    "deathYear": null,
    "img": "/assets/avatars/mother.svg",
    "gmail": "isabelle.roy@gmail.com"
  },
  {
    "id": "y7z8a9b0-c1d2-e3f4-g5h6-i7j8k9l0m1n2",
    "name": "Antoine Roy",
    "mid": "x1y2z3a4-b5c6-d7e8-f9g0-h1i2j3k4l5m6",
    "fid": "w7x8y9z0-a1b2-c3d4-e5f6-g7h8i9j0k1l2",
    "pids": [],
    "gender": "male",
    "birthYear": 1995,
    "deathYear": null,
    "img": "/assets/avatars/son.svg",
    "gmail": "antoine.roy@gmail.com"
  },
  {
    "id": "z1a2b3c4-d5e6-f7g8-h9i0-j1k2l3m4n5o6",
    "name": "Camille Roy",
    "mid": "x1y2z3a4-b5c6-d7e8-f9g0-h1i2j3k4l5m6",
    "fid": "w7x8y9z0-a1b2-c3d4-e5f6-g7h8i9j0k1l2",
    "pids": [],
    "gender": "female",
    "birthYear": 1998,
    "deathYear": null,
    "img": "/assets/avatars/daughter.svg",
    "gmail": "camille.roy@gmail.com"
  },
  {
    "id": "a7b8c9d0-e1f2-g3h4-i5j6-k7l8m9n0o1p2",
    "name": "Théo Moreau",
    "mid": "s1t2u3v4-w5x6-y7z8-a9b0-c1d2e3f4g5h6",
    "fid": "o7p8q9r0-s1t2-u3v4-w5x6-y7z8a9b0c1d2",
    "pids": [],
    "gender": "male",
    "birthYear": 2020,
    "deathYear": null,
    "img": "/assets/avatars/grandson.svg",
    "gmail": "theo.moreau@gmail.com"
  }
]// END OF FILE: public/data/dummydata.json

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/public/vite.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/vite.svg

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/components/leftsidebar.js

export function renderLeftSidebar() {
  return `
    <div id="left-sidebar">
      <h3 class="sidebar-title">Recherche</h3>
      <ul class="sidebar-menu">
        <li>
          <button id="dijkstra-button" class="sidebar-button">Dijkstra</button>
          <div id="dijkstra-form" class="search-form" style="display: none;">
            <h3 class="sidebar-title">Dijkstra</h3>
            <label>Personne de départ :</label>
            <select id="start-person"></select>
            <label>Personne de fin :</label>
            <select id="end-person"></select>
            <button id="run-dijkstra">Lancer Dijkstra</button>
          </div>
        </li>
        <li>
          <button id="bellman-ford-button" class="sidebar-button">Bellman-Ford</button>
          <div id="bellman-ford-form" class="search-form" style="display: none;">
            <h3 class="sidebar-title">Bellman-Ford</h3>
            <label>Personne de départ :</label>
            <select id="bellman-ford-start-person"></select>
            <label>Personne de fin :</label>
            <select id="bellman-ford-end-person"></select>
            <button id="run-bellman-ford">Lancer Bellman-Ford</button>
          </div>
        </li>
      </ul>
      <h3 class="sidebar-title" style="margin-top: 30px;">Sous-famille</h3>
      <ul class="sidebar-menu">
        <li>
          <button id="prim-button" class="sidebar-button">Prim</button>
          <div id="prim-form" class="search-form" style="display: none;">
            <h3 class="sidebar-title">Prim</h3>
            <label>Personne de départ :</label>
            <select id="prim-start-person"></select>
            <button id="run-prim">Lancer Prim</button>
          </div>
        </li>
        <li>
          <button id="kruskal-button" class="sidebar-button">Kruskal</button>
          <div id="kruskal-form" class="search-form" style="display: none;">
            <h3 class="sidebar-title">Kruskal</h3>
            <label>Personne de départ :</label>
            <select id="kruskal-start-person"></select>
            <button id="run-kruskal">Lancer Kruskal</button>
          </div>
        </li>
      </ul>
    </div>
  `;
}
// END OF FILE: src/components/leftsidebar.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/components/login.js

// frontend/src/components/login.js (ou LoginPage.js)
import { authService } from '../services/authService';
// import { familyDataService } from '../services/familyDataService'; // Moins direct ici

export function renderLoginPage() {
  return `
    <div class="container-card" style="max-width: 500px; margin: 40px auto;">
      <h2>Connexion</h2>
      <form id="login-form">
        <label for="email">Email :</label>
        <input type="email" id="email" name="email" required />

        <label for="password">Mot de passe :</label>
        <input type="password" id="password" name="password" required />

        <button type="submit">Se connecter</button>
        <p style="text-align: center; margin-top: 15px;">
          Pas encore de compte ? <a href="/register" data-link>S'inscrire</a>
        </p>
      </form>
      <div id="login-error" style="color: red; margin-top: 10px;"></div>
    </div>
  `;
}

export function setupLoginFormHandler() {
  const form = document.getElementById('login-form');
  const errorDiv = document.getElementById('login-error');
  if (!form) return;

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    errorDiv.textContent = ''; // Clear previous errors
    const formData = new FormData(e.target);
    const email = formData.get('email');
    const password = formData.get('password');

    try {
      const userProfileFromTree = await authService.login(email, password); // authService.login gère maintenant la synchro avec l'arbre
      if (userProfileFromTree) {
        window.location.href = '/'; // Ou la page de profil /dashboard
      } else {
        // Ce cas ne devrait pas arriver si authService.login lève une erreur en cas d'échec
        errorDiv.textContent = "Échec de la connexion. Profil non chargé.";
      }
    } catch (error) {
      console.error("Login failed:", error);
      errorDiv.textContent = error.response?.data?.message || "Échec de la connexion. Vérifiez vos identifiants.";
    }
  });
}// END OF FILE: src/components/login.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/components/maincontent.js

//---> PATH: src/components/maincontent.js
export function renderMainContent() {
  return `
    <div id="main-content-area">
      <div class="view-controls">
        <div class="view-buttons">
          <button class="view-button active-view-btn" data-view="tree">Arbre Généalogique</button>
          <button class="view-button" data-view="graph">Graphe des Relations</button>
        </div>
        <div class="scope-buttons">
          <button class="scope-button active-scope-btn" data-scope="full">Voir Toute la Famille</button>
          <button class="scope-button" data-scope="personal">Voir Ma Famille Proche</button>
        </div>
      </div>
      <div class="container-card" id="tree-view">
        <h2>Arbre Généalogique</h2>
        <div id="family-tree-container"></div>
      </div>
      <div class="container-card" id="graph-view" style="display: none;">
        <h2>Graphe des Relations</h2>
        <div id="graph-container"></div>
      </div>
    </div>
  `;
}
// END OF FILE: src/components/maincontent.js// END OF FILE: src/components/maincontent.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/components/navbar.js

// frontend/src/components/navbar.js
import { authService } from '../services/authService';

export function renderNavbar() {
  // Utiliser le profil mis en cache. Le router se charge de le rafraîchir au besoin.
  const userProfile = authService.getCurrentUserProfile(); 

  let userSectionHtml = '<a href="/login" data-link>Connexion</a>'; // Par défaut
  
  if (userProfile && userProfile.id) { // Vérifier si l'utilisateur est "connecté" et a un profil
    userSectionHtml = `
      <a href="/profile" data-link class="user-info">
        <img src="${userProfile.img || '/assets/avatars/default.svg'}" alt="Photo de ${userProfile.name || 'Utilisateur'}" class="user-avatar" />
        <span>${userProfile.name || 'Mon Profil'}</span>
      </a>
    `;
  }

  return `
    <div id="navbar">
      <h1>Arbre Généalogique Familial</h1>
      <div id="navbar-menu">
        <a href="/" data-link>Accueil</a>
        ${userSectionHtml}
      </div>
    </div>
  `;
}// END OF FILE: src/components/navbar.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/components/profile.js

// src/components/profile.js
import { authService } from '../services/authService';
import { familyDataService } from '../services/familyDataService';

// Helper pour peupler les menus déroulants des relations
// `data` est la liste complète des personnes (FamilyPerson[])
// `currentValue` est l'ID (UUID string) actuellement sélectionné pour ce champ
// `excludeIds` est un tableau d'IDs (UUID strings) à exclure des options (ex: soi-même)
async function populateRelationSelect(selectElementId, data, currentValue, excludeIds = [], filterGender = null) {
  const selectElement = document.getElementById(selectElementId);
  if (!selectElement) return;

  selectElement.innerHTML = '<option value="">-- Aucun(e) --</option>'; // Option pour ne rien sélectionner

  let filteredData = data;
  if (filterGender) {
    filteredData = data.filter(p => p.gender === filterGender);
  }

  filteredData.forEach(person => {
    if (excludeIds.includes(person.id)) return;

    const option = document.createElement('option');
    option.value = person.id; // UUID
    option.textContent = `${person.name} (${person.birthYear || 'N/A'})`;
    if (person.id === currentValue) {
      option.selected = true;
    }
    selectElement.appendChild(option);
  });
}

// Helper pour gérer les sélections multiples (pour pids)
function setupPidsSelect(selectElementId, allPeopleData, currentPids, excludeIds = []) {
    const selectElement = document.getElementById(selectElementId);
    if (!selectElement) return;

    selectElement.innerHTML = ''; // Clear existing options

    allPeopleData.forEach(person => {
        if (excludeIds.includes(person.id)) return;

        const option = document.createElement('option');
        option.value = person.id;
        option.textContent = `${person.name} (${person.birthYear || 'N/A'})`;
        if (currentPids.includes(person.id)) {
            option.selected = true;
        }
        selectElement.appendChild(option);
    });
    // Ici, tu pourrais initialiser une librairie de 'select multiple' si tu en utilises une (ex: Select2, Choices.js)
    // Pour un select multiple HTML standard, l'attribut `multiple` doit être sur la balise <select>.
}


export function renderProfilePage() {
  // Essayer de charger le profil frais, sinon utiliser le cache.
  // Cette logique sera dans setupProfileFormHandler pour le chargement initial.
  const user = authService.getCurrentUserProfile() || {
    id: '', name: '', fid: null, mid: null, pids: [], gender: 'unknown',
    birthYear: '', img: '/assets/avatars/default.svg', gmail: ''
  };

  return `
    <div class="container-card">
      <div class="profile-header">
        <h2>Votre Profil</h2>
        <button id="logout-button" class="logout-button">Déconnexion</button>
      </div>
      <form id="profile-form">
        <div style="grid-column: 1 / -1; text-align: center;">
            <img src="${user.img}" alt="Photo de profil" id="profile-image-preview" style="max-width: 150px; height: 150px; border-radius: 50%; margin-bottom: 15px; object-fit: cover; border: 3px solid #4299e1;" />
        </div>

        <label for="profile-name">Nom complet :</label>
        <input type="text" id="profile-name" name="name" value="${user.name || ''}" required />

        <label for="profile-birthYear">Année de naissance :</label>
        <input type="number" id="profile-birthYear" name="birthYear" value="${user.birthYear || ''}" min="1800" max="${new Date().getFullYear()}" />

        <label for="profile-gmail">Email (associé à l'arbre) :</label>
        <input type="email" id="profile-gmail" name="gmail" value="${user.gmail || ''}" pattern=".+@.+\\..+" />

        <label for="profile-gender">Genre :</label>
        <select id="profile-gender" name="gender" required>
          <option value="unknown" ${user.gender === 'unknown' ? 'selected' : ''}>Non spécifié</option>
          <option value="male" ${user.gender === 'male' ? 'selected' : ''}>Homme</option>
          <option value="female" ${user.gender === 'female' ? 'selected' : ''}>Femme</option>
        </select>

        <label for="profile-imgFile">Changer la photo (fichier) :</label>
        <input type="file" id="profile-imgFile" name="imgFile" accept="image/*" />
        
        <label for="profile-imgUrl">Changer la photo (URL) :</label>
        <input type="url" id="profile-imgUrl" name="imgUrl" placeholder="Ou collez une URL d'image" value="${(user.img && user.img.startsWith('http')) ? user.img : ''}"/>

        <hr style="grid-column: 1 / -1; margin: 20px 0; border-color: #e2e8f0;"/>
        <h3 style="grid-column: 1 / -1; color: #2d3748; font-weight:600;">Relations Familiales</h3>

        <label for="profile-fid">Père :</label>
        <select id="profile-fid" name="fid"></select>

        <label for="profile-mid">Mère :</label>
        <select id="profile-mid" name="mid"></select>

        <label for="profile-pids">Conjoint(s) :</label>
        <select id="profile-pids" name="pids" multiple style="min-height: 100px;"></select>
        <small style="grid-column: 1 / -1; text-align:center;">Maintenez Ctrl (ou Cmd sur Mac) pour sélectionner plusieurs conjoints.</small>


        <button type="submit" style="grid-column: 1 / -1;">Mettre à jour le profil</button>
      </form>
      <div id="profile-message" style="margin-top: 15px; text-align: center;"></div>
    </div>
  `;
}

export async function setupProfileFormHandler() {
  const form = document.getElementById('profile-form');
  const messageDiv = document.getElementById('profile-message');
  if (!form) return;

  let currentUserProfile = authService.getCurrentUserProfile(); // Depuis le cache
  // Essayer de charger le profil frais du serveur
  try {
    messageDiv.textContent = "Chargement du profil...";
    const freshProfile = await authService.fetchUserProfileFromServer();
    if (freshProfile) {
      currentUserProfile = freshProfile;
    }
    messageDiv.textContent = "";
  } catch (error) {
    console.error("Erreur au chargement du profil frais:", error);
    messageDiv.textContent = "Erreur au chargement du profil. Certaines données peuvent être obsolètes.";
    if (!currentUserProfile) { // Si même le cache est vide (improbable après login)
        window.location.href = '/login'; // Rediriger si pas de profil du tout
        return;
    }
  }
  
  // Pré-remplir le formulaire avec les données du profil chargé
  document.getElementById('profile-name').value = currentUserProfile.name || '';
  document.getElementById('profile-birthYear').value = currentUserProfile.birthYear || '';
  document.getElementById('profile-gmail').value = currentUserProfile.gmail || '';
  document.getElementById('profile-gender').value = currentUserProfile.gender || 'unknown';
  document.getElementById('profile-image-preview').src = currentUserProfile.img || '/assets/avatars/default.svg';
  if (currentUserProfile.img && currentUserProfile.img.startsWith('http')) {
      document.getElementById('profile-imgUrl').value = currentUserProfile.img;
  }


  // Charger toutes les personnes pour les menus déroulants
  let allPeople = [];
  try {
    allPeople = await familyDataService.getAllFamilyData();
  } catch (error) {
    console.error("Impossible de charger la liste des personnes pour les relations:", error);
    messageDiv.textContent = "Erreur: Impossible de charger les options de relations.";
  }

  // Peupler les selects pour les relations
  // Exclure l'utilisateur lui-même des options pour père, mère, conjoint.
  const selfId = [currentUserProfile.id];
  await populateRelationSelect('profile-fid', allPeople, currentUserProfile.fid, selfId, 'male');
  await populateRelationSelect('profile-mid', allPeople, currentUserProfile.mid, selfId, 'female');
  setupPidsSelect('profile-pids', allPeople, currentUserProfile.pids || [], selfId);


  const imgFileInput = document.getElementById('profile-imgFile');
  const imgPreview = document.getElementById('profile-image-preview');
  imgFileInput.addEventListener('change', (event) => {
      const file = event.target.files[0];
      if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
              imgPreview.src = e.target.result;
              document.getElementById('profile-imgUrl').value = ''; // Effacer l'URL si un fichier est choisi
          }
          reader.readAsDataURL(file);
      }
  });
   document.getElementById('profile-imgUrl').addEventListener('input', (event) => {
        const url = event.target.value;
        if (url) {
            imgPreview.src = url; // Met à jour l'aperçu dynamiquement
            if (imgFileInput.value) imgFileInput.value = ''; // Effacer le fichier si une URL est entrée
        } else if (!imgFileInput.files[0]) { // Si l'URL est effacée et pas de fichier
            imgPreview.src = currentUserProfile.img || '/assets/avatars/default.svg'; // Remettre l'image actuelle ou défaut
        }
    });


  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    messageDiv.textContent = "Mise à jour en cours...";
    const formData = new FormData(form);
    
    const name = formData.get('name');
    const birthYear = formData.get('birthYear') ? parseInt(formData.get('birthYear'), 10) : undefined;
    const gmail = formData.get('gmail');
    const gender = formData.get('gender');
    
    const fid = formData.get('fid') || null; // Sera l'UUID string ou null
    const mid = formData.get('mid') || null; // Sera l'UUID string ou null
    
    // Pour un select multiple, get() ne retourne que la première. Il faut getAll().
    const pids = formData.getAll('pids'); // Array d'UUIDs strings

    let imgData = currentUserProfile.img || '/assets/avatars/default.svg'; // Conserver l'image actuelle par défaut
    const imgFile = formData.get('imgFile');
    const imgUrl = formData.get('imgUrl');

    if (imgFile && imgFile.size > 0) {
      imgData = await toBase64(imgFile);
    } else if (imgUrl && imgUrl.trim() !== '') {
      imgData = imgUrl.trim();
    }

    const updatedProfileData = {
      ...currentUserProfile, // Base avec ID, et autres champs non modifiables directement
      name,
      birthYear,
      gmail,
      gender,
      img: imgData,
      fid,
      mid,
      pids,
    };

    try {
      const savedProfile = await authService.updateCurrentUserProfileInFamilyTree(updatedProfileData);
      currentUserProfile = savedProfile; // Mettre à jour la variable locale avec la réponse du serveur
      messageDiv.textContent = 'Profil mis à jour avec succès !';
      messageDiv.style.color = 'green';
      // Optionnel: re-remplir le formulaire avec `savedProfile` si le backend a modifié des choses
      // ou simplement faire confiance que `currentUserProfile` est maintenant à jour.
    } catch (error) {
      console.error("Profile update failed:", error);
      messageDiv.textContent = error.response?.data?.message || 'Erreur lors de la mise à jour du profil.';
      messageDiv.style.color = 'red';
    }
  });

  const logoutButton = document.getElementById('logout-button');
  if (logoutButton) {
    logoutButton.addEventListener('click', () => {
      authService.logout();
      window.location.href = '/login'; // Rediriger vers la page de connexion
    });
  }
}

function toBase64(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result); // Retourne la Data URL complète
    reader.onerror = (error) => reject(error);
  });
}// END OF FILE: src/components/profile.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/components/register.js

// frontend/src/components/register.js
import { authService } from '../services/authService';

export function renderRegisterPage() {
  return `
    <div class="container-card" style="max-width: 500px; margin: 40px auto;">
      <h2>Inscription</h2>
      <form id="register-form">
        <label for="firstName">Prénom :</label>
        <input type="text" id="firstName" name="firstName" required />

        <label for="lastName">Nom :</label>
        <input type="text" id="lastName" name="lastName" required />
        
        <label for="email">Email :</label>
        <input type="email" id="email" name="email" required />

        <label for="password">Mot de passe :</label>
        <input type="password" id="password" name="password" required minlength="6" />

        <label for="confirmPassword">Confirmer le mot de passe :</label>
        <input type="password" id="confirmPassword" name="confirmPassword" required />

        <button type="submit">S'inscrire</button>
        <p style="text-align: center; margin-top: 15px;">
          Déjà un compte ? <a href="/login" data-link>Se connecter</a>
        </p>
      </form>
      <div id="register-error" style="color: red; margin-top: 10px;"></div>
    </div>
  `;
}

export function setupRegisterFormHandler() {
  const form = document.getElementById('register-form');
  const errorDiv = document.getElementById('register-error');
  if (!form) return;

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    errorDiv.textContent = '';
    const formData = new FormData(e.target);
    const firstName = formData.get('firstName');
    const lastName = formData.get('lastName');
    const email = formData.get('email');
    const password = formData.get('password');
    const confirmPassword = formData.get('confirmPassword');

    if (password !== confirmPassword) {
      errorDiv.textContent = "Les mots de passe ne correspondent pas.";
      return;
    }

    try {
      await authService.register({ email, password, firstName, lastName });
      // authService.register gère la création du profil dans l'arbre.
      window.location.href = '/'; // Ou /profile pour compléter les infos
    } catch (error) {
      console.error("Registration failed:", error);
      errorDiv.textContent = error.response?.data?.message || "Échec de l'inscription.";
    }
  });
}// END OF FILE: src/components/register.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/components/rightsidebar.js

// frontend/src/components/rightsidebar.js
import { uiStateService } from '../services/uiStateService';

export function renderRightSidebar() {
  const algorithmSteps = uiStateService.getAlgorithmSteps();

  let stepsHtml = '';
  if (algorithmSteps.length > 0) {
    stepsHtml = algorithmSteps.map((step, index) =>
      `<li>${index + 1}. ${step}</li>`
    ).join('');
  } else {
    stepsHtml = '<li>Aucune étape d\'algorithme à afficher. Sélectionnez un algorithme et des nœuds.</li>';
  }

  // Ajout d'un conteneur pour les détails de la personne sélectionnée dans l'arbre
  return `
    <div id="right-sidebar">
      <div class="info-card" style="margin-bottom: 20px; padding: 15px; background-color: #f9f9f9; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <h4>Détails de la Personne</h4>
        <p>Cliquez sur un nœud dans l'arbre généalogique pour voir les détails ici.</p>
      </div>
      <h3 class="sidebar-title">Processus d'Algorithme</h3>
      <ul class="process-steps" style="max-height: 300px; overflow-y: auto; padding-left: 20px;">
        ${stepsHtml}
      </ul>
    </div>
  `;
}// END OF FILE: src/components/rightsidebar.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/counter.ts

export function setupCounter(element: HTMLButtonElement) {
    let counter = 0
    const setCounter = (count: number) => {
      counter = count
      element.innerHTML = `count is ${counter}`
    }
    element.addEventListener('click', () => setCounter(counter + 1))
    setCounter(0)
  }// END OF FILE: src/counter.ts

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/css/auth.css

// END OF FILE: src/css/auth.css

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/css/family-tree.css

// END OF FILE: src/css/family-tree.css

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/css/style.css

/* Réinitialisation et styles globaux */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
    color: #2d3748;
    height: 100vh;
    overflow: hidden;
    font-size: 16px;
    line-height: 1.6;
}

/* Structure principale */
#app {
    display: grid;
    grid-template-areas:
      "navbar navbar navbar"
      "left-sidebar main-content right-sidebar";
    grid-template-columns: 280px 1fr 280px;
    grid-template-rows: 70px 1fr;
    height: 100vh;
}

/* Navigation bar */
#navbar {
    grid-area: navbar;
    background: linear-gradient(90deg, #1a365d 0%, #2d5a88 100%);
    color: white;
    display: flex;
    align-items: center;
    padding: 0 25px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    z-index: 100;
}

#navbar h1 {
    font-size: 1.8rem;
    font-weight: 600;
    letter-spacing: 0.5px;
}

#navbar-menu {
    display: flex;
    margin-left: auto;
    gap: 8px;
}

#navbar-menu a {
    color: white;
    text-decoration: none;
    padding: 10px 18px;
    font-size: 1rem;
    border-radius: 8px;
    transition: all 0.3s ease;
}

#navbar-menu a:hover {
    background-color: rgba(255, 255, 255, 0.15);
    transform: translateY(-2px);
}

/* Sidebars */
#left-sidebar {
    grid-area: left-sidebar;
    background: linear-gradient(180deg, #1e293b 0%, #0f172a 100%);
    color: #ffffff;
    padding: 25px 20px;
    overflow-y: auto;
    box-shadow: 2px 0 12px rgba(0, 0, 0, 0.1);
}

#right-sidebar {
    grid-area: right-sidebar;
    background: linear-gradient(180deg, #ffffff 0%, #f8fafc 100%);
    padding: 25px 20px;
    overflow-y: auto;
    box-shadow: -4px 0 12px rgba(0, 0, 0, 0.05);
    border-left: 1px solid rgba(0, 0, 0, 0.05);
}

/* Contenu principal */
#main-content {
    grid-area: main-content;
    padding: 30px;
    display: flex;
    flex-direction: column;
    gap: 30px;
    overflow: hidden; /* Évitez les scrollbars */
    height: calc(100vh - 70px); /* Ajustez la hauteur pour éviter l'espace en bas */
}

#main-content h2 {
    font-size: 1.8rem;
    color: #1a365d;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 3px solid #e2e8f0;
    position: relative;
}

#main-content h2::after {
    content: '';
    position: absolute;
    bottom: -3px;
    left: 0;
    width: 80px;
    height: 3px;
    background: linear-gradient(90deg, #3182ce 0%, #63b3ed 100%);
}

/* Conteneurs pour l'arbre généalogique et le graphe */
.container-card {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    border-radius: 16px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.05);
    padding: 25px;
    margin-bottom: 25px;
    border: 1px solid rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    flex: 1; /* Ajoutez cette ligne pour permettre au conteneur de s'étendre */
    max-height: calc(100vh - 150px); /* Ajustez la hauteur maximale */
    overflow-y: auto; /* Permettre le défilement vertical */
}

.container-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
}

#family-tree-container,
#graph-container {
    height: calc(100% - 50px); /* Ajustez la hauteur pour éviter les scrollbars */
    overflow: hidden; /* Évitez les scrollbars */
    border-radius: 12px;
    background-color: #f9fafb;
    border: 1px solid #e2e8f0;
    padding: 15px;
    transition: all 0.3s ease;
}

#family-tree-container:hover,
#graph-container:hover {
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
}

/* Sidebar menu */
.sidebar-title {
    font-size: 1.3rem;
    font-weight: 600;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 2px solid rgba(0, 0, 0, 0.1);
    letter-spacing: 0.5px;
    color: #fbfbfb; /* Change text color to black */
}

.sidebar-menu {
    list-style: none;
}

.sidebar-menu li {
    margin-bottom: 15px;
}

.sidebar-menu a {
    color: #000; /* Change text color to black */
    text-decoration: none;
    display: block;
    padding: 12px 15px;
    border-radius: 10px;
    transition: all 0.3s ease;
    font-weight: 500;
}

.sidebar-menu a:hover {
    background: linear-gradient(90deg, #3182ce 0%, #4299e1 100%);
    color: white;
    transform: translateX(5px);
    box-shadow: 0 4px 12px rgba(66, 153, 225, 0.3);
}

/* Right sidebar specific */
#right-sidebar .sidebar-title {
    color: #1a365d;
    border-bottom: 2px solid #e2e8f0;
}

#right-sidebar .info-card {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    border-radius: 12px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease;
}

#right-sidebar .info-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
}

/* Process steps */
.process-steps {
    list-style: none;
    padding: 0;
}

.process-steps li {
    margin-bottom: 10px;
    font-size: 1rem;
    color: #2d3748;
}

/* Responsive design */
@media (max-width: 1200px) {
    #app {
        grid-template-columns: 240px 1fr 240px;
    }
}

@media (max-width: 900px) {
    #app {
        grid-template-areas:
          "navbar navbar navbar"
          "left-sidebar main-content main-content";
        grid-template-columns: 280px 1fr;
    }

    #right-sidebar {
        display: none;
    }
}

@media (max-width: 650px) {
    #app {
        grid-template-areas:
          "navbar navbar"
          "main-content main-content";
        grid-template-columns: 1fr;
    }

    #left-sidebar {
        display: none;
    }

    #navbar {
        padding: 0 20px;
    }
}

/* Formulaires */
form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    max-width: 600px;
    margin: 0 auto;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(0, 0, 0, 0.05);
}

/* Styles spécifiques pour le formulaire de profil */
#profile-form {
    max-width: 100%; /* Élargir le formulaire de profil */
    margin: 0;
    background-color: #ffffff;
    padding: 30px;
    border-radius: 12px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    align-items: start;
    animation: fadeInUp 0.5s ease-out forwards;
}

#profile-form img {
    grid-column: 1;
    width: 150px;
    height: 150px;
    object-fit: cover;
    border-radius: 50%;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    border: 3px solid #4299e1;
    margin-bottom: 20px;
}

#profile-form label {
    font-weight: 600;
    color: #2d3748;
    margin-bottom: 5px;
}

#profile-form input, 
#profile-form select {
    width: 100%;
    padding: 12px;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
    background-color: #f8fafc;
    font-size: 0.95rem;
}

#profile-form button[type="submit"] {
    grid-column: 1 / -1;
    margin-top: 15px;
    background: linear-gradient(90deg, #3182ce 0%, #4299e1 100%);
    font-weight: 600;
    padding: 12px 20px;
    border-radius: 8px;
    transition: all 0.3s ease;
    box-shadow: 0 4px 6px rgba(66, 153, 225, 0.25);
}

form label {
    font-weight: 600;
    color: #000; /* Change text color to black */
    font-size: 1.05rem;
    margin-bottom: 5px;
    display: block;
}

form input,
form select {
    padding: 12px;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
    background-color: #f8fafc;
    font-size: 1rem;
    transition: all 0.3s ease;
}

form input:focus,
form select:focus {
    outline: none;
    border-color: #4299e1;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.25);
}

form button {
    padding: 12px 20px;
    border-radius: 10px;
    background: linear-gradient(90deg, #2b6cb0 0%, #3182ce 100%);
    color: white;
    border: none;
    cursor: pointer;
    font-size: 1.05rem;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 4px 10px rgba(49, 130, 206, 0.3);
}

form button:hover {
    background: linear-gradient(90deg, #1a4a8c 0%, #2b6cb0 100%);
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(49, 130, 206, 0.4);
}

/* Informations utilisateur */
.user-info {
    display: flex;
    align-items: center;
    gap: 12px;
    text-decoration: none;
    color: inherit;
    padding: 10px;
    border-radius: 10px;
    transition: all 0.3s ease;
}

.user-info:hover {
    background-color: rgba(226, 232, 240, 0.5);
}

.user-avatar {
    width: 45px;
    height: 45px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #4299e1;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
}

.user-info:hover .user-avatar {
    transform: scale(1.1);
    border-color: #3182ce;
}

/* Ajoutez ces styles pour les boutons de vue */
.view-buttons {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-bottom: 20px;
}

.view-button {
    padding: 10px 20px;
    border: none;
    border-radius: 8px;
    background-color: #4299e1;
    color: white;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.view-button:hover {
    background-color: #3182ce;
}

/* Styles pour le bouton de déconnexion */
.profile-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 2px solid #e2e8f0;
}

.profile-header h2 {
    margin: 0;
    font-size: 1.8rem;
    color: #2d3748;
    font-weight: 600;
}

.logout-button {
    padding: 10px 20px;
    border-radius: 8px;
    background: linear-gradient(90deg, #e74c3c 0%, #c0392b 100%);
    color: white;
    border: none;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 4px 10px rgba(231, 76, 60, 0.3);
}

.logout-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(231, 76, 60, 0.4);
}

/* Styles pour les boutons dans la sidebar */
.sidebar-button {
    padding: 10px 20px;
    border: none;
    border-radius: 8px;
    background-color: #4299e1;
    color: white;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 10px;
}

.sidebar-button:hover {
    background-color: #3182ce;
}

/* Styles pour les formulaires dans la sidebar */
.sidebar-form {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-top: 20px;
}

.sidebar-form label {
    font-weight: 600;
    color: #000; /* Change text color to black */
    font-size: 1rem;
    margin-bottom: 5px;
}

.sidebar-form select {
    padding: 10px;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
    background-color: #ffffff;
    color: #000; /* Change text color to black */
    font-size: 1rem;
    transition: all 0.3s ease;
}

.sidebar-form select:focus {
    outline: none;
    border-color: #4299e1;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.25);
}

.sidebar-form button {
    padding: 10px 20px;
    border-radius: 8px;
    background-color: #4299e1;
    color: white;
    border: none;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 4px 10px rgba(49, 130, 206, 0.3);
    margin-top: 20px;
}

.sidebar-form button:hover {
    background-color: #3182ce;
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(49, 130, 206, 0.4);
}

/* Style for the "Ajouter un enfant" form container */
#add-child-form, #add-spouse-form, #add-father-form, #add-mother-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    padding: 20px;
    border-radius: 15px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */
    background-color: #ffffff; /* White background */
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    margin-top: 10px;
    animation: slideDown 0.3s ease-out forwards;
}

/* Style for the title within the form */
#add-child-form .sidebar-title {
    font-size: 1.3rem;
    font-weight: 600;
    color: #333333; /* Dark text color */
    margin-bottom: 15px;
    border-bottom: 2px solid #e2e8f0; /* Light border */
    padding-bottom: 10px;
}

/* Style for labels within the form */
#add-child-form label {
    font-weight: 500;
    color: #333333; /* Dark text color */
    font-size: 1rem;
    margin-bottom: 5px;
}

/* Style for input fields within the form */
#add-child-form input[type="number"],
#add-child-form button {
    padding: 12px;
    border-radius: 10px;
    border: 1px solid #e2e8f0;
    background-color: #f8fafc;
    font-size: 1rem;
    transition: all 0.3s ease;
}

/* Style for input fields on focus */
#add-child-form input[type="number"]:focus {
    outline: none;
    border-color: #4299e1;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.25);
}

/* Style for buttons within the form */
#add-child-form button {
    background-color: #4299e1;
    color: white;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    transition: background-color 0.3s ease, transform 0.3s ease;
}

/* Style for buttons on hover */
#add-child-form button:hover {
    background-color: #3182ce;
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(49, 130, 206, 0.4);
}

/* Style for the child menus container */
#child-menus {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-top: 10px;
}

/* Style for individual child menu items */
.child-menu {
    display: flex;
    flex-direction: column;
    gap: 5px;
    padding: 15px;
    border-radius: 10px;
    border: 1px solid #e2e8f0;
    background-color: #ffffff;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

/* Style for child menu labels */
.child-menu label {
    font-weight: 500;
    color: #333333; /* Dark text color */
    font-size: 1rem;
    margin-bottom: 5px;
}

/* Style for child menu select fields */
.child-menu select {
    padding: 10px;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
    background-color: #ffffff;
    color: #333333; /* Dark text color */
    font-size: 1rem;
    transition: all 0.3s ease;
}

/* Style for child menu select fields on focus */
.child-menu select:focus {
    outline: none;
    border-color: #4299e1;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.25);
}

/* Styles for the formulaires de recherche */
.search-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-top: 20px;
    padding: 20px;
    background-color: rgba(255, 255, 255, 0.1); /* Fond légèrement translucide */
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); /* Ombre pour un effet de profondeur */
    transition: all 0.3s ease;
}

/* Style pour les formulaires de recherche dans les relations familiales */
.family-selection-menu .search-form {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.08);
    margin-top: 10px;
    border: 1px solid #e2e8f0;
}

/* Style for .sidebar-title within .search-form in the left sidebar */
#left-sidebar .search-form .sidebar-title {
    font-size: 1.2rem;
    font-weight: 600;
    color: #ffffff; /* White text color for left sidebar */
    margin-bottom: 15px;
    border-bottom: 2px solid rgba(255, 255, 255, 0.2); /* White border for left sidebar */
}

/* Style for .sidebar-title within .search-form in the profile */
#main-content .search-form .sidebar-title {
    font-size: 1.2rem;
    font-weight: 600;
    color: #000000; /* Black text color for profile */
    margin-bottom: 15px;
    border-bottom: 2px solid rgba(0, 0, 0, 0.2); /* Black border for profile */
}

/* Style for .search-form label within the left sidebar */
#left-sidebar .search-form label {
    font-weight: 500;
    color: #ffffff; /* White text color for left sidebar */
    font-size: 1rem;
    margin-bottom: 5px;
}

/* Style for .search-form label within the profile section */
#main-content .search-form label {
    font-weight: 500;
    color: #000000; /* Black text color for profile */
    font-size: 1rem;
    margin-bottom: 5px;
}

.search-form select {
    padding: 10px;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
    background-color: #ffffff;
    color: #000; /* Change text color to black */
    font-size: 1rem;
    transition: all 0.3s ease;
}

.search-form select:focus {
    outline: none;
    border-color: #4299e1;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.25);
}

.search-form button {
    padding: 10px 20px;
    border-radius: 8px;
    background-color: #4299e1;
    color: white;
    border: none;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 4px 10px rgba(49, 130, 206, 0.3);
    margin-top: 20px;
}

.search-form button:hover {
    background-color: #3182ce;
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(49, 130, 206, 0.4);
}

/* Highlighted classes for different algorithms */
.highlighted-dijkstra {
    background-color: red !important;
    line-color: red !important;
    target-arrow-color: red !important;
    transition: background-color 1s ease, line-color 1s ease, target-arrow-color 1s ease;
}

.highlighted-bellman-ford {
    background-color: blue !important;
    line-color: blue !important;
    target-arrow-color: blue !important;
    transition: background-color 1s ease, line-color 1s ease, target-arrow-color 1s ease;
}

.highlighted-prim {
    background-color: green !important;
    line-color: green !important;
    target-arrow-color: green !important;
    transition: background-color 1s ease, line-color 1s ease, target-arrow-color 1s ease;
}

.highlighted-kruskal {
    background-color: purple !important;
    line-color: purple !important;
    target-arrow-color: purple !important;
    transition: background-color 1s ease, line-color 1s ease, target-arrow-color 1s ease;
}

/* Styles for view and scope controls */
.view-controls {
    display: flex;
    justify-content: space-between; /* Aligns view buttons to left, scope to right */
    align-items: center;
    margin-bottom: 20px;
    flex-wrap: wrap; /* Allows wrapping on smaller screens */
    gap: 15px; /* Space between button groups if they wrap */
}

.view-buttons, .scope-buttons {
    display: flex;
    gap: 10px;
}

.view-button, .scope-button {
    padding: 10px 20px;
    border: 1px solid #3182ce; /* Default border */
    border-radius: 8px;
    background-color: #f0f4f8; /* Default background */
    color: #3182ce; /* Default text color */
    cursor: pointer;
    transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
    font-weight: 500;
}

.view-button:hover, .scope-button:hover {
    background-color: #e0e8f0;
    border-color: #2b6cb0;
}

/* Style for the active button */
.view-button.active-view-btn, .scope-button.active-scope-btn {
    background-color: #4299e1;
    color: white;
    border-color: #4299e1;
}

/* Adjust main content area name if you changed it in maincontent.js */
#main-content-area { /* Or whatever ID you used for the main content wrapper */
    grid-area: main-content;
    padding: 30px;
    display: flex;
    flex-direction: column;
    gap: 20px; /* Reduced gap slightly */
    overflow: hidden;
    height: calc(100vh - 70px);
}

/* Ensure container-card within the new #main-content-area still behaves well */
#main-content-area .container-card {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    border-radius: 16px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.05);
    padding: 25px;
    /* margin-bottom: 25px; Remove if gap from flex parent is enough */
    border: 1px solid rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    flex: 1; 
    max-height: calc(100vh - 190px); /* Adjusted max-height based on new controls */
    overflow-y: auto; 
}

/* Style principal pour la page de connexion */
.login-container {
    grid-area: main-content;
    display: flex;
    justify-content: center;
    align-items: center;
    height: calc(100vh - 70px);
    width: 100%;
    overflow: auto;
    padding: 30px;
}

/* Style principal pour la page de profil */
.profile-container {
    grid-area: main-content;
    padding: 30px;
    display: flex;
    flex-direction: column;
    height: calc(100vh - 70px);
    overflow: auto;
}

/* Styles pour les relations familiales */
.family-relations {
    margin-top: 30px;
    padding-top: 20px;
    border-top: 2px solid #e2e8f0;
    animation: fadeIn 0.6s ease-out forwards;
}

.family-relations h3 {
    margin-bottom: 20px;
    font-size: 1.5rem;
    color: #2d3748;
    font-weight: 600;
}

.scrollable-container {
    max-height: 500px;
    overflow-y: auto;
    padding-right: 10px;
}

.family-selection-menus {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.family-selection-menu {
    background-color: #f8fafc;
    border-radius: 12px;
    padding: 15px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 1px solid #e2e8f0;
    position: relative;
}

.family-selection-menu:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
    border-color: #cbd5e0;
}

.family-selection-menu .sidebar-button {
    width: 100%;
    text-align: left;
    padding: 12px 15px;
    font-weight: 500;
    position: relative;
    overflow: hidden;
    z-index: 1;
    margin-top: 0;
}

.family-selection-menu .sidebar-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: 100%;
    background-color: rgba(66, 153, 225, 0.2);
    transition: width 0.3s ease;
    z-index: -1;
}

.family-selection-menu .sidebar-button:hover::before {
    width: 100%;
}

/* Style pour l'affichage des sections familiales dans le panneau de droite */
.family-section {
    margin-top: 15px;
    padding: 15px;
    background-color: #f8fafc;
    border-radius: 8px;
    border-left: 4px solid #4299e1;
}

.family-section h5 {
    margin: 0 0 10px 0;
    font-size: 1.1rem;
    color: #2d3748;
    font-weight: 600;
}

.family-section p {
    margin: 5px 0;
    color: #4a5568;
}

/* Animations */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

@keyframes slideDown {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Améliorations des interactions utilisateur */
.child-menu {
    background-color: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    padding: 12px 15px;
    margin-bottom: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
}

.child-menu:hover {
    border-color: #4299e1;
    box-shadow: 0 4px 8px rgba(66, 153, 225, 0.15);
}

#profile-form button[type="submit"]:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(49, 130, 206, 0.3);
    background: linear-gradient(90deg, #2b6cb0 0%, #3182ce 100%);
}

/* Responsivité pour les menus de relations familiales */
@media (max-width: 768px) {
    .family-selection-menus {
        grid-template-columns: 1fr;
    }
    
    #profile-form {
        padding: 20px;
        grid-template-columns: 1fr;
    }
    
    #profile-form img {
        margin: 0 auto 20px auto;
    }
    
    .container-card {
        padding: 15px;
    }
}// END OF FILE: src/css/style.css

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/algorithms/bellman-ford.js

// src/js/algorithms/bellman-ford.js
import cytoscape from 'cytoscape';
import { uiStateService } from '../../services/uiStateService';

export function initBellmanFord(cy, startNode, endNode) {
  uiStateService.clearAlgorithmSteps();

  // Add initial steps one by one
  uiStateService.addAlgorithmStep("Initialisation de l'algorithme de Bellman-Ford");
  uiStateService.addAlgorithmStep(`Nœud de départ: ${startNode.data('label')}, Nœud d'arrivée: ${endNode.data('label')}`);

  // Réinitialiser les styles
  cy.edges().style({
    'line-color': '#9dbaea',
    'width': 6
  });

  // Tous les nœuds et arêtes du graphe
  const nodes = cy.nodes();
  const edges = cy.edges();

  // Maps pour suivre les distances et les parents
  const distances = new Map();
  const parent = new Map();

  // Initialisation des structures de données
  nodes.forEach(node => {
    const id = node.id();
    distances.set(id, id === startNode.id() ? 0 : Infinity);
    parent.set(id, null);
  });

  // Algorithme de Bellman-Ford
  const V = nodes.length;

  // Relaxation des arêtes V-1 fois
  for (let i = 0; i < V - 1; i++) {
    uiStateService.addAlgorithmStep(`Itération ${i + 1}/${V - 1} - Relaxation de toutes les arêtes`);

    edges.forEach(edge => {
      const source = edge.source().id();
      const target = edge.target().id();
      const weight = edge.data('weight') || 1;

      // Relaxation dans les deux sens car le graphe est non dirigé
      if (distances.get(source) !== Infinity && distances.get(source) + weight < distances.get(target)) {
        distances.set(target, distances.get(source) + weight);
        parent.set(target, source);
        uiStateService.addAlgorithmStep(`Mise à jour de la distance du nœud ${cy.getElementById(target).data('label')}: ${distances.get(source) + weight}`); // Corrected: Displaying the new distance

        edge.addClass('highlighted-bellman-ford');
        setTimeout(() => {
          edge.removeClass('highlighted-bellman-ford');
        }, 1000);
      }

      if (distances.get(target) !== Infinity && distances.get(target) + weight < distances.get(source)) {
        distances.set(source, distances.get(target) + weight);
        parent.set(source, target);
        uiStateService.addAlgorithmStep(`Mise à jour de la distance du nœud ${cy.getElementById(source).data('label')}: ${distances.get(target) + weight}`); // Corrected: Displaying the new distance
        
        edge.addClass('highlighted-bellman-ford');
        setTimeout(() => {
          edge.removeClass('highlighted-bellman-ford');
        }, 1000);
      }
    });
  }

  // Vérification des cycles négatifs
  let hasNegativeCycle = false;
  edges.forEach(edge => {
    const source = edge.source().id();
    const target = edge.target().id();
    const weight = edge.data('weight') || 1;

    if (distances.get(source) !== Infinity && distances.get(source) + weight < distances.get(target)) {
      hasNegativeCycle = true;
    }
    if (distances.get(target) !== Infinity && distances.get(target) + weight < distances.get(source)) {
      hasNegativeCycle = true;
    }
  });

  if (hasNegativeCycle) {
    console.warn("Le graphe contient un cycle de poids négatif!");
    uiStateService.addAlgorithmStep("Cycle négatif détecté dans le graphe");
  }

  // Reconstruire le chemin du nœud de départ au nœud d'arrivée
  const path = [];
  let current = endNode.id();
  while (current !== null && current !== startNode.id()) {
    const parentId = parent.get(current);
    if (parentId === null) break; 

    const edge = cy.elements().edges(`[source = "${parentId}"][target = "${current}"], [source = "${current}"][target = "${parentId}"]`);
    path.unshift(edge);
    current = parentId;
  }

  // Afficher le chemin trouvé
  if (path.length > 0) {
    path.forEach(edge => {
      edge.style({
        'line-color': 'blue', 
        'width': 5
      });
    });

    let delay = 0;
    const animationStep = 500;
    path.forEach(edge => {
      setTimeout(() => {
        edge.flashClass('highlighted-bellman-ford', 1000);
      }, delay);
      delay += animationStep;
    });

    console.log(`Algorithme de Bellman-Ford: chemin trouvé de ${startNode.data('label')} à ${endNode.data('label')} avec ${path.length} arêtes`);
    console.log(`Distance totale: ${distances.get(endNode.id())}`);
    uiStateService.addAlgorithmStep(`Chemin trouvé de ${startNode.data('label')} à ${endNode.data('label')} avec distance totale ${distances.get(endNode.id())}`);
  } else {
    console.log(`Aucun chemin trouvé de ${startNode.data('label')} à ${endNode.data('label')}`);
    uiStateService.addAlgorithmStep(`Aucun chemin trouvé de ${startNode.data('label')} à ${endNode.data('label')}`);
  }

  return path;
}// END OF FILE: src/js/algorithms/bellman-ford.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/algorithms/dijkstra.js

// src/js/algorithms/dijkstra.js
import cytoscape from 'cytoscape';
import { uiStateService } from '../../services/uiStateService';

export function initDijkstra(cy, startNode, endNode) {
  uiStateService.clearAlgorithmSteps(); // This is correct

  // Add initial steps one by one
  uiStateService.addAlgorithmStep("Initialisation de l'algorithme de Dijkstra");
  uiStateService.addAlgorithmStep(`Nœud de départ: ${startNode.data('label')}, Nœud d'arrivée: ${endNode.data('label')}`);

  // Réinitialiser les styles
  cy.edges().style({
    'line-color': '#9dbaea',
    'width': 6
  });

  // Tous les nœuds du graphe
  const nodes = cy.nodes();

  // Maps pour suivre les distances et les parents
  const visited = new Map();
  const distances = new Map();
  const parent = new Map();

  // Initialisation des structures de données
  nodes.forEach(node => {
    const id = node.id();
    distances.set(id, id === startNode.id() ? 0 : Infinity);
    parent.set(id, null);
  });

  // Algorithme de Dijkstra
  while (true) {
    // Trouver le nœud non visité avec la distance minimale
    let minDistance = Infinity;
    let minNode = null;

    nodes.forEach(node => {
      const id = node.id();
      if (!visited.has(id) && distances.get(id) < minDistance) {
        minDistance = distances.get(id);
        minNode = node;
      }
    });

    // Si aucun nœud n'est accessible ou si nous avons atteint le nœud cible
    if (minNode === null || minNode.id() === endNode.id()) break;

    // Marquer le nœud comme visité
    visited.set(minNode.id(), true);
    uiStateService.addAlgorithmStep(`Exploration du nœud ${minNode.data('label')} avec distance ${distances.get(minNode.id())}`);

    // Mettre à jour les distances des nœuds adjacents
    const neighbors = minNode.neighborhood().nodes().filter(n => !visited.has(n.id()));

    neighbors.forEach(neighbor => {
      const neighborId = neighbor.id();
      const edge = cy.elements().edges(`[source = "${minNode.id()}"][target = "${neighborId}"], [source = "${neighborId}"][target = "${minNode.id()}"]`);
      const weight = edge.data('weight') || 1;
      const distance = distances.get(minNode.id()) + weight;

      if (distance < distances.get(neighborId)) {
        distances.set(neighborId, distance);
        parent.set(neighborId, minNode.id());
        uiStateService.addAlgorithmStep(`Mise à jour de la distance du nœud ${neighbor.data('label')}: ${distances.get(neighborId)} → ${distance}`);

        edge.addClass('highlighted-dijkstra');
        setTimeout(() => {
          edge.removeClass('highlighted-dijkstra');
        }, 1000);
      }
    });
  }

  // Reconstruire le chemin du nœud de départ au nœud d'arrivée
  const path = [];
  let current = endNode.id();

  while (current !== null && current !== startNode.id()) {
    const parentId = parent.get(current);
    if (parentId === null) break;

    const edge = cy.elements().edges(`[source = "${parentId}"][target = "${current}"], [source = "${current}"][target = "${parentId}"]`);
    path.unshift(edge);
    current = parentId;
  }

  // Afficher le chemin trouvé
  if (path.length > 0) {
    path.forEach(edge => {
      edge.style({
        'line-color': 'red',
        'width': 5
      });
    });

    let delay = 0;
    const animationStep = 500;
    path.forEach(edge => {
      setTimeout(() => {
        edge.flashClass('highlighted-dijkstra', 1000);
      }, delay);
      delay += animationStep;
    });

    console.log(`Algorithme de Dijkstra: chemin trouvé de ${startNode.data('label')} à ${endNode.data('label')} avec ${path.length} arêtes`);
    console.log(`Distance totale: ${distances.get(endNode.id())}`);
    uiStateService.addAlgorithmStep(`Chemin trouvé de ${startNode.data('label')} à ${endNode.data('label')} avec distance totale ${distances.get(endNode.id())}`);
  } else {
    console.log(`Aucun chemin trouvé de ${startNode.data('label')} à ${endNode.data('label')}`);
    uiStateService.addAlgorithmStep(`Aucun chemin trouvé de ${startNode.data('label')} à ${endNode.data('label')}`);
  }
  // No longer need to set all steps at the end, as they are added incrementally.

  return path;
}// END OF FILE: src/js/algorithms/dijkstra.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/algorithms/kruskal.js

// src/js/algorithms/kruskal.js
import cytoscape from 'cytoscape';
import { uiStateService } from '../../services/uiStateService';

export function initKruskal(cy, startNode) { // startNode is passed but not used by Kruskal's core logic
  uiStateService.clearAlgorithmSteps();

  // Add initial steps
  uiStateService.addAlgorithmStep("Initialisation de l'algorithme de Kruskal");
  const edgesInGraph = cy.edges(); // Renamed to avoid conflict with edgesArray later
  uiStateService.addAlgorithmStep(`${edgesInGraph.length} arêtes à examiner`);

  // Réinitialiser les styles
  cy.edges().style({
    'line-color': '#9dbaea',
    'width': 6
  });

  // Structure pour Union-Find
  const parents = new Map();
  const ranks = new Map();

  function find(nodeId) { // Parameter is nodeId
    if (parents.get(nodeId) !== nodeId) {
      parents.set(nodeId, find(parents.get(nodeId)));
    }
    return parents.get(nodeId);
  }

  function union(xId, yId) { // Parameters are node IDs
    const rootX = find(xId);
    const rootY = find(yId);

    if (rootX === rootY) return false;

    if (ranks.get(rootX) < ranks.get(rootY)) {
      parents.set(rootX, rootY);
    } else if (ranks.get(rootX) > ranks.get(rootY)) {
      parents.set(rootY, rootX);
    } else {
      parents.set(rootY, rootX);
      ranks.set(rootX, ranks.get(rootX) + 1);
    }
    return true;
  }

  // Initialiser Union-Find
  cy.nodes().forEach(node => {
    const id = node.id();
    parents.set(id, id);
    ranks.set(id, 0);
  });

  // Collecter toutes les arêtes avec leurs poids
  const edgesArray = [];
  cy.edges().forEach(edge => {
    edgesArray.push({
      edgeElement: edge, // Store the Cytoscape edge element
      sourceId: edge.source().id(),
      targetId: edge.target().id(),
      weight: edge.data('weight') || 1 // Default weight if none specified
    });
  });

  // Trier les arêtes par poids croissant
  edgesArray.sort((a, b) => a.weight - b.weight);
  uiStateService.addAlgorithmStep("Arêtes triées par poids croissant");

  // Algorithme de Kruskal
  const mstEdges = []; // Array to store Cytoscape edge elements of the MST

  for (const edgeData of edgesArray) {
    const { edgeElement, sourceId, targetId, weight } = edgeData;

    // Si l'ajout de cette arête ne crée pas de cycle
    if (find(sourceId) !== find(targetId)) {
      union(sourceId, targetId);
      mstEdges.push(edgeElement);
      uiStateService.addAlgorithmStep(`Ajout de l'arête ${cy.getElementById(sourceId).data('label')}-${cy.getElementById(targetId).data('label')} (poids ${weight}) à l'arbre couvrant minimal`);

      // Colorer l'arête
      edgeElement.style({
        'line-color': 'purple',
        'width': 5
      });

      // Animer le changement de couleur
      edgeElement.addClass('highlighted-kruskal');
      setTimeout(() => {
        edgeElement.removeClass('highlighted-kruskal');
      }, 1000);
    }
  }

  // Animation facultative
  let delay = 0;
  const animationStep = 500;
  mstEdges.forEach(edge => {
    setTimeout(() => {
      edge.flashClass('highlighted-kruskal', 1000);
    }, delay);
    delay += animationStep;
  });

  // Ajouter des logs pour débogage
  console.log(`Algorithme de Kruskal: ${mstEdges.length} arêtes dans l'arbre couvrant minimal`);
  uiStateService.addAlgorithmStep(`Arbre couvrant minimal construit avec ${mstEdges.length} arêtes`);

  return mstEdges; // Return the array of Cytoscape edge elements forming the MST
}// END OF FILE: src/js/algorithms/kruskal.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/algorithms/prim.js

// src/js/algorithms/prim.js
import cytoscape from 'cytoscape';
import { uiStateService } from '../../services/uiStateService';

export function initPrim(cy, startNode) {
  uiStateService.clearAlgorithmSteps();

  // Add initial steps
  uiStateService.addAlgorithmStep("Initialisation de l'algorithme de Prim");
  uiStateService.addAlgorithmStep(`Nœud de départ: ${startNode.data('label')}`);

  // Réinitialiser les styles
  cy.edges().style({
    'line-color': '#9dbaea',
    'width': 6
  });

  // Tous les nœuds du graphe
  const allNodes = cy.nodes(); // Renamed to avoid confusion
  const totalNodes = allNodes.length;

  // Maps pour suivre les "keys" (min weight to connect to MST) et les parents in MST
  const inMST = new Map();    // Tracks if a node is already in the MST
  const key = new Map();      // Min weight to connect this node to the MST
  const parentEdge = new Map(); // Stores the edge used to connect the node to its parent in MST

  // Initialisation des structures de données
  allNodes.forEach(node => {
    const id = node.id();
    key.set(id, Infinity);
    inMST.set(id, false);
    parentEdge.set(id, null);
  });

  // Start with the given startNode
  key.set(startNode.id(), 0);

  // Algorithme de Prim
  for (let count = 0; count < totalNodes; count++) {
    // Trouver le nœud non dans MST avec la clé (key) minimale
    let minKey = Infinity;
    let uNode = null; // The node to be added to MST

    allNodes.forEach(node => {
      const id = node.id();
      if (!inMST.get(id) && key.get(id) < minKey) {
        minKey = key.get(id);
        uNode = node;
      }
    });

    // Si aucun nœud n'est accessible ou tous les nœuds sont dans MST
    if (uNode === null) break;

    // Marquer le nœud comme faisant partie du MST
    inMST.set(uNode.id(), true);
    uiStateService.addAlgorithmStep(`Ajout du nœud ${uNode.data('label')} à l'arbre couvrant minimal`);

    // Mettre à jour les valeurs de clé des nœuds adjacents au nœud choisi
    const neighbors = uNode.neighborhood().filter(el => el.isNode() && !inMST.get(el.id()));

    neighbors.forEach(vNode => { // vNode is an adjacent node
      const vNodeId = vNode.id();
      // Trouver l'arête entre uNode et vNode
      const edgeConnecting = uNode.edgesWith(vNode).filter(e => e.source().id() === uNode.id() && e.target().id() === vNodeId || e.source().id() === vNodeId && e.target().id() === uNode.id());
      
      if (edgeConnecting.length > 0) {
        const weight = edgeConnecting.first().data('weight') || 1;

        if (weight < key.get(vNodeId)) {
          key.set(vNodeId, weight);
          parentEdge.set(vNodeId, edgeConnecting.first()); // Store the edge itself
          uiStateService.addAlgorithmStep(`Mise à jour de la clé du nœud ${vNode.data('label')} à ${weight} via ${uNode.data('label')}`);
          
          // Animer le changement de couleur (de l'arête qui est maintenant le meilleur candidat)
          // This animation might be too noisy if edges are reconsidered often.
          // For Prim, typically edges are highlighted when *chosen* for the MST.
        }
      }
    });
  }

  // Colorer les arêtes de l'arbre couvrant minimal et animer
  let delay = 0;
  const animationStep = 500;
  const mstEdgesCollected = [];

  parentEdge.forEach((edge, nodeId) => {
    if (edge !== null) { // Edges that are part of the MST
      mstEdgesCollected.push(edge);
      edge.style({
        'line-color': 'green',
        'width': 5
      });
      setTimeout(() => {
        edge.flashClass('highlighted-prim', 1000);
      }, delay);
      delay += animationStep;
    }
  });
  
  uiStateService.addAlgorithmStep(`Arbre couvrant minimal construit avec ${mstEdgesCollected.length} arêtes (et ${Array.from(inMST.values()).filter(Boolean).length} nœuds).`);
  // Note: For a connected graph, mstEdgesCollected.length should be totalNodes - 1 if totalNodes > 0.
}// END OF FILE: src/js/algorithms/prim.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/app.ts

// END OF FILE: src/js/app.ts

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/auth/auth.js

// END OF FILE: src/js/auth/auth.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/auth/login.js

// END OF FILE: src/js/auth/login.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/auth/register.js

// END OF FILE: src/js/auth/register.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/family-tree/graph-view.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/family-tree/graph-view.js
import cytoscape from 'cytoscape';

export function initGraph(containerId, graphData) { // graphData vient de transformGraphData
  const cy = cytoscape({
    container: document.getElementById(containerId),
    elements: graphData, // elements est déjà { nodes: [...], edges: [...] }
    style: [
      // ... (styles inchangés, s'assurent juste que 'data(id)' est bien l'UUID string)
      {
        selector: 'node',
        style: {
          'background-color': '#11479e',
          'label': 'data(label)', // Assurez-vous que label est bien défini dans transformGraphData
          'color': '#fff',
          'text-valign': 'center',
          'text-halign': 'center',
          'width': '100px', // Ajusté pour potentiellement plus de texte/nœuds
          'height': '100px',
          'font-size': '12px', // Ajusté
          'border-color': '#000',
          'border-width': '1px',
          'border-opacity': '0.5',
          'shape': 'ellipse' // ou 'roundrectangle'
        }
      },
      {
        selector: 'edge',
        style: {
          'width': 3, // Ajusté
          'line-color': '#9dbaea',
          'target-arrow-color': '#9dbaea',
          'target-arrow-shape': 'triangle',
          'curve-style': 'bezier'
        }
      },
      {
        selector: 'edge[relationship = "partner"]', // Style pour les arêtes de conjoints
        style: {
          'line-color': '#ff69b4', // Rose pour conjoints
          'line-style': 'dashed',
          'target-arrow-shape': 'none' // Pas de flèche pour relation symétrique
        }
      }
    ],
    layout: {
      name: 'cose', // COSE est souvent meilleur pour les graphes sociaux/réseaux
      idealEdgeLength: 100,
      nodeOverlap: 20,
      refresh: 20,
      fit: true,
      padding: 30,
      randomize: false,
      componentSpacing: 100,
      nodeRepulsion: 400000,
      edgeElasticity: 100,
      nestingFactor: 5,
      gravity: 80,
      numIter: 1000,
      initialTemp: 200,
      coolingFactor: 0.95,
      minTemp: 1.0
    }
  });
  return cy;
}

// Transforme les données brutes de l'API (FamilyPerson[]) en un format pour Cytoscape
export function transformGraphData(familyDataArray) { // Renommé pour clarté
  if (!Array.isArray(familyDataArray)) {
    console.error("transformGraphData expects an array, received:", familyDataArray);
    return { nodes: [], edges: [] };
  }

  const nodes = familyDataArray.map(person => {
    if (!person || typeof person.id !== 'string' || person.id === '') { // ID est UUID string
      console.warn('Skipping person with invalid or missing ID (must be UUID string):', person);
      return null;
    }
    return {
      data: {
        id: person.id, // UUID string
        label: person.name || 'Unnamed',
        gender: person.gender,
        birthYear: person.birthYear,
        img: person.img
        // Ajoute d'autres données si tu veux les utiliser dans les styles ou les popups
      }
    };
  }).filter(node => node !== null);

  const edges = [];
  const existingEdges = new Set(); // Pour éviter les doublons d'arêtes de partenariat

  familyDataArray.forEach(person => {
    if (!person || typeof person.id !== 'string' || person.id === '') return;

    const personId = person.id;

    // Arêtes parent-enfant (dirigées du parent vers l'enfant)
    if (person.fid) { // fid est un UUID string du père
      edges.push({ data: { id: `edge-${person.fid}-to-${personId}`, source: person.fid, target: personId, relationship: 'parent-child' } });
    }
    if (person.mid) { // mid est un UUID string de la mère
      edges.push({ data: { id: `edge-${person.mid}-to-${personId}`, source: person.mid, target: personId, relationship: 'parent-child' } });
    }

    // Arêtes de partenariat (non dirigées)
    if (person.pids && Array.isArray(person.pids)) {
      person.pids.forEach(partnerId => { // partnerId est un UUID string
        if (typeof partnerId !== 'string' || partnerId === '') return;

        // Créer un ID d'arête unique pour éviter les doublons (A-B et B-A)
        const edgeId = [personId, partnerId].sort().join('-');
        if (!existingEdges.has(edgeId)) {
          edges.push({ data: { id: `edge-${edgeId}`, source: personId, target: partnerId, relationship: 'partner' } });
          existingEdges.add(edgeId);
        }
      });
    }
  });

  return { nodes, edges };
}// END OF FILE: src/js/family-tree/graph-view.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/family-tree/person-form.js

// END OF FILE: src/js/family-tree/person-form.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/family-tree/tree-view.js

// src/js/family-tree/tree-view.js
import FamilyTree from '@balkangraph/familytree.js';
import { familyDataService } from '../../services/familyDataService'; // Pour les détails dans updatePersonDetails

// initFamilyTree reçoit directement les données formatées par le router
export function initFamilyTree(containerId, familyDataForTree) {
  // familyDataForTree a déjà les IDs en string
  const chart = new FamilyTree(document.getElementById(containerId), {
    mode: 'tree', // ou 'light', 'dark' etc.
    orientation: FamilyTree.orientation.top,
    nodeBinding: {
      field_0: 'name',
      field_1: 'years', // Sera calculé dans transformFamilyData (ou ici)
      img_0: 'img'
    },
    // Utilise un template standard ou personnalisé. 'hugo' est un bon point de départ.
    template: 'hugo', 
    // Pour des templates plus personnalisés, réfère-toi à la documentation de BalkanGraph
    // Par exemple, pour afficher le genre différemment :
    // FamilyTree.templates.tommy_male = Object.assign({}, FamilyTree.templates.tommy);
    // FamilyTree.templates.tommy_male.defs = '<style>...</style>'; // Ajouter des styles spécifiques au genre

    levelSeparation: 70,
    siblingSeparation: 60,
    subtreeSeparation: 80,
    nodes: familyDataForTree.map(person => { // Calculer 'years' ici
        let years = '';
        if (person.birthYear) {
            years = person.birthYear.toString();
            if (person.deathYear) {
                years += ` - ${person.deathYear}`;
            }
        }
        return {...person, years };
    }),
    // Gestion des clics pour afficher les détails (optionnel, peut être géré autrement)
     onClick: function (sender, args) { // Note: 'this' ici est l'instance de FamilyTree
        if (args.node) {
            const personId = args.node.id; // C'est l'UUID string
            updatePersonDetailsById(personId); // Fonction pour charger et afficher les détails
            return false; // Pour éviter le comportement par défaut si tu le gères entièrement
        }
    },
    editForm: { // Désactiver le formulaire d'édition intégré si tu gères tout via ta page de profil
        generateElements: false,
        buttons: {}
    },
    menu: { // Personnaliser le menu contextuel du noeud
        pdf: { text: "Exporter en PDF" },
        png: { text: "Exporter en PNG" },
        // edit: null, // Désactiver le bouton d'édition du menu si besoin
    },
    tags: { // Pour styler les noeuds par genre (si ton template le supporte)
        male: {
            template: "hugo" // ou un template spécifique "hugo_male"
            // css: "path/to/male.css"
        },
        female: {
            template: "hugo" // ou "hugo_female"
            // css: "path/to/female.css"
        },
        unknown: {
            template: "hugo"
        }
    }
  });
  return chart;
}

// La transformation principale des données (UUIDs, etc.) est faite dans le router avant d'appeler initFamilyTree.
// Cette fonction n'est plus exportée ou utilisée de la même manière.
// export function transformFamilyData(rawData) { ... } // DEPRECATED ou usage interne

// Fonction pour afficher les détails d'une personne dans la sidebar droite
async function updatePersonDetailsById(personId) {
  const detailsContainer = document.querySelector('#right-sidebar .info-card'); // Assure-toi que .info-card existe
  if (!detailsContainer) {
      // Créer le conteneur s'il n'existe pas (ou log une erreur)
      const rightSidebar = document.getElementById('right-sidebar');
      if(rightSidebar) {
          const card = document.createElement('div');
          card.className = 'info-card'; // Ajoute une classe pour le style
          rightSidebar.appendChild(card);
          // detailsContainer = card; // Attention, cette assignation ne fonctionnera pas comme prévu ici.
          // Il vaut mieux s'assurer que le HTML initial de rightsidebar contient déjà .info-card
      } else {
          console.error("Right sidebar container not found for person details.");
          return;
      }
  }


  try {
    const person = await familyDataService.getPersonById(personId);
    if (!person) {
      detailsContainer.innerHTML = '<p>Personne non trouvée.</p>';
      return;
    }
    
    // Pour obtenir les noms des parents/conjoints/enfants, on a besoin de toutes les données
    // ou de faire des appels supplémentaires. Pour l'instant, on va chercher dans toutes les données si possible.
    // C'est moins performant mais plus simple pour l'affichage.
    // Idéalement, le backend pourrait renvoyer ces infos déjà "populées".
    const allFamilyData = await familyDataService.getAllFamilyData();

    let status = person.deathYear ? 'Décédé(e)' : 'Vivant(e)';
    let age = '';
    if (person.birthYear) {
      const endYear = person.deathYear || new Date().getFullYear();
      age = (endYear - person.birthYear).toString();
    }

    const father = person.fid ? allFamilyData.find(p => p.id === person.fid) : null;
    const mother = person.mid ? allFamilyData.find(p => p.id === person.mid) : null;
    const partners = person.pids ? person.pids.map(pid => allFamilyData.find(p => p.id === pid)).filter(p => p) : [];
    const children = allFamilyData.filter(p => p.fid === person.id || p.mid === person.id);

    detailsContainer.innerHTML = `
      <h4>${person.name}</h4>
      <p><strong>Année de naissance:</strong> ${person.birthYear || 'Inconnue'}</p>
      ${person.deathYear ? `<p><strong>Année de décès:</strong> ${person.deathYear}</p>` : ''}
      <p><strong>Âge:</strong> ${age ? age + ' ans' : 'Inconnu'}</p>
      <p><strong>Genre:</strong> ${person.gender === 'male' ? 'Homme' : person.gender === 'female' ? 'Femme' : 'Non spécifié'}</p>
      <p><strong>Statut:</strong> ${status}</p>
      ${person.gmail ? `<p><strong>Email:</strong> ${person.gmail}</p>` : ''}
      
      ${father || mother ? `
        <div class="family-section">
          <h5>Parents</h5>
          ${father ? `<p>Père: ${father.name}</p>` : ''}
          ${mother ? `<p>Mère: ${mother.name}</p>` : ''}
        </div>
      ` : ''}
      
      ${partners.length > 0 ? `
        <div class="family-section">
          <h5>Conjoint(s)</h5>
          ${partners.map(partner => `<p>${partner.name}</p>`).join('')}
        </div>
      ` : ''}
      
      ${children.length > 0 ? `
        <div class="family-section">
          <h5>Enfants</h5>
          ${children.map(child => `<p>${child.name}</p>`).join('')}
        </div>
      ` : ''}
    `;
  } catch (error) {
    console.error("Erreur lors de la mise à jour des détails de la personne:", error);
    detailsContainer.innerHTML = '<p>Erreur lors du chargement des détails.</p>';
  }
}// END OF FILE: src/js/family-tree/tree-view.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/utils/api.js

import axios from 'axios';

const API_URL = 'http://localhost:5000/api'; // Remplacez par l'URL de votre backend

export const registerUser = async (userData) => {
  try {
    const response = await axios.post(`${API_URL}/auth/register`, userData);
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const loginUser = async (userData) => {
  try {
    const response = await axios.post(`${API_URL}/auth/login`, userData);
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const getCurrentUser = async () => {
  try {
    const token = localStorage.getItem('token');
    const response = await axios.get(`${API_URL}/auth/me`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const resetPassword = async (userData) => {
  try {
    const response = await axios.post(`${API_URL}/auth/reset-password`, userData);
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};
// END OF FILE: src/js/utils/api.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/utils/dom-utils.js

// END OF FILE: src/js/utils/dom-utils.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/utils/family-data-filter.js

// src/js/utils/family-data-filter.js
export function filterDataForPersonalView(fullFamilyData, userProfile) { 
    console.log("--- Inside filterDataForPersonalView (util) ---");
    console.log("Argument 'fullFamilyData':", fullFamilyData); // Should be an array
    console.log("Argument 'userProfile':", userProfile);       // Should be a single 
    // Initial guard clauses
    if (!userProfile || typeof userProfile.id === 'undefined' || userProfile.id === null) {
      console.error("filterDataForPersonalView (util): Called with invalid userProfile (or its ID is missing).", userProfile);
      return [];
    }
    if (!fullFamilyData || !Array.isArray(fullFamilyData)) { // Check if fullFamilyData is actually an array
      console.error("filterDataForPersonalView (util): fullFamilyData is not a valid array.", fullFamilyData);
      // If we have a valid user profile but no family data, we should still return the user.
      return [{
        id: userProfile.id,
        name: userProfile.name,
        mid: userProfile.mid,
        fid: userProfile.fid,
        pids: [],
        gender: userProfile.gender,
        birthYear: userProfile.birthYear,
        deathYear: userProfile.deathYear,
        img: userProfile.img,
        gmail: userProfile.gmail
      }];
    }
    if (fullFamilyData.length === 0) {
        console.warn("filterDataForPersonalView (util): fullFamilyData is empty. Returning only the user profile.");
        return [{
          id: userProfile.id,
          name: userProfile.name,
          mid: userProfile.mid,
          fid: userProfile.fid,
          pids: userProfile.pids || [],
          gender: userProfile.gender,
          birthYear: userProfile.birthYear,
          deathYear: userProfile.deathYear,
          img: userProfile.img,
          gmail: userProfile.gmail
        }];
      }
    console.log("filterDataForPersonalView (util) - Received fullFamilyData (length):", fullFamilyData.length, "Received userProfile:", userProfile.name, userProfile.id);
  
    const personalDataMap = new Map();
    const userId = userProfile.id; // userId is from the (hopefully) single userProfile object
  
    function addPersonToMapById(personId) {
      if (personId === null || typeof personId === 'undefined') return;
      if (personalDataMap.has(personId)) return;
  
      const person = fullFamilyData.find(p => p.id === personId);
      if (person) {
        personalDataMap.set(person.id, { ...person });
      } else {
        console.warn(`filterDataForPersonalView (util): Person with ID ${personId} not found in fullFamilyData.`);
      }
    }
  
    // 1. Add the user themselves
    let userInSourceArray = fullFamilyData.find(p => p.id === userId);
    if (userInSourceArray) {
      console.log(`filterDataForPersonalView (util): Found user ${userId} in fullFamilyData. Adding to map.`);
      personalDataMap.set(userInSourceArray.id, { ...userInSourceArray });
    } else {
        console.warn(`User ID ${userId} not found in fullFamilyData. Using userProfile object directly.`);
        personalDataMap.set(userProfile.id, { 
          id: userProfile.id,
          name: userProfile.name,
          mid: userProfile.mid,
          fid: userProfile.fid,
          pids: userProfile.pids || [],
          gender: userProfile.gender,
          birthYear: userProfile.birthYear,
          deathYear: userProfile.deathYear,
          img: userProfile.img,
          gmail: userProfile.gmail
        });
      }
  
    if (!personalDataMap.has(userId)) {
      console.error("filterDataForPersonalView (util): User could not be added to the map. This should not happen if userProfile was valid.");
      return [];
    }
    const currentUser = personalDataMap.get(userId);
    console.log("Current user from map:", currentUser);

    // 2. Ajouter le père de l'utilisateur
    if (currentUser.fid) {
      console.log(`Looking for father with ID: ${currentUser.fid}`);
      addPersonToMapById(currentUser.fid);
    } else {
      console.log("User has no father ID (fid)");
    }

    // 3. Ajouter la mère de l'utilisateur
    if (currentUser.mid) {
      console.log(`Looking for mother with ID: ${currentUser.mid}`);
      addPersonToMapById(currentUser.mid);
    } else {
      console.log("User has no mother ID (mid)");
    }
  
    // 4. Ajouter les enfants de l'utilisateur
    console.log("Looking for children of user...");
    let childrenFound = 0;
    fullFamilyData.forEach(personInFullData => {
      // Vérifier si cette personne est un enfant de l'utilisateur
      if (personInFullData.fid === userId || personInFullData.mid === userId) {
        console.log(`Found child: ${personInFullData.name} (ID: ${personInFullData.id})`);
        if (!personalDataMap.has(personInFullData.id)) {
          personalDataMap.set(personInFullData.id, { ...personInFullData });
          childrenFound++;
        }
      }
    });
    console.log(`Total children found: ${childrenFound}`);
  
    // 5. Nettoyer les pids pour ne garder que ceux qui sont dans notre map
    const finalPersonalData = Array.from(personalDataMap.values()).map(personInMap => {
        const updatedPids = (personInMap.pids || []).filter(pid => personalDataMap.has(pid));
        return { ...personInMap, pids: updatedPids };
      });
  
      if (finalPersonalData.length === 0) {
        console.error("finalPersonalData is unexpectedly empty.");
        return [];
      }
  
      console.log("filterDataForPersonalView (util): Filtered data for personal view:");
      finalPersonalData.forEach(person => {
        console.log(`- ${person.name} (ID: ${person.id})`);
      });
      
      return finalPersonalData;
  }// END OF FILE: src/js/utils/family-data-filter.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/utils/graph-utils.js

// END OF FILE: src/js/utils/graph-utils.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/js/utils/helper.js

//js/utils/helpers.js
export function clearAlgorithmSteps() {
    localStorage.setItem('algorithmSteps', JSON.stringify([]));
  }
  // END OF FILE: src/js/utils/helper.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/main.ts

// frontend/src/main.ts
import './css/style.css';
import { initRouter } from './router';
// familyDataService.getAllFamilyData(); // Plus besoin ici, le router et les services s'en chargent

async function main() {
  // La logique d'initialisation des données est maintenant gérée par les services
  // et les composants eux-mêmes lorsqu'ils en ont besoin.
  // Le router s'assurera que l'utilisateur est authentifié avant d'afficher les pages protégées.
  initRouter();
}

main();// END OF FILE: src/main.ts

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/pages/dashboard.html

// END OF FILE: src/pages/dashboard.html

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/pages/index.html

// END OF FILE: src/pages/index.html

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/pages/login.html

// END OF FILE: src/pages/login.html

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/pages/register.html

// END OF FILE: src/pages/register.html

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/router.js

// router.js
import { renderNavbar } from './components/navbar';
import { renderLeftSidebar } from './components/leftSidebar';
import { renderRightSidebar } from './components/rightSidebar';
import { renderMainContent } from './components/mainContent';
import { renderProfilePage, setupProfileFormHandler } from './components/profile';
import { renderLoginPage, setupLoginFormHandler } from './components/login';
import { renderRegisterPage, setupRegisterFormHandler } from './components/register'; // Nouveau
import { authService } from './services/authService';
import { familyDataService } from './services/familyDataService';
// uiStateService reste local, pas de changement majeur
// Les imports d'algorithmes restent
import { initDijkstra } from './js/algorithms/dijkstra';
import { initBellmanFord } from './js/algorithms/bellman-ford';
import { initPrim } from './js/algorithms/prim';
import { initKruskal } from './js/algorithms/kruskal'; 


let currentActiveView = 'tree';
let currentDataScope = 'full';
let cyInstance = null;
let familyTreeInstance = null;

export function initRouter() {
  const app = document.querySelector('#app');

  function navigateTo(path) {
    history.pushState(null, null, path);
    renderRoute();
  }

  async function getPreparedData() {
    if (currentDataScope === 'personal') {
      // `getPersonalFamilyData` utilise maintenant le token pour identifier l'utilisateur côté backend
      return await familyDataService.getPersonalFamilyData();
    }
    return await familyDataService.getAllFamilyData();
  }

  async function renderFamilyTree() {
    const container = document.getElementById('family-tree-container');
    if (familyTreeInstance && typeof familyTreeInstance.destroy === 'function') {
        familyTreeInstance.destroy();
    } else if (container) {
        container.innerHTML = '';
    }
    if (container) container.innerHTML = ''; // Simple clear

    document.getElementById('tree-view').style.display = 'block';
    document.getElementById('graph-view').style.display = 'none';

    const dataToDisplay = await getPreparedData();
    if (dataToDisplay.length === 0) {
      container.innerHTML = 
        '<p style="text-align:center; padding-top:20px;">Aucune donnée familiale à afficher pour cette vue.</p>';
      return;
    }
    
    // Assurer que les IDs sont des strings pour FamilyTree.js
    const transformedDataForTree = dataToDisplay.map(p => ({
        ...p,
        id: String(p.id),
        fid: p.fid ? String(p.fid) : undefined,
        mid: p.mid ? String(p.mid) : undefined,
        pids: p.pids ? p.pids.map(pid => String(pid)) : [],
    }));

    import('./js/family-tree/tree-view').then(({ initFamilyTree, transformFamilyData }) => { // transformFamilyData n'est plus utilisé ici
      familyTreeInstance = initFamilyTree('family-tree-container', transformedDataForTree);
    });
  }

  async function renderGraphView() {
    if (cyInstance) {
      cyInstance.destroy();
      cyInstance = null;
    }
    const container = document.getElementById('graph-container');
    if(container) container.innerHTML = '';


    document.getElementById('tree-view').style.display = 'none';
    document.getElementById('graph-view').style.display = 'block';
    
    const dataToDisplay = await getPreparedData();
    if (dataToDisplay.length === 0) {
      container.innerHTML = 
        '<p style="text-align:center; padding-top:20px;">Aucune donnée familiale à afficher pour le graphe.</p>';
      return;
    }

    import('./js/family-tree/graph-view').then(async ({ initGraph, transformGraphData }) => {
      // transformGraphData s'attend à ce que les IDs soient déjà corrects (UUID strings)
      const graphData = transformGraphData(dataToDisplay);
      cyInstance = initGraph('graph-container', graphData);
      setupAlgorithmButtons(cyInstance);
    });
  }

  function updateActiveButtons() {
    document.querySelectorAll('.view-button').forEach(btn => {
        btn.classList.toggle('active-view-btn', btn.getAttribute('data-view') === currentActiveView);
    });
    document.querySelectorAll('.scope-button').forEach(btn => {
        btn.classList.toggle('active-scope-btn', btn.getAttribute('data-scope') === currentDataScope);
    });
  }

  function setupMainViewControls() {
    document.querySelectorAll('.view-button').forEach(button => {
      button.addEventListener('click', (e) => {
        currentActiveView = e.target.getAttribute('data-view');
        if (currentActiveView === 'tree') renderFamilyTree();
        else if (currentActiveView === 'graph') renderGraphView();
        updateActiveButtons();
      });
    });

    document.querySelectorAll('.scope-button').forEach(button => {
      button.addEventListener('click', (e) => {
        currentDataScope = e.target.getAttribute('data-scope');
        if (currentActiveView === 'tree') renderFamilyTree();
        else if (currentActiveView === 'graph') renderGraphView();
        updateActiveButtons();
      });
    });
  }
  
  function setupAlgorithmButtons(cy) {
    const runDijkstraButton = document.getElementById('run-dijkstra');
    if (runDijkstraButton) {
      runDijkstraButton.onclick = () => { 
        const startPersonId = document.getElementById('start-person').value; // UUID
        const endPersonId = document.getElementById('end-person').value;     // UUID
        if (startPersonId && endPersonId && cy) {
          const startNode = cy.getElementById(startPersonId);
          const endNode = cy.getElementById(endPersonId);
          if (startNode.length && endNode.length) {
            initDijkstra(cy, startNode, endNode);
            updateRightSidebar(); // Assurez-vous que cette fonction est définie
          } else {
            console.warn("Dijkstra: Start or end node not found.");
          }
        }
      };
    }
    // ... Idem pour Bellman-Ford, Prim, Kruskal ...
    const runBellmanFordButton = document.getElementById('run-bellman-ford');
    if (runBellmanFordButton) {
      runBellmanFordButton.onclick = () => {
        const startPersonId = document.getElementById('bellman-ford-start-person').value;
        const endPersonId = document.getElementById('bellman-ford-end-person').value;
        if (startPersonId && endPersonId && cy) {
          const startNode = cy.getElementById(startPersonId);
          const endNode = cy.getElementById(endPersonId);
          if (startNode.length && endNode.length) {
            initBellmanFord(cy, startNode, endNode);
            updateRightSidebar();
          } else {
            console.warn("Bellman-Ford: Start or end node not found.");
          }
        }
      };
    }

    const runPrimButton = document.getElementById('run-prim');
    if (runPrimButton) {
      runPrimButton.onclick = () => {
        const startPersonId = document.getElementById('prim-start-person').value;
        if (startPersonId && cy) {
          const startNode = cy.getElementById(startPersonId);
          if (startNode.length) {
            initPrim(cy, startNode);
            updateRightSidebar();
          } else {
            console.warn("Prim: Start node not found.");
          }
        }
      };
    }

    const runKruskalButton = document.getElementById('run-kruskal');
    if (runKruskalButton) {
      runKruskalButton.onclick = () => {
        if (cy) { 
            initKruskal(cy); 
            updateRightSidebar();
        }
      };
    }
  }

  async function renderRoute() {
    const path = window.location.pathname;
    const isAuthenticated = authService.isAuthenticated();

    // Gestion des redirections
    if (!isAuthenticated && path !== '/login' && path !== '/register') {
      navigateTo('/login');
      return;
    }
    if (isAuthenticated && (path === '/login' || path === '/register')) {
      navigateTo('/');
      return;
    }

    // Toujours rendre la navbar
    app.innerHTML = renderNavbar(); // renderNavbar devra peut-être être asynchrone si elle utilise fetchUserProfileFromServer

    let mainLayoutHtml = '';
    if (path === '/') {
        mainLayoutHtml = `
            ${renderLeftSidebar()}
            ${renderMainContent()}
            ${renderRightSidebar()}
        `;
    } else if (path === '/profile') {
        mainLayoutHtml = `<div id="main-content-profile" class="profile-container">${renderProfilePage()}</div>`;
    } else if (path === '/login') {
        mainLayoutHtml = `<div id="main-content-login" class="login-container">${renderLoginPage()}</div>`;
    } else if (path === '/register') {
        mainLayoutHtml = `<div id="main-content-register" class="login-container">${renderRegisterPage()}</div>`; // Utilise login-container pour le style
    } else {
        mainLayoutHtml = `<div id="main-content-404"><h2>404 - Page non trouvée</h2></div>`;
    }
    app.innerHTML += mainLayoutHtml;

    // Initialisations spécifiques à la page
    if (path === '/') {
      // Tentative de chargement du profil utilisateur pour s'assurer que le token est valide
      // et que le profil est à jour dans le cache pour la navbar et autres.
      try {
        await authService.fetchUserProfileFromServer(); 
        // Mettre à jour la navbar si elle dépend du profil chargé dynamiquement
        const newNavbarHtml = renderNavbar();
        const navbarElement = document.getElementById('navbar');
        if (navbarElement) navbarElement.outerHTML = newNavbarHtml;

      } catch (error) {
          // fetchUserProfileFromServer gère déjà la déconnexion en cas d'erreur critique
          // Pas besoin de rediriger à nouveau ici si authService le fait.
          console.log("Utilisateur non authentifié ou erreur de profil, redirection gérée par authService ou intercepteur.")
          return; // Arrêter le rendu si l'utilisateur est déconnecté
      }


      if (currentActiveView === 'tree') await renderFamilyTree();
      else await renderGraphView();
      
      setupMainViewControls();
      updateActiveButtons();

      // Peupler les selects des algorithmes
      const familyDataForSelect = await familyDataService.getAllFamilyData();
      if (familyDataForSelect.length > 0) {
            const dijkstraButton = document.getElementById('dijkstra-button');
            if (dijkstraButton) {
              dijkstraButton.addEventListener('click', () => {
                document.getElementById('dijkstra-form').style.display = document.getElementById('dijkstra-form').style.display === 'none' ? 'block' : 'none';
                populateAlgorithmSelects(['start-person', 'end-person'], familyDataForSelect);
              });
            }
             const bellmanFordButton = document.getElementById('bellman-ford-button');
            if (bellmanFordButton) {
                bellmanFordButton.addEventListener('click', () => {
                    document.getElementById('bellman-ford-form').style.display = document.getElementById('bellman-ford-form').style.display === 'none' ? 'block' : 'none';
                    populateAlgorithmSelects(['bellman-ford-start-person', 'bellman-ford-end-person'], familyDataForSelect);
                });
            }
            const primButton = document.getElementById('prim-button');
            if (primButton) {
                primButton.addEventListener('click', () => {
                    document.getElementById('prim-form').style.display = document.getElementById('prim-form').style.display === 'none' ? 'block' : 'none';
                    populateAlgorithmSelects(['prim-start-person'], familyDataForSelect);
                });
            }
            const kruskalButton = document.getElementById('kruskal-button');
            if (kruskalButton) {
                kruskalButton.addEventListener('click', () => {
                    document.getElementById('kruskal-form').style.display = document.getElementById('kruskal-form').style.display === 'none' ? 'block' : 'none';
                     // Kruskal n'a pas besoin de sélection utilisateur dans ce formulaire, mais on le garde pour la cohérence de l'UI
                    populateAlgorithmSelects(['kruskal-start-person'], familyDataForSelect);
                });
            }
        }
      if (cyInstance) setupAlgorithmButtons(cyInstance);

    } else if (path === '/profile') {
      await setupProfileFormHandler(); // Doit être async car il fait des appels API
    } else if (path === '/login') {
      setupLoginFormHandler();
    } else if (path === '/register') {
      setupRegisterFormHandler();
    }
  }

  function populateAlgorithmSelects(selectIds, data) {
    selectIds.forEach(selectId => {
        const selectElement = document.getElementById(selectId);
        if (selectElement) {
            const currentValue = selectElement.value; // Conserver la valeur si possible (moins pertinent ici)
            selectElement.innerHTML = ''; // Clear previous options
            data.forEach(person => {
                const option = document.createElement('option');
                option.value = person.id; // UUID
                option.textContent = person.name;
                selectElement.appendChild(option);
            });
            if(currentValue) selectElement.value = currentValue; // Restaurer si l'option existe toujours
        }
    });
  }

  document.body.addEventListener('click', e => {
    if (e.target.matches('a[data-link]')) {
      e.preventDefault();
      navigateTo(e.target.getAttribute('href'));
    }
  });

  window.addEventListener('popstate', renderRoute);
  renderRoute(); // Premier rendu
}

// S'assurer que cette fonction est bien définie et importée/exportée correctement si elle est dans un autre module.
// Pour l'instant, je la définis ici pour la simplicité.
function updateRightSidebar() {
  const rightSidebarContainer = document.getElementById('right-sidebar');
  if (rightSidebarContainer) {
    // Assumons que renderRightSidebar() est synchrone et utilise uiStateService
    // qui est toujours basé sur localStorage.
    rightSidebarContainer.innerHTML = renderRightSidebar();
  }
}// END OF FILE: src/router.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/services/api.js

// frontend/src/services/api.js
import axios from 'axios';

// Tu peux mettre ça dans un .env.local ou .env.development etc.
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';

const apiClient = axios.create({
  baseURL: API_BASE_URL,
});

apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('jwtToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Optionnel: Intercepteur de réponse pour gérer les erreurs globales (ex: 401 Unauthorized)
apiClient.interceptors.response.use(
  response => response,
  error => {
    if (error.response && error.response.status === 401) {
      // Gérer la déconnexion automatique si token invalide/expiré
      // Par exemple, en appelant authService.logout() et en redirigeant vers la page de connexion.
      // Attention aux dépendances circulaires si authService importe apiClient.
      console.error('Unauthorized, logging out.');
      localStorage.removeItem('jwtToken');
      localStorage.removeItem('userProfile'); // Cache du profil
      window.location.href = '/login'; // Redirection brutale
    }
    return Promise.reject(error);
  }
);

export default apiClient;// END OF FILE: src/services/api.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/services/authService.js

// frontend/src/services/authService.js
import apiClient from './api';

const JWT_TOKEN_KEY = 'jwtToken';
const USER_PROFILE_CACHE_KEY = 'userProfileCache'; // Cache du profil enrichi de l'arbre

export const authService = {
  // Connexion au backend
  login: async (email, password) => {
    const response = await apiClient.post('/auth/login', { email, password });
    localStorage.setItem(JWT_TOKEN_KEY, response.data.token);
    // Stocker l'utilisateur de base (id, email, nom) retourné par /auth/login
    // Le profil complet de l'arbre sera chargé séparément ou via ensureUserProfileInFamilyTree
    const baseUser = response.data.user; // {id, email, firstName, lastName}
    
    // Tentative de synchronisation/création du profil dans l'arbre
    try {
      const familyProfile = await authService.ensureUserProfileInFamilyTree({
        id: baseUser.id, // Utiliser l'ID d'authentification
        name: `${baseUser.firstName} ${baseUser.lastName}`,
        gmail: baseUser.email,
        // Les autres champs (gender, birthYear, img, relations) seront undefined
        // et pourront être complétés via la page de profil.
      });
      localStorage.setItem(USER_PROFILE_CACHE_KEY, JSON.stringify(familyProfile));
      return familyProfile; // Retourne le profil enrichi de l'arbre
    } catch (ensureError) {
      console.error("Erreur lors de l'intégration du profil dans l'arbre après connexion:", ensureError);
      // Même si l'ensure échoue, l'utilisateur est connecté. On stocke le profil de base.
      // On va stocker un profil minimal pour que getCurrentUserProfile retourne quelque chose
      const minimalProfileForCache = {
          id: baseUser.id,
          name: `${baseUser.firstName} ${baseUser.lastName}`,
          email: baseUser.email,
          // autres champs par défaut
      }
      localStorage.setItem(USER_PROFILE_CACHE_KEY, JSON.stringify(minimalProfileForCache));
      return minimalProfileForCache;
    }
  },

  // Inscription au backend
  register: async (userData) => { // userData: {email, password, firstName, lastName}
    const response = await apiClient.post('/auth/register', userData);
    localStorage.setItem(JWT_TOKEN_KEY, response.data.token);
    const baseUser = response.data.user;

    // Après l'inscription, s'assurer que le profil existe dans l'arbre
    try {
      const familyProfileData = {
        id: baseUser.id, // Utiliser l'ID d'authentification comme ID dans l'arbre
        name: `${baseUser.firstName} ${baseUser.lastName}`,
        gmail: baseUser.email,
        gender: 'unknown', // Valeurs par défaut, à compléter par l'utilisateur
        img: '/assets/avatars/default.svg',
        // fid, mid, pids seront null/vide par défaut
      };
      const familyProfile = await authService.ensureUserProfileInFamilyTree(familyProfileData);
      localStorage.setItem(USER_PROFILE_CACHE_KEY, JSON.stringify(familyProfile));
      return familyProfile; // Retourne le profil enrichi de l'arbre
    } catch (ensureError) {
      console.error("Erreur lors de l'intégration du profil dans l'arbre après inscription:", ensureError);
      const minimalProfileForCache = {
          id: baseUser.id,
          name: `${baseUser.firstName} ${baseUser.lastName}`,
          email: baseUser.email,
      }
      localStorage.setItem(USER_PROFILE_CACHE_KEY, JSON.stringify(minimalProfileForCache));
      return minimalProfileForCache;
    }
  },

  logout: () => {
    localStorage.removeItem(JWT_TOKEN_KEY);
    localStorage.removeItem(USER_PROFILE_CACHE_KEY);
    // Optionnel: appeler un endpoint backend /auth/logout si géré (ex: révocation de token)
    // apiClient.post('/auth/logout'); 
    // Redirection gérée par l'intercepteur de réponse ou le router
  },

  // Récupère le profil mis en cache localement (celui de l'arbre)
  getCurrentUserProfile: () => {
    const stored = localStorage.getItem(USER_PROFILE_CACHE_KEY);
    try {
      return stored ? JSON.parse(stored) : null;
    } catch (e) {
      console.error("Error parsing user profile from cache", e);
      localStorage.removeItem(USER_PROFILE_CACHE_KEY);
      return null;
    }
  },

  // Récupère le profil utilisateur authentifié et son profil familial depuis le serveur
  fetchUserProfileFromServer: async () => {
    try {
      // D'abord, obtenir les infos de l'utilisateur authentifié (nom, email, etc.)
      const authUserResponse = await apiClient.get('/auth/me');
      const authUser = authUserResponse.data; // {id (auth_uuid), email, firstName, lastName}

      // Ensuite, obtenir son profil détaillé de l'arbre généalogique
      // L'ID de personne dans l'arbre est le même que l'ID d'authentification (auth_uuid)
      const familyProfileResponse = await apiClient.get(`/family/${authUser.id}`);
      const familyProfile = familyProfileResponse.data;

      localStorage.setItem(USER_PROFILE_CACHE_KEY, JSON.stringify(familyProfile));
      return familyProfile;
    } catch (error) {
      console.error("Erreur lors de la récupération du profil utilisateur depuis le serveur:", error);
      // Si 404 pour familyProfile, cela signifie qu'il faut l'assurer (ensure)
      if (error.response && error.response.status === 404 && error.config.url.includes('/family/')) {
          const authUser = (await apiClient.get('/auth/me')).data;
           console.log("Profil familial non trouvé, tentative de création/synchronisation...");
           try {
               const ensuredProfile = await authService.ensureUserProfileInFamilyTree({
                   id: authUser.id,
                   name: `${authUser.firstName} ${authUser.lastName}`,
                   gmail: authUser.email,
               });
               localStorage.setItem(USER_PROFILE_CACHE_KEY, JSON.stringify(ensuredProfile));
               return ensuredProfile;
           } catch (ensureError) {
               console.error("Échec de ensureUserProfileInFamilyTree après 404:", ensureError);
               authService.logout(); // Déconnexion en cas d'erreur critique
               return null;
           }
      }
      authService.logout(); // Déconnexion en cas d'autre erreur critique
      return null;
    }
  },

  // Met à jour le profil de l'utilisateur DANS L'ARBRE généalogique (via /api/family/:id)
  updateCurrentUserProfileInFamilyTree: async (profileDataToUpdate) => {
    if (!profileDataToUpdate.id) {
      console.error("ID de profil manquant pour la mise à jour dans l'arbre");
      throw new Error("ID de profil manquant");
    }
    try {
      const response = await apiClient.put(`/family/${profileDataToUpdate.id}`, profileDataToUpdate);
      localStorage.setItem(USER_PROFILE_CACHE_KEY, JSON.stringify(response.data));
      return response.data;
    } catch (error) {
      console.error("Erreur lors de la mise à jour du profil dans l'arbre:", error);
      throw error;
    }
  },
  
  // S'assure que l'utilisateur a un profil dans l'arbre, le crée/met à jour si nécessaire.
  // `profileDetails` peut contenir des infos de base comme name, gender, birthYear, etc.
  // L'ID utilisé sera celui de l'utilisateur authentifié.
  ensureUserProfileInFamilyTree: async (profileDetails) => {
    // profileDetails devrait au minimum contenir l'ID qui est l'ID d'authentification.
    // S'il manque d'autres infos, le backend les prendra depuis User ou mettra des défauts.
    try {
      const response = await apiClient.post('/family/ensure-profile', profileDetails);
      // Ne pas mettre à jour le cache ici, car ensure-profile est souvent appelé
      // dans un contexte où le cache sera mis à jour par la fonction appelante (login, register, fetch)
      return response.data;
    } catch (error) {
      console.error("Erreur lors de ensureUserProfileInFamilyTree:", error);
      throw error;
    }
  },

  isAuthenticated: () => {
    const token = localStorage.getItem(JWT_TOKEN_KEY);
    // Pour une vérification plus robuste, on pourrait décoder le token et vérifier sa date d'expiration.
    // Mais pour une vérification simple côté client, la présence du token suffit souvent.
    // Le backend revalidera toujours le token.
    return !!token;
  }
};// END OF FILE: src/services/authService.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/services/familyDataService.js

// frontend/src/services/familyDataService.js
import apiClient from './api';
import { authService } from './authService'; // Pour obtenir l'ID de l'utilisateur courant si besoin

export const familyDataService = {
  getAllFamilyData: async () => {
    try {
      const response = await apiClient.get('/family');
      return response.data;
    } catch (error) {
      console.error("Failed to fetch all family data:", error);
      return [];
    }
  },

  getPersonById: async (personId) => {
    if (!personId) {
        console.warn("getPersonById: personId is undefined or null");
        return null;
    }
    try {
      const response = await apiClient.get(`/family/${personId}`);
      return response.data;
    } catch (error) {
      console.error(`Failed to fetch person with id ${personId}:`, error);
      return null;
    }
  },

  // Met à jour les données d'UNE personne dans l'arbre.
  // Cette fonction est générique. Pour mettre à jour le profil de l'utilisateur connecté,
  // il est préférable d'utiliser `authService.updateCurrentUserProfileInFamilyTree`.
  updatePersonInFamilyData: async (personToUpdate) => {
    if (!personToUpdate || !personToUpdate.id) {
      console.error("Données de personne invalides ou ID manquant pour la mise à jour.");
      throw new Error("Données de personne invalides ou ID manquant.");
    }
    try {
      const response = await apiClient.put(`/family/${personToUpdate.id}`, personToUpdate);
      
      // Si la personne mise à jour est l'utilisateur actuellement connecté, mettre à jour son cache
      const currentUser = authService.getCurrentUserProfile();
      if (currentUser && currentUser.id === response.data.id) {
        localStorage.setItem('userProfileCache', JSON.stringify(response.data));
      }
      return response.data;
    } catch (error) {
      console.error(`Failed to update person with id ${personToUpdate.id}:`, error);
      throw error;
    }
  },

  // Obtient les données filtrées pour la vue "personnelle" de l'utilisateur connecté
  getPersonalFamilyData: async () => {
    try {
      const response = await apiClient.get('/family/personal');
      return response.data;
    } catch (error) {
      console.error("Failed to fetch personal family data:", error);
      return [];
    }
  },

  // Les fonctions spécifiques addSpouse, setFather etc. sont supprimées.
  // La logique de modification des relations est maintenant gérée par la soumission
  // du formulaire de profil qui appelle `updatePersonInFamilyData` (ou via authService pour le user courant)
  // avec l'objet personne complet incluant les `fid`, `mid`, `pids` mis à jour.
};// END OF FILE: src/services/familyDataService.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/services/uiStateService.js

// src/services/uiStateService.js
const ALGORITHM_STEPS_KEY = 'algorithmSteps';

export const uiStateService = {
  clearAlgorithmSteps: () => {
    localStorage.setItem(ALGORITHM_STEPS_KEY, JSON.stringify([]));
  },

  addAlgorithmStep: (stepMessage) => {
    const steps = uiStateService.getAlgorithmSteps();
    steps.push(stepMessage);
    localStorage.setItem(ALGORITHM_STEPS_KEY, JSON.stringify(steps));
  },

  getAlgorithmSteps: () => {
    const stored = localStorage.getItem(ALGORITHM_STEPS_KEY);
    return stored ? JSON.parse(stored) : [];
  }
};// END OF FILE: src/services/uiStateService.js

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/typescript.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: src/typescript.svg

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/src/vite-env.d.ts

/// <reference types="vite/client" />
// END OF FILE: src/vite-env.d.ts

//---> PATH: /c/Users/PC/School/RO/TP/TP1/frontend/tsconfig.json

{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
// END OF FILE: tsconfig.json

